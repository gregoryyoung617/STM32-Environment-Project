
16112022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007a68  08007a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e50  08007e50  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e58  08007e58  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000090  08007ef0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08007ef0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d864  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a9  00000000  00000000  0002d924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00030550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017060  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e777  00000000  00000000  00048080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008997a  00000000  00000000  000567f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000e01c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a4c 	.word	0x08007a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08007a4c 	.word	0x08007a4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b974 	b.w	8000f3c <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	4604      	mov	r4, r0
 8000c74:	468e      	mov	lr, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14d      	bne.n	8000d16 <__udivmoddi4+0xaa>
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	4694      	mov	ip, r2
 8000c7e:	d969      	bls.n	8000d54 <__udivmoddi4+0xe8>
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	b152      	cbz	r2, 8000c9c <__udivmoddi4+0x30>
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	f1c2 0120 	rsb	r1, r2, #32
 8000c8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c96:	ea41 0e03 	orr.w	lr, r1, r3
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	0c21      	lsrs	r1, r4, #16
 8000ca2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca6:	fa1f f78c 	uxth.w	r7, ip
 8000caa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb2:	fb06 f107 	mul.w	r1, r6, r7
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x64>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cc2:	f080 811f 	bcs.w	8000f04 <__udivmoddi4+0x298>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 811c 	bls.w	8000f04 <__udivmoddi4+0x298>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb00 f707 	mul.w	r7, r0, r7
 8000ce4:	42a7      	cmp	r7, r4
 8000ce6:	d90a      	bls.n	8000cfe <__udivmoddi4+0x92>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	f080 810a 	bcs.w	8000f08 <__udivmoddi4+0x29c>
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	f240 8107 	bls.w	8000f08 <__udivmoddi4+0x29c>
 8000cfa:	4464      	add	r4, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d02:	1be4      	subs	r4, r4, r7
 8000d04:	2600      	movs	r6, #0
 8000d06:	b11d      	cbz	r5, 8000d10 <__udivmoddi4+0xa4>
 8000d08:	40d4      	lsrs	r4, r2
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xc2>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80ef 	beq.w	8000efe <__udivmoddi4+0x292>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x160>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd4>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80f9 	bhi.w	8000f32 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469e      	mov	lr, r3
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa4>
 8000d4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xec>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 8092 	bne.w	8000e86 <__udivmoddi4+0x21a>
 8000d62:	eba1 010c 	sub.w	r1, r1, ip
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f fe8c 	uxth.w	lr, ip
 8000d6e:	2601      	movs	r6, #1
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d76:	fb07 1113 	mls	r1, r7, r3, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb0e f003 	mul.w	r0, lr, r3
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x12c>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x12a>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f200 80cb 	bhi.w	8000f2c <__udivmoddi4+0x2c0>
 8000d96:	4643      	mov	r3, r8
 8000d98:	1a09      	subs	r1, r1, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1110 	mls	r1, r7, r0, r1
 8000da4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x156>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x154>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f200 80bb 	bhi.w	8000f36 <__udivmoddi4+0x2ca>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	eba4 040e 	sub.w	r4, r4, lr
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	e79c      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000dcc:	f1c6 0720 	rsb	r7, r6, #32
 8000dd0:	40b3      	lsls	r3, r6
 8000dd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dda:	fa20 f407 	lsr.w	r4, r0, r7
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	431c      	orrs	r4, r3
 8000de4:	40f9      	lsrs	r1, r7
 8000de6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dea:	fa00 f306 	lsl.w	r3, r0, r6
 8000dee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000df2:	0c20      	lsrs	r0, r4, #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e00:	fb08 f00e 	mul.w	r0, r8, lr
 8000e04:	4288      	cmp	r0, r1
 8000e06:	fa02 f206 	lsl.w	r2, r2, r6
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x1b8>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e14:	f080 8088 	bcs.w	8000f28 <__udivmoddi4+0x2bc>
 8000e18:	4288      	cmp	r0, r1
 8000e1a:	f240 8085 	bls.w	8000f28 <__udivmoddi4+0x2bc>
 8000e1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	458e      	cmp	lr, r1
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x1e2>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e44:	d26c      	bcs.n	8000f20 <__udivmoddi4+0x2b4>
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d96a      	bls.n	8000f20 <__udivmoddi4+0x2b4>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4461      	add	r1, ip
 8000e4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e52:	fba0 9402 	umull	r9, r4, r0, r2
 8000e56:	eba1 010e 	sub.w	r1, r1, lr
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	46c8      	mov	r8, r9
 8000e5e:	46a6      	mov	lr, r4
 8000e60:	d356      	bcc.n	8000f10 <__udivmoddi4+0x2a4>
 8000e62:	d053      	beq.n	8000f0c <__udivmoddi4+0x2a0>
 8000e64:	b15d      	cbz	r5, 8000e7e <__udivmoddi4+0x212>
 8000e66:	ebb3 0208 	subs.w	r2, r3, r8
 8000e6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e72:	fa22 f306 	lsr.w	r3, r2, r6
 8000e76:	40f1      	lsrs	r1, r6
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7e:	2600      	movs	r6, #0
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	f1c2 0320 	rsb	r3, r2, #32
 8000e8a:	40d8      	lsrs	r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	fa21 f303 	lsr.w	r3, r1, r3
 8000e94:	4091      	lsls	r1, r2
 8000e96:	4301      	orrs	r1, r0
 8000e98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea8:	0c0b      	lsrs	r3, r1, #16
 8000eaa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eae:	fb00 f60e 	mul.w	r6, r0, lr
 8000eb2:	429e      	cmp	r6, r3
 8000eb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x260>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec2:	d22f      	bcs.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d92d      	bls.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	b289      	uxth	r1, r1
 8000ed0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000edc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x28a>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eec:	d216      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d914      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ef2:	3e02      	subs	r6, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000efc:	e738      	b.n	8000d70 <__udivmoddi4+0x104>
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e705      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e3      	b.n	8000cd0 <__udivmoddi4+0x64>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6f8      	b.n	8000cfe <__udivmoddi4+0x92>
 8000f0c:	454b      	cmp	r3, r9
 8000f0e:	d2a9      	bcs.n	8000e64 <__udivmoddi4+0x1f8>
 8000f10:	ebb9 0802 	subs.w	r8, r9, r2
 8000f14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7a3      	b.n	8000e64 <__udivmoddi4+0x1f8>
 8000f1c:	4646      	mov	r6, r8
 8000f1e:	e7ea      	b.n	8000ef6 <__udivmoddi4+0x28a>
 8000f20:	4620      	mov	r0, r4
 8000f22:	e794      	b.n	8000e4e <__udivmoddi4+0x1e2>
 8000f24:	4640      	mov	r0, r8
 8000f26:	e7d1      	b.n	8000ecc <__udivmoddi4+0x260>
 8000f28:	46d0      	mov	r8, sl
 8000f2a:	e77b      	b.n	8000e24 <__udivmoddi4+0x1b8>
 8000f2c:	3b02      	subs	r3, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	e732      	b.n	8000d98 <__udivmoddi4+0x12c>
 8000f32:	4630      	mov	r0, r6
 8000f34:	e709      	b.n	8000d4a <__udivmoddi4+0xde>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	e742      	b.n	8000dc2 <__udivmoddi4+0x156>

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f52:	b29b      	uxth	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	605a      	str	r2, [r3, #4]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <usart_setup+0x60>)
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <usart_setup+0x64>)
 8000f90:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <usart_setup+0x60>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <usart_setup+0x60>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <usart_setup+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <usart_setup+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <usart_setup+0x60>)
 8000fac:	220c      	movs	r2, #12
 8000fae:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <usart_setup+0x60>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <usart_setup+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <usart_setup+0x60>)
 8000fbe:	f003 f88d 	bl	80040dc <HAL_HalfDuplex_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d000      	beq.n	8000fca <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8000fc8:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <usart_setup+0x60>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <usart_setup+0x60>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0220 	orr.w	r2, r2, #32
 8000fd8:	60da      	str	r2, [r3, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000168 	.word	0x20000168
 8000fe8:	40011000 	.word	0x40011000

08000fec <owInit>:

void owInit(OneWire *ow) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000ffc:	e015      	b.n	800102a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
    k=0;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 800100c:	e007      	b.n	800101e <owInit+0x32>
    r[k] = 0;
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	3301      	adds	r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b07      	cmp	r3, #7
 8001022:	ddf4      	ble.n	800100e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	dde6      	ble.n	8000ffe <owInit+0x12>
  }
  k=0;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8001034:	e008      	b.n	8001048 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4413      	add	r3, r2
 800103c:	3314      	adds	r3, #20
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b07      	cmp	r3, #7
 800104c:	ddf3      	ble.n	8001036 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	611a      	str	r2, [r3, #16]

}
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8001066:	f000 f850 	bl	800110a <getUsartIndex>
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <owReadHandler+0x70>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	2b00      	cmp	r3, #0
 8001078:	d025      	beq.n	80010c6 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <owReadHandler+0x70>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01f      	beq.n	80010c6 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8001086:	bf00      	nop
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <owReadHandler+0x70>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f9      	beq.n	8001088 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8001094:	79fc      	ldrb	r4, [r7, #7]
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <owReadHandler+0x70>)
 8001098:	f7ff ff52 	bl	8000f40 <USART_ReceiveData>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <owReadHandler+0x74>)
 80010a2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2201      	movs	r2, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <owReadHandler+0x78>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <owReadHandler+0x78>)
 80010c4:	701a      	strb	r2, [r3, #0]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40011000 	.word	0x40011000
 80010d4:	200000b0 	.word	0x200000b0
 80010d8:	200000ac 	.word	0x200000ac

080010dc <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80010e2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80010e6:	f7ff ff4d 	bl	8000f84 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 80010ea:	20f0      	movs	r0, #240	; 0xf0
 80010ec:	f000 f816 	bl	800111c <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 80010f0:	f000 f854 	bl	800119c <owEchoRead>
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80010f8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80010fc:	f7ff ff42 	bl	8000f84 <usart_setup>
  return owPresence;
 8001100:	88fb      	ldrh	r3, [r7, #6]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <owSend>:

void owSend(uint16_t data) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8001126:	f7ff fff0 	bl	800110a <getUsartIndex>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	2301      	movs	r3, #1
 8001130:	4093      	lsls	r3, r2
 8001132:	b25a      	sxtb	r2, r3
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <owSend+0x50>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b25b      	sxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b25b      	sxtb	r3, r3
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <owSend+0x50>)
 8001144:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	4619      	mov	r1, r3
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <owSend+0x54>)
 800114c:	f7ff ff08 	bl	8000f60 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8001150:	bf00      	nop
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <owSend+0x58>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115c:	2b40      	cmp	r3, #64	; 0x40
 800115e:	d1f8      	bne.n	8001152 <owSend+0x36>
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000ac 	.word	0x200000ac
 8001170:	40011000 	.word	0x40011000
 8001174:	20000168 	.word	0x20000168

08001178 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <owEchoRead>:

uint16_t owEchoRead() {//
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 80011a2:	f7ff ffb2 	bl	800110a <getUsartIndex>
 80011a6:	4603      	mov	r3, r0
 80011a8:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 80011b0:	bf00      	nop
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <owEchoRead+0x48>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	fa42 f303 	asr.w	r3, r2, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <owEchoRead+0x36>
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	80fa      	strh	r2, [r7, #6]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ef      	bne.n	80011b2 <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <owEchoRead+0x4c>)
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	b29b      	uxth	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000ac 	.word	0x200000ac
 80011e8:	200000b0 	.word	0x200000b0

080011ec <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e014      	b.n	8001228 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	22ff      	movs	r2, #255	; 0xff
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e002      	b.n	8001216 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	3301      	adds	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b07      	cmp	r3, #7
 800122c:	d9e7      	bls.n	80011fe <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 800122e:	683b      	ldr	r3, [r7, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffcc 	bl	80011ec <byteToBits>
  for (i = 0; i < 8; ++i) {
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00b      	b.n	8001272 <owSendByte+0x36>
    owSend(data[i]);
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff58 	bl	800111c <owSend>
  for (i = 0; i < 8; ++i) {
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b07      	cmp	r3, #7
 8001276:	ddf0      	ble.n	800125a <owSendByte+0x1e>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e018      	b.n	80012d8 <owCRC+0x56>
      fb = crc ^ dat;
 80012a6:	7b7a      	ldrb	r2, [r7, #13]
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	4053      	eors	r3, r2
 80012ac:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d104      	bne.n	80012d2 <owCRC+0x50>
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80012ce:	43db      	mvns	r3, r3
 80012d0:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9e3      	bls.n	80012a6 <owCRC+0x24>
    }
    st_byt++;
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80012e4:	7b3a      	ldrb	r2, [r7, #12]
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3d4      	bcc.n	8001296 <owCRC+0x14>
  return crc;
 80012ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8001302:	2107      	movs	r1, #7
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffbc 	bl	8001282 <owCRC>
 800130a:	4603      	mov	r3, r0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 800132c:	f7ff fed6 	bl	80010dc <owResetCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2bf0      	cmp	r3, #240	; 0xf0
 8001334:	d101      	bne.n	800133a <hasNextRom+0x26>
    return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e097      	b.n	800146a <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 800133a:	20f0      	movs	r0, #240	; 0xf0
 800133c:	f7ff ff7e 	bl	800123c <owSendByte>
  do {
		uint8_t answerBit =0;
 8001340:	2300      	movs	r3, #0
 8001342:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8001358:	20ff      	movs	r0, #255	; 0xff
 800135a:	f7ff fedf 	bl	800111c <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 800135e:	f7ff ff1d 	bl	800119c <owEchoRead>
 8001362:	4603      	mov	r3, r0
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff07 	bl	8001178 <owReadSlot>
 800136a:	4603      	mov	r3, r0
 800136c:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 800136e:	20ff      	movs	r0, #255	; 0xff
 8001370:	f7ff fed4 	bl	800111c <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8001374:	f7ff ff12 	bl	800119c <owEchoRead>
 8001378:	4603      	mov	r3, r0
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fefc 	bl	8001178 <owReadSlot>
 8001380:	4603      	mov	r3, r0
 8001382:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8001384:	7afa      	ldrb	r2, [r7, #11]
 8001386:	7abb      	ldrb	r3, [r7, #10]
 8001388:	429a      	cmp	r2, r3
 800138a:	d105      	bne.n	8001398 <hasNextRom+0x84>
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e068      	b.n	800146a <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8001398:	7afa      	ldrb	r2, [r7, #11]
 800139a:	7abb      	ldrb	r3, [r7, #10]
 800139c:	429a      	cmp	r2, r3
 800139e:	d002      	beq.n	80013a6 <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	75bb      	strb	r3, [r7, #22]
 80013a4:	e023      	b.n	80013ee <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 80013a6:	7ffa      	ldrb	r2, [r7, #31]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d102      	bne.n	80013b6 <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 80013b0:	2301      	movs	r3, #1
 80013b2:	75bb      	strb	r3, [r7, #22]
 80013b4:	e01b      	b.n	80013ee <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 80013b6:	7ffa      	ldrb	r2, [r7, #31]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dd02      	ble.n	80013c6 <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 80013c0:	2300      	movs	r3, #0
 80013c2:	75bb      	strb	r3, [r7, #22]
 80013c4:	e00e      	b.n	80013e4 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	3314      	adds	r3, #20
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	fa42 f303 	asr.w	r3, r2, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80013e4:	7dbb      	ldrb	r3, [r7, #22]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 80013ee:	7dbb      	ldrb	r3, [r7, #22]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2da      	uxtb	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8001412:	7dbb      	ldrb	r3, [r7, #22]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <hasNextRom+0x108>
 8001418:	2300      	movs	r3, #0
 800141a:	e000      	b.n	800141e <hasNextRom+0x10a>
 800141c:	23ff      	movs	r3, #255	; 0xff
 800141e:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8001420:	7d7b      	ldrb	r3, [r7, #21]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe79 	bl	800111c <owSend>
    ui32BitNumber++;//ищем следующий бит
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	3301      	adds	r3, #1
 800142e:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001430:	7ffb      	ldrb	r3, [r7, #31]
 8001432:	2b3f      	cmp	r3, #63	; 0x3f
 8001434:	d984      	bls.n	8001340 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 800143c:	e00b      	b.n	8001456 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	441a      	add	r2, r3
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	7811      	ldrb	r1, [r2, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	3301      	adds	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b06      	cmp	r3, #6
 800145a:	d9f0      	bls.n	800143e <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bfcc      	ite	gt
 8001464:	2301      	movgt	r3, #1
 8001466:	2300      	movle	r3, #0
 8001468:	b2db      	uxtb	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fdb4 	bl	8000fec <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff40 	bl	8001314 <hasNextRom>
 8001494:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da02      	bge.n	80014a2 <owSearchCmd+0x30>
      return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	e009      	b.n	80014b6 <owSearchCmd+0x44>
    device++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <owSearchCmd+0x42>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	dde7      	ble.n	8001484 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 80014b4:	68fb      	ldr	r3, [r7, #12]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	int i = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80014ca:	f7ff fe07 	bl	80010dc <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80014ce:	2055      	movs	r0, #85	; 0x55
 80014d0:	f7ff feb4 	bl	800123c <owSendByte>
  for (; i < 8; i++)
 80014d4:	e009      	b.n	80014ea <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff feac 	bl	800123c <owSendByte>
  for (; i < 8; i++)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	ddf2      	ble.n	80014d6 <owMatchRomCmd+0x18>
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f7ff ffda 	bl	80014be <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 800150a:	2044      	movs	r0, #68	; 0x44
 800150c:	f7ff fe96 	bl	800123c <owSendByte>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8001524:	2300      	movs	r3, #0
 8001526:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d001      	beq.n	8001534 <owReadScratchpadCmd+0x1c>
 8001530:	2b28      	cmp	r3, #40	; 0x28
 8001532:	d109      	bne.n	8001548 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8001534:	2348      	movs	r3, #72	; 0x48
 8001536:	82bb      	strh	r3, [r7, #20]
      break;
 8001538:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f7ff ffbf 	bl	80014be <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001540:	20be      	movs	r0, #190	; 0xbe
 8001542:	f7ff fe7b 	bl	800123c <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 8001546:	e048      	b.n	80015da <owReadScratchpadCmd+0xc2>
      return data;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	e04b      	b.n	80015e4 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 800154c:	8abb      	ldrh	r3, [r7, #20]
 800154e:	3b08      	subs	r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	da00      	bge.n	8001556 <owReadScratchpadCmd+0x3e>
 8001554:	3307      	adds	r3, #7
 8001556:	10db      	asrs	r3, r3, #3
 8001558:	b2da      	uxtb	r2, r3
 800155a:	8afb      	ldrh	r3, [r7, #22]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 8001566:	20ff      	movs	r0, #255	; 0xff
 8001568:	f7ff fdd8 	bl	800111c <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 800156c:	f7ff fe16 	bl	800119c <owEchoRead>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe00 	bl	8001178 <owReadSlot>
 8001578:	4603      	mov	r3, r0
 800157a:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 800157c:	7cbb      	ldrb	r3, [r7, #18]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d113      	bne.n	80015aa <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b25a      	sxtb	r2, r3
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b259      	sxtb	r1, r3
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	e014      	b.n	80015d4 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 80015aa:	7cfb      	ldrb	r3, [r7, #19]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b259      	sxtb	r1, r3
 80015ca:	7cfb      	ldrb	r3, [r7, #19]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	b2ca      	uxtb	r2, r1
 80015d2:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 80015d4:	8afb      	ldrh	r3, [r7, #22]
 80015d6:	3301      	adds	r3, #1
 80015d8:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 80015da:	8afa      	ldrh	r2, [r7, #22]
 80015dc:	8abb      	ldrh	r3, [r7, #20]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b4      	bcc.n	800154c <owReadScratchpadCmd+0x34>
  }
  return data;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d022      	beq.n	8001660 <readTemperature+0x74>
 800161a:	2b28      	cmp	r3, #40	; 0x28
 800161c:	d13a      	bne.n	8001694 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	461a      	mov	r2, r3
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff ff76 	bl	8001518 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	79db      	ldrb	r3, [r3, #7]
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	b25a      	sxtb	r2, r3
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	7a1b      	ldrb	r3, [r3, #8]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	b2db      	uxtb	r3, r3
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	7a1b      	ldrb	r3, [r3, #8]
 800164a:	f003 020f 	and.w	r2, r3, #15
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	111b      	asrs	r3, r3, #4
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800165e:	e01c      	b.n	800169a <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	461a      	mov	r2, r3
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ff55 	bl	8001518 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	7a1b      	ldrb	r3, [r3, #8]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	7a1b      	ldrb	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001692:	e002      	b.n	800169a <readTemperature+0xae>
    default:
      return t;
 8001694:	8c3b      	ldrh	r3, [r7, #32]
 8001696:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001698:	e008      	b.n	80016ac <readTemperature+0xc0>
  }
  if (reSense) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff ff29 	bl	80014fa <owConvertTemperatureCmd>
  }
  return t;
 80016a8:	8c3b      	ldrh	r3, [r7, #32]
 80016aa:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 80016ac:	2300      	movs	r3, #0
 80016ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016b2:	f362 0307 	bfi	r3, r2, #0, #8
 80016b6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016ba:	f362 230f 	bfi	r3, r2, #8, #8
 80016be:	4618      	mov	r0, r3
 80016c0:	3730      	adds	r7, #48	; 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80016ce:	f7ff fd05 	bl	80010dc <owResetCmd>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2bf0      	cmp	r3, #240	; 0xf0
 80016d6:	d079      	beq.n	80017cc <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80016d8:	484e      	ldr	r0, [pc, #312]	; (8001814 <get_ROMid+0x14c>)
 80016da:	f7ff feca 	bl	8001472 <owSearchCmd>
 80016de:	4603      	mov	r3, r0
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <get_ROMid+0x150>)
 80016e4:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <get_ROMid+0x150>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d113      	bne.n	8001716 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <get_ROMid+0x154>)
 80016f0:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <get_ROMid+0x158>)
 80016f2:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <get_ROMid+0x15c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e005      	b.n	8001708 <get_ROMid+0x40>
					__asm__("nop");
 80016fc:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <get_ROMid+0x15c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <get_ROMid+0x15c>)
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <get_ROMid+0x15c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <get_ROMid+0x154>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3f3      	bcc.n	80016fc <get_ROMid+0x34>
				pDelay = 1000000;
 8001714:	e7eb      	b.n	80016ee <get_ROMid+0x26>
			}

		}
		i = 0;
 8001716:	4b43      	ldr	r3, [pc, #268]	; (8001824 <get_ROMid+0x15c>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 800171c:	e04f      	b.n	80017be <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <get_ROMid+0x15c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <get_ROMid+0x14c>)
 8001726:	4413      	add	r3, r2
 8001728:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fde5 	bl	80012fa <owCRC8>
 8001730:	4603      	mov	r3, r0
 8001732:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	79db      	ldrb	r3, [r3, #7]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	429a      	cmp	r2, r3
 800173c:	d101      	bne.n	8001742 <get_ROMid+0x7a>
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <get_ROMid+0x160>)
 8001740:	e000      	b.n	8001744 <get_ROMid+0x7c>
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <get_ROMid+0x164>)
 8001744:	4a3a      	ldr	r2, [pc, #232]	; (8001830 <get_ROMid+0x168>)
 8001746:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <get_ROMid+0x15c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <get_ROMid+0x16c>)
 8001750:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461e      	mov	r6, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	799b      	ldrb	r3, [r3, #6]
 800175c:	469c      	mov	ip, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800176e:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001774:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800177a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001780:	9305      	str	r3, [sp, #20]
 8001782:	9504      	str	r5, [sp, #16]
 8001784:	9403      	str	r4, [sp, #12]
 8001786:	9002      	str	r0, [sp, #8]
 8001788:	9101      	str	r1, [sp, #4]
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	4663      	mov	r3, ip
 800178e:	4632      	mov	r2, r6
 8001790:	4929      	ldr	r1, [pc, #164]	; (8001838 <get_ROMid+0x170>)
 8001792:	482a      	ldr	r0, [pc, #168]	; (800183c <get_ROMid+0x174>)
 8001794:	f003 fc14 	bl	8004fc0 <siprintf>

			if (crc != r->crc) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	79db      	ldrb	r3, [r3, #7]
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d008      	beq.n	80017b4 <get_ROMid+0xec>
				devInfo.device = i;
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <get_ROMid+0x15c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <get_ROMid+0x16c>)
 80017aa:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80017ac:	4924      	ldr	r1, [pc, #144]	; (8001840 <get_ROMid+0x178>)
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <get_ROMid+0x174>)
 80017b0:	f003 fc06 	bl	8004fc0 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <get_ROMid+0x15c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <get_ROMid+0x15c>)
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <get_ROMid+0x150>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <get_ROMid+0x15c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8a8      	bhi.n	800171e <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <get_ROMid+0x154>)
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <get_ROMid+0x158>)
 80017d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <get_ROMid+0x15c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e005      	b.n	80017e6 <get_ROMid+0x11e>
		__asm__("nop");
 80017da:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <get_ROMid+0x15c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <get_ROMid+0x15c>)
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <get_ROMid+0x15c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <get_ROMid+0x154>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3f3      	bcc.n	80017da <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <get_ROMid+0x168>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	490c      	ldr	r1, [pc, #48]	; (8001828 <get_ROMid+0x160>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fcf1 	bl	80001e0 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <get_ROMid+0x140>
 8001804:	2300      	movs	r3, #0
 8001806:	e001      	b.n	800180c <get_ROMid+0x144>
	else return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	200000c8 	.word	0x200000c8
 8001818:	200000c4 	.word	0x200000c4
 800181c:	20000000 	.word	0x20000000
 8001820:	000f4240 	.word	0x000f4240
 8001824:	200000e4 	.word	0x200000e4
 8001828:	08007a68 	.word	0x08007a68
 800182c:	08007a70 	.word	0x08007a70
 8001830:	20000110 	.word	0x20000110
 8001834:	200000ec 	.word	0x200000ec
 8001838:	08007a7c 	.word	0x08007a7c
 800183c:	200000f0 	.word	0x200000f0
 8001840:	08007aa4 	.word	0x08007aa4

08001844 <get_Temperature>:

void get_Temperature (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	i=0;
 8001848:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <get_Temperature+0xf0>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 800184e:	e067      	b.n	8001920 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 8001850:	4b38      	ldr	r3, [pc, #224]	; (8001934 <get_Temperature+0xf0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a38      	ldr	r2, [pc, #224]	; (8001938 <get_Temperature+0xf4>)
 8001856:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800185a:	2b28      	cmp	r3, #40	; 0x28
 800185c:	d006      	beq.n	800186c <get_Temperature+0x28>
 800185e:	2b28      	cmp	r3, #40	; 0x28
 8001860:	dc56      	bgt.n	8001910 <get_Temperature+0xcc>
 8001862:	2b00      	cmp	r3, #0
 8001864:	d056      	beq.n	8001914 <get_Temperature+0xd0>
 8001866:	2b10      	cmp	r3, #16
 8001868:	d029      	beq.n	80018be <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800186a:	e051      	b.n	8001910 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <get_Temperature+0xf0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4a31      	ldr	r2, [pc, #196]	; (8001938 <get_Temperature+0xf4>)
 8001874:	4413      	add	r3, r2
 8001876:	2201      	movs	r2, #1
 8001878:	4619      	mov	r1, r3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <get_Temperature+0xf4>)
 800187c:	f7ff feb6 	bl	80015ec <readTemperature>
 8001880:	4603      	mov	r3, r0
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <get_Temperature+0xf8>)
 8001884:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <get_Temperature+0xf8>)
 8001888:	f993 3000 	ldrsb.w	r3, [r3]
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	461a      	mov	r2, r3
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <get_Temperature+0xf8>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	4413      	add	r3, r2
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <get_Temperature+0xf0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <get_Temperature+0xfc>)
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018bc:	e02b      	b.n	8001916 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <get_Temperature+0xf0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <get_Temperature+0xf4>)
 80018c6:	4413      	add	r3, r2
 80018c8:	2201      	movs	r2, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	481a      	ldr	r0, [pc, #104]	; (8001938 <get_Temperature+0xf4>)
 80018ce:	f7ff fe8d 	bl	80015ec <readTemperature>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <get_Temperature+0xf8>)
 80018d6:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <get_Temperature+0xf8>)
 80018da:	f993 3000 	ldrsb.w	r3, [r3]
 80018de:	461a      	mov	r2, r3
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <get_Temperature+0xf8>)
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	4413      	add	r3, r2
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <get_Temperature+0xf0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <get_Temperature+0xfc>)
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800190e:	e002      	b.n	8001916 <get_Temperature+0xd2>
			break;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <get_Temperature+0xd2>
			break;
 8001914:	bf00      	nop
	for (; i < devices; i++) {
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <get_Temperature+0xf0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <get_Temperature+0xf0>)
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <get_Temperature+0x100>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b03      	ldr	r3, [pc, #12]	; (8001934 <get_Temperature+0xf0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d890      	bhi.n	8001850 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000e4 	.word	0x200000e4
 8001938:	200000c8 	.word	0x200000c8
 800193c:	200000e8 	.word	0x200000e8
 8001940:	200000bc 	.word	0x200000bc
 8001944:	200000c4 	.word	0x200000c4

08001948 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af02      	add	r7, sp, #8
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f023 030f 	bic.w	r3, r3, #15
 8001958:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	f043 030c 	orr.w	r3, r3, #12
 8001966:	b2db      	uxtb	r3, r3
 8001968:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	b2db      	uxtb	r3, r3
 8001972:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	f043 030c 	orr.w	r3, r3, #12
 800197a:	b2db      	uxtb	r3, r3
 800197c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	b2db      	uxtb	r3, r3
 8001986:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001988:	f107 0208 	add.w	r2, r7, #8
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2304      	movs	r3, #4
 8001992:	214e      	movs	r1, #78	; 0x4e
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <lcd_send_cmd+0x5c>)
 8001996:	f001 fc01 	bl	800319c <HAL_I2C_Master_Transmit>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000114 	.word	0x20000114

080019a8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f023 030f 	bic.w	r3, r3, #15
 80019b8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	f043 030d 	orr.w	r3, r3, #13
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	f043 0309 	orr.w	r3, r3, #9
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	f043 030d 	orr.w	r3, r3, #13
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	f043 0309 	orr.w	r3, r3, #9
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	2364      	movs	r3, #100	; 0x64
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2304      	movs	r3, #4
 80019f2:	214e      	movs	r1, #78	; 0x4e
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <lcd_send_data+0x5c>)
 80019f6:	f001 fbd1 	bl	800319c <HAL_I2C_Master_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000114 	.word	0x20000114

08001a08 <lcd_clear>:

void lcd_clear (void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001a0e:	2080      	movs	r0, #128	; 0x80
 8001a10:	f7ff ff9a 	bl	8001948 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e005      	b.n	8001a26 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a1a:	2020      	movs	r0, #32
 8001a1c:	f7ff ffc4 	bl	80019a8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b45      	cmp	r3, #69	; 0x45
 8001a2a:	ddf6      	ble.n	8001a1a <lcd_clear+0x12>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <lcd_put_cur+0x18>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d005      	beq.n	8001a58 <lcd_put_cur+0x22>
 8001a4c:	e009      	b.n	8001a62 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	603b      	str	r3, [r7, #0]
            break;
 8001a56:	e004      	b.n	8001a62 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a5e:	603b      	str	r3, [r7, #0]
            break;
 8001a60:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff6e 	bl	8001948 <lcd_send_cmd>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <lcd_init>:


void lcd_init (void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f000 fee7 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a7e:	2030      	movs	r0, #48	; 0x30
 8001a80:	f7ff ff62 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001a84:	2005      	movs	r0, #5
 8001a86:	f000 fee1 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a8a:	2030      	movs	r0, #48	; 0x30
 8001a8c:	f7ff ff5c 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 fedb 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a96:	2030      	movs	r0, #48	; 0x30
 8001a98:	f7ff ff56 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f000 fed5 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001aa2:	2020      	movs	r0, #32
 8001aa4:	f7ff ff50 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f000 fecf 	bl	800284c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001aae:	2028      	movs	r0, #40	; 0x28
 8001ab0:	f7ff ff4a 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f000 fec9 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001aba:	2008      	movs	r0, #8
 8001abc:	f7ff ff44 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 fec3 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff ff3e 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f000 febd 	bl	800284c <HAL_Delay>
	HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 feba 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ad8:	2006      	movs	r0, #6
 8001ada:	f7ff ff35 	bl	8001948 <lcd_send_cmd>
	HAL_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f000 feb4 	bl	800284c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ae4:	200c      	movs	r0, #12
 8001ae6:	f7ff ff2f 	bl	8001948 <lcd_send_cmd>
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001af6:	e006      	b.n	8001b06 <lcd_send_string+0x18>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff51 	bl	80019a8 <lcd_send_data>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f4      	bne.n	8001af8 <lcd_send_string+0xa>
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b1c:	b092      	sub	sp, #72	; 0x48
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b20:	f000 fe22 	bl	8002768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b24:	f000 fa78 	bl	8002018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b28:	f000 fb3a 	bl	80021a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b2c:	f000 fae0 	bl	80020f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b30:	f000 fb0c 	bl	800214c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  get_ROMid();
 8001b34:	f7ff fdc8 	bl	80016c8 <get_ROMid>

  lcd_init();
 8001b38:	f7ff ff9c 	bl	8001a74 <lcd_init>
  char heat_loss[7];
  char money_loss[7];
  float n_heat;
  char value[5];
  lcd_send_string("Enter num panes: ");
 8001b3c:	4894      	ldr	r0, [pc, #592]	; (8001d90 <main+0x278>)
 8001b3e:	f7ff ffd6 	bl	8001aee <lcd_send_string>
  lcd_put_cur(1,0);
 8001b42:	2100      	movs	r1, #0
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7ff ff76 	bl	8001a36 <lcd_put_cur>
  gcvt(n_layers, 4, value);
 8001b4a:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <main+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd0a 	bl	8000568 <__aeabi_f2d>
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2004      	movs	r0, #4
 8001b60:	ec45 4b10 	vmov	d0, r4, r5
 8001b64:	f003 f9d6 	bl	8004f14 <gcvt>
  lcd_send_string(value);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffbe 	bl	8001aee <lcd_send_string>


  float resistance_total = 0.17 + n_layers*thickness/glass_tc + 0.18*(n_layers-1);
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <main+0x27c>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	4b87      	ldr	r3, [pc, #540]	; (8001d98 <main+0x280>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	4b86      	ldr	r3, [pc, #536]	; (8001d9c <main+0x284>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b8c:	ee16 0a90 	vmov	r0, s13
 8001b90:	f7fe fcea 	bl	8000568 <__aeabi_f2d>
 8001b94:	a37a      	add	r3, pc, #488	; (adr r3, 8001d80 <main+0x268>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fb87 	bl	80002ac <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <main+0x27c>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb4:	ee17 0a90 	vmov	r0, s15
 8001bb8:	f7fe fcd6 	bl	8000568 <__aeabi_f2d>
 8001bbc:	a372      	add	r3, pc, #456	; (adr r3, 8001d88 <main+0x270>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fd29 	bl	8000618 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fb6d 	bl	80002ac <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ffdf 	bl	8000b9c <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  float u_value = 1/resistance_total;
 8001be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float float_money;

 float time_1 = 0;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
 float time_2 = 0;
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 float diff_time = 0;
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 lcd_put_cur(1,0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff ff15 	bl	8001a36 <lcd_put_cur>

	 if (step == 1){
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <main+0x288>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d128      	bne.n	8001c66 <main+0x14e>
	 	lcd_clear();
 8001c14:	f7ff fef8 	bl	8001a08 <lcd_clear>
	 	lcd_put_cur(0,0);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff ff0b 	bl	8001a36 <lcd_put_cur>
	 	lcd_send_string("Enter width: ");
 8001c20:	4860      	ldr	r0, [pc, #384]	; (8001da4 <main+0x28c>)
 8001c22:	f7ff ff64 	bl	8001aee <lcd_send_string>
	 	lcd_put_cur(1,0);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff ff04 	bl	8001a36 <lcd_put_cur>
	 	gcvt(width, 4, value);
 8001c2e:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <main+0x290>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc98 	bl	8000568 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	2004      	movs	r0, #4
 8001c44:	ec45 4b10 	vmov	d0, r4, r5
 8001c48:	f003 f964 	bl	8004f14 <gcvt>
	 	lcd_send_string(value);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff4c 	bl	8001aee <lcd_send_string>
	 	lcd_send_string(" m");
 8001c56:	4855      	ldr	r0, [pc, #340]	; (8001dac <main+0x294>)
 8001c58:	f7ff ff49 	bl	8001aee <lcd_send_string>
	 	HAL_Delay(1000);
 8001c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c60:	f000 fdf4 	bl	800284c <HAL_Delay>
 8001c64:	e7ce      	b.n	8001c04 <main+0xec>
	 }
	 else if (step == 2){
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <main+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d128      	bne.n	8001cc0 <main+0x1a8>
	 	lcd_clear();
 8001c6e:	f7ff fecb 	bl	8001a08 <lcd_clear>
	 	lcd_put_cur(0,0);
 8001c72:	2100      	movs	r1, #0
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fede 	bl	8001a36 <lcd_put_cur>
	 	lcd_send_string("Enter height: ");
 8001c7a:	484d      	ldr	r0, [pc, #308]	; (8001db0 <main+0x298>)
 8001c7c:	f7ff ff37 	bl	8001aee <lcd_send_string>
	 	lcd_put_cur(1,0);
 8001c80:	2100      	movs	r1, #0
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff fed7 	bl	8001a36 <lcd_put_cur>
	 	gcvt(height, 4, value);
 8001c88:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <main+0x29c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc6b 	bl	8000568 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	2004      	movs	r0, #4
 8001c9e:	ec45 4b10 	vmov	d0, r4, r5
 8001ca2:	f003 f937 	bl	8004f14 <gcvt>
	 	lcd_send_string(value);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff1f 	bl	8001aee <lcd_send_string>
	 	lcd_send_string(" m");
 8001cb0:	483e      	ldr	r0, [pc, #248]	; (8001dac <main+0x294>)
 8001cb2:	f7ff ff1c 	bl	8001aee <lcd_send_string>
	 	HAL_Delay(1000);
 8001cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cba:	f000 fdc7 	bl	800284c <HAL_Delay>
 8001cbe:	e7a1      	b.n	8001c04 <main+0xec>
	 }
	 else if (step == 3){
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <main+0x288>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d128      	bne.n	8001d1a <main+0x202>
	 	lcd_clear();
 8001cc8:	f7ff fe9e 	bl	8001a08 <lcd_clear>
	 	lcd_put_cur(0,0);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff feb1 	bl	8001a36 <lcd_put_cur>
	 	lcd_send_string("Enter spacing: ");
 8001cd4:	4838      	ldr	r0, [pc, #224]	; (8001db8 <main+0x2a0>)
 8001cd6:	f7ff ff0a 	bl	8001aee <lcd_send_string>
	 	gcvt(thickness, 4, value);
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <main+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc42 	bl	8000568 <__aeabi_f2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	2004      	movs	r0, #4
 8001cf0:	ec45 4b10 	vmov	d0, r4, r5
 8001cf4:	f003 f90e 	bl	8004f14 <gcvt>
	 	lcd_put_cur(1,0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fe9b 	bl	8001a36 <lcd_put_cur>
	 	lcd_send_string(value);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fef2 	bl	8001aee <lcd_send_string>
	 	lcd_send_string(" m");
 8001d0a:	4828      	ldr	r0, [pc, #160]	; (8001dac <main+0x294>)
 8001d0c:	f7ff feef 	bl	8001aee <lcd_send_string>
	 	HAL_Delay(1000);
 8001d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d14:	f000 fd9a 	bl	800284c <HAL_Delay>
 8001d18:	e774      	b.n	8001c04 <main+0xec>
	 }
	 else if (step == 4){
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <main+0x288>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d154      	bne.n	8001dcc <main+0x2b4>
		 lcd_clear();
 8001d22:	f7ff fe71 	bl	8001a08 <lcd_clear>
		 lcd_put_cur(0,0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fe84 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string("Enter elec. ");
 8001d2e:	4823      	ldr	r0, [pc, #140]	; (8001dbc <main+0x2a4>)
 8001d30:	f7ff fedd 	bl	8001aee <lcd_send_string>
		 gcvt(electricity_rate, 4, value);
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <main+0x2a8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc15 	bl	8000568 <__aeabi_f2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	2004      	movs	r0, #4
 8001d4a:	ec45 4b10 	vmov	d0, r4, r5
 8001d4e:	f003 f8e1 	bl	8004f14 <gcvt>
		 lcd_put_cur(1,0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7ff fe6e 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string("rate ");
 8001d5a:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <main+0x2ac>)
 8001d5c:	f7ff fec7 	bl	8001aee <lcd_send_string>
		 lcd_send_string(value);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fec2 	bl	8001aee <lcd_send_string>
		 lcd_send_string(" $/kWh");
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <main+0x2b0>)
 8001d6c:	f7ff febf 	bl	8001aee <lcd_send_string>
		 HAL_Delay(1000);
 8001d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d74:	f000 fd6a 	bl	800284c <HAL_Delay>
 8001d78:	e744      	b.n	8001c04 <main+0xec>
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	5c28f5c3 	.word	0x5c28f5c3
 8001d84:	3fc5c28f 	.word	0x3fc5c28f
 8001d88:	70a3d70a 	.word	0x70a3d70a
 8001d8c:	3fc70a3d 	.word	0x3fc70a3d
 8001d90:	08007ac4 	.word	0x08007ac4
 8001d94:	20000004 	.word	0x20000004
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	200001b4 	.word	0x200001b4
 8001da4:	08007ad8 	.word	0x08007ad8
 8001da8:	20000010 	.word	0x20000010
 8001dac:	08007ae8 	.word	0x08007ae8
 8001db0:	08007aec 	.word	0x08007aec
 8001db4:	20000014 	.word	0x20000014
 8001db8:	08007afc 	.word	0x08007afc
 8001dbc:	08007b0c 	.word	0x08007b0c
 8001dc0:	2000001c 	.word	0x2000001c
 8001dc4:	08007b1c 	.word	0x08007b1c
 8001dc8:	08007b24 	.word	0x08007b24
	 }
	 else if (step >=5){
 8001dcc:	4b86      	ldr	r3, [pc, #536]	; (8001fe8 <main+0x4d0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	f77f af17 	ble.w	8001c04 <main+0xec>
		 lcd_clear();
 8001dd6:	f7ff fe17 	bl	8001a08 <lcd_clear>
		 lcd_put_cur(0,0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fe2a 	bl	8001a36 <lcd_put_cur>
		 get_Temperature();
 8001de2:	f7ff fd2f 	bl	8001844 <get_Temperature>
		 char temp1[7];
		 char temp2[7];
		 gcvt(Temp[0], 6, temp1);
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <main+0x4d4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbbc 	bl	8000568 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2006      	movs	r0, #6
 8001dfc:	ec45 4b10 	vmov	d0, r4, r5
 8001e00:	f003 f888 	bl	8004f14 <gcvt>
		 lcd_send_string("Temp 1: ");
 8001e04:	487a      	ldr	r0, [pc, #488]	; (8001ff0 <main+0x4d8>)
 8001e06:	f7ff fe72 	bl	8001aee <lcd_send_string>
		 lcd_send_string(temp1);
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fe6d 	bl	8001aee <lcd_send_string>

		 lcd_put_cur(1,0);
 8001e14:	2100      	movs	r1, #0
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fe0d 	bl	8001a36 <lcd_put_cur>
		 gcvt(Temp[1], 6, temp2);
 8001e1c:	4b73      	ldr	r3, [pc, #460]	; (8001fec <main+0x4d4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fba1 	bl	8000568 <__aeabi_f2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2006      	movs	r0, #6
 8001e30:	ec45 4b10 	vmov	d0, r4, r5
 8001e34:	f003 f86e 	bl	8004f14 <gcvt>
		 lcd_send_string("Temp 2: ");
 8001e38:	486e      	ldr	r0, [pc, #440]	; (8001ff4 <main+0x4dc>)
 8001e3a:	f7ff fe58 	bl	8001aee <lcd_send_string>
		 lcd_send_string(temp2);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe54 	bl	8001aee <lcd_send_string>
		 HAL_Delay(3000);
 8001e46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e4a:	f000 fcff 	bl	800284c <HAL_Delay>

		 time_1 = HAL_GetTick()/1000;
 8001e4e:	f000 fcf1 	bl	8002834 <HAL_GetTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a68      	ldr	r2, [pc, #416]	; (8001ff8 <main+0x4e0>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e64:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		 diff_time = time_1 - time_2;
 8001e68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		 //display the energy lost in W then the amount of money lost
		 get_Temperature();
 8001e78:	f7ff fce4 	bl	8001844 <get_Temperature>
		 lcd_clear();
 8001e7c:	f7ff fdc4 	bl	8001a08 <lcd_clear>
		 n_heat += u_value * area * fabs(0-23) * (diff_time) *0.00027778; //put temp[0] instead of 0
 8001e80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e82:	f7fe fb71 	bl	8000568 <__aeabi_f2d>
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <main+0x4e4>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	ee17 0a90 	vmov	r0, s15
 8001e9c:	f7fe fb64 	bl	8000568 <__aeabi_f2d>
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b56      	ldr	r3, [pc, #344]	; (8002000 <main+0x4e8>)
 8001ea6:	f7fe fbb7 	bl	8000618 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4690      	mov	r8, r2
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eb4:	f7fe fb58 	bl	8000568 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	f7fe fbaa 	bl	8000618 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a342      	add	r3, pc, #264	; (adr r3, 8001fd8 <main+0x4c0>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fba1 	bl	8000618 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4620      	mov	r0, r4
 8001edc:	4629      	mov	r1, r5
 8001ede:	f7fe f9e5 	bl	80002ac <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe57 	bl	8000b9c <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
		 gcvt(n_heat, 4, heat_loss);
 8001ef2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ef4:	f7fe fb38 	bl	8000568 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	2004      	movs	r0, #4
 8001f04:	ec45 4b10 	vmov	d0, r4, r5
 8001f08:	f003 f804 	bl	8004f14 <gcvt>
		 lcd_put_cur(0,0);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fd91 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string("Energy loss: ");
 8001f14:	483b      	ldr	r0, [pc, #236]	; (8002004 <main+0x4ec>)
 8001f16:	f7ff fdea 	bl	8001aee <lcd_send_string>
		 lcd_put_cur(1,0);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff fd8a 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string(heat_loss);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fde1 	bl	8001aee <lcd_send_string>
		 lcd_send_string(" Wh");
 8001f2c:	4836      	ldr	r0, [pc, #216]	; (8002008 <main+0x4f0>)
 8001f2e:	f7ff fdde 	bl	8001aee <lcd_send_string>
		 HAL_Delay(3000);
 8001f32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f36:	f000 fc89 	bl	800284c <HAL_Delay>

		 lcd_clear();
 8001f3a:	f7ff fd65 	bl	8001a08 <lcd_clear>
		 float_money += n_heat*electricity_rate * 0.001;
 8001f3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f40:	f7fe fb12 	bl	8000568 <__aeabi_f2d>
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <main+0x4f4>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	ee17 0a90 	vmov	r0, s15
 8001f5a:	f7fe fb05 	bl	8000568 <__aeabi_f2d>
 8001f5e:	a320      	add	r3, pc, #128	; (adr r3, 8001fe0 <main+0x4c8>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fb58 	bl	8000618 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe f99c 	bl	80002ac <__adddf3>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fe0e 	bl	8000b9c <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
		 gcvt(float_money, 4, money_loss);
 8001f84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f86:	f7fe faef 	bl	8000568 <__aeabi_f2d>
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	460d      	mov	r5, r1
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	2004      	movs	r0, #4
 8001f96:	ec45 4b10 	vmov	d0, r4, r5
 8001f9a:	f002 ffbb 	bl	8004f14 <gcvt>
		 lcd_put_cur(0,0);
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fd48 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string("Money lost: ");
 8001fa6:	481a      	ldr	r0, [pc, #104]	; (8002010 <main+0x4f8>)
 8001fa8:	f7ff fda1 	bl	8001aee <lcd_send_string>
		 lcd_put_cur(1,0);
 8001fac:	2100      	movs	r1, #0
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fd41 	bl	8001a36 <lcd_put_cur>
		 lcd_send_string(money_loss);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fd98 	bl	8001aee <lcd_send_string>
		 lcd_send_string(" $");
 8001fbe:	4815      	ldr	r0, [pc, #84]	; (8002014 <main+0x4fc>)
 8001fc0:	f7ff fd95 	bl	8001aee <lcd_send_string>
		 HAL_Delay(3000);
 8001fc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fc8:	f000 fc40 	bl	800284c <HAL_Delay>

		 time_2 = time_1;
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
	 lcd_put_cur(1,0);
 8001fd0:	e618      	b.n	8001c04 <main+0xec>
 8001fd2:	bf00      	nop
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	03f6af9f 	.word	0x03f6af9f
 8001fdc:	3f323460 	.word	0x3f323460
 8001fe0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fe4:	3f50624d 	.word	0x3f50624d
 8001fe8:	200001b4 	.word	0x200001b4
 8001fec:	200000bc 	.word	0x200000bc
 8001ff0:	08007b2c 	.word	0x08007b2c
 8001ff4:	08007b38 	.word	0x08007b38
 8001ff8:	10624dd3 	.word	0x10624dd3
 8001ffc:	20000018 	.word	0x20000018
 8002000:	40370000 	.word	0x40370000
 8002004:	08007b44 	.word	0x08007b44
 8002008:	08007b54 	.word	0x08007b54
 800200c:	2000001c 	.word	0x2000001c
 8002010:	08007b58 	.word	0x08007b58
 8002014:	08007b68 	.word	0x08007b68

08002018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b094      	sub	sp, #80	; 0x50
 800201c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	2230      	movs	r2, #48	; 0x30
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f002 ffc2 	bl	8004fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <SystemClock_Config+0xd0>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <SystemClock_Config+0xd0>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6413      	str	r3, [r2, #64]	; 0x40
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <SystemClock_Config+0xd0>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <SystemClock_Config+0xd4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <SystemClock_Config+0xd4>)
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <SystemClock_Config+0xd4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002080:	2310      	movs	r3, #16
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002084:	2302      	movs	r3, #2
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800208c:	2310      	movs	r3, #16
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002090:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002096:	2304      	movs	r3, #4
 8002098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800209a:	2307      	movs	r3, #7
 800209c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 fb82 	bl	80037ac <HAL_RCC_OscConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020ae:	f000 f92d 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b2:	230f      	movs	r3, #15
 80020b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fde4 	bl	8003c9c <HAL_RCC_ClockConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020da:	f000 f917 	bl	800230c <Error_Handler>
  }
}
 80020de:	bf00      	nop
 80020e0:	3750      	adds	r7, #80	; 0x50
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000

080020f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_I2C1_Init+0x50>)
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <MX_I2C1_Init+0x54>)
 80020f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_I2C1_Init+0x50>)
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_I2C1_Init+0x58>)
 80020fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_I2C1_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_I2C1_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_I2C1_Init+0x50>)
 800210e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <MX_I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_I2C1_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <MX_I2C1_Init+0x50>)
 800212e:	f000 fef1 	bl	8002f14 <HAL_I2C_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002138:	f000 f8e8 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000114 	.word	0x20000114
 8002144:	40005400 	.word	0x40005400
 8002148:	000186a0 	.word	0x000186a0

0800214c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART1_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART1_UART_Init+0x4c>)
 8002184:	f001 ffaa 	bl	80040dc <HAL_HalfDuplex_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 f8bd 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000168 	.word	0x20000168
 800219c:	40011000 	.word	0x40011000

080021a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a33      	ldr	r2, [pc, #204]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <MX_GPIO_Init+0x108>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <MX_GPIO_Init+0x108>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800222c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	481b      	ldr	r0, [pc, #108]	; (80022ac <MX_GPIO_Init+0x10c>)
 800223e:	f000 fccd 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 8002242:	f641 430e 	movw	r3, #7182	; 0x1c0e
 8002246:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002248:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800224c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4815      	ldr	r0, [pc, #84]	; (80022b0 <MX_GPIO_Init+0x110>)
 800225a:	f000 fcbf 	bl	8002bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2007      	movs	r0, #7
 8002264:	f000 fbf1 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002268:	2007      	movs	r0, #7
 800226a:	f000 fc0a 	bl	8002a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2008      	movs	r0, #8
 8002274:	f000 fbe9 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002278:	2008      	movs	r0, #8
 800227a:	f000 fc02 	bl	8002a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2009      	movs	r0, #9
 8002284:	f000 fbe1 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002288:	2009      	movs	r0, #9
 800228a:	f000 fbfa 	bl	8002a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2028      	movs	r0, #40	; 0x28
 8002294:	f000 fbd9 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002298:	2028      	movs	r0, #40	; 0x28
 800229a:	f000 fbf2 	bl	8002a82 <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
	//lcd_send_string("detected");
	currentMillis = HAL_GetTick();
 80022be:	f000 fab9 	bl	8002834 <HAL_GetTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022c6:	6013      	str	r3, [r2, #0]
	char value[5];
	if (GPIO_Pin == GPIO_PIN_1 && (currentMillis - previousMillis > 300))
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d114      	bne.n	80022f8 <HAL_GPIO_EXTI_Callback+0x44>
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_GPIO_EXTI_Callback+0x50>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022dc:	d90c      	bls.n	80022f8 <HAL_GPIO_EXTI_Callback+0x44>
	{
		//lcd_send_string("wow");
		previousMillis = currentMillis;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_GPIO_EXTI_Callback+0x50>)
 80022e4:	6013      	str	r3, [r2, #0]
		lcd_put_cur(0,0);
 80022e6:	2100      	movs	r1, #0
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff fba4 	bl	8001a36 <lcd_put_cur>
		step ++;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_GPIO_EXTI_Callback+0x54>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_GPIO_EXTI_Callback+0x54>)
 80022f6:	6013      	str	r3, [r2, #0]
	}
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200001b0 	.word	0x200001b0
 8002304:	200001ac 	.word	0x200001ac
 8002308:	200001b4 	.word	0x200001b4

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	e7fe      	b.n	8002314 <Error_Handler+0x8>
	...

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_MspInit+0x4c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_MspInit+0x4c>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_MspInit+0x4c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_MspInit+0x4c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_MspInit+0x4c>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_MspInit+0x4c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002356:	2007      	movs	r0, #7
 8002358:	f000 fb6c 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_I2C_MspInit+0x84>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12c      	bne.n	80023e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ac:	2312      	movs	r3, #18
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b8:	2304      	movs	r3, #4
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <HAL_I2C_MspInit+0x8c>)
 80023c4:	f000 fc0a 	bl	8002bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_I2C_MspInit+0x88>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40005400 	.word	0x40005400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020400 	.word	0x40020400

080023f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_UART_MspInit+0x94>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d134      	bne.n	8002484 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_UART_MspInit+0x98>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_UART_MspInit+0x98>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_UART_MspInit+0x98>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x98>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x98>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0x98>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002458:	2312      	movs	r3, #18
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002464:	2307      	movs	r3, #7
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4809      	ldr	r0, [pc, #36]	; (8002494 <HAL_UART_MspInit+0x9c>)
 8002470:	f000 fbb4 	bl	8002bdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	2025      	movs	r0, #37	; 0x25
 800247a:	f000 fae6 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800247e:	2025      	movs	r0, #37	; 0x25
 8002480:	f000 faff 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40011000 	.word	0x40011000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f992 	bl	800280c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024f0:	2002      	movs	r0, #2
 80024f2:	f000 fcf7 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024fe:	2004      	movs	r0, #4
 8002500:	f000 fcf0 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800250c:	2008      	movs	r0, #8
 800250e:	f000 fce9 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	owReadHandler();
 800251c:	f7fe fda0 	bl	8001060 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <USART1_IRQHandler+0x14>)
 8002522:	f001 fe31 	bl	8004188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000168 	.word	0x20000168

08002530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	lcd_send_string("what");
 8002534:	480a      	ldr	r0, [pc, #40]	; (8002560 <EXTI15_10_IRQHandler+0x30>)
 8002536:	f7ff fada 	bl	8001aee <lcd_send_string>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800253a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800253e:	f000 fcd1 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002542:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002546:	f000 fccd 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800254a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800254e:	f000 fcc9 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002552:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002556:	f000 fcc5 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	08007b6c 	.word	0x08007b6c

08002564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_kill>:

int _kill(int pid, int sig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800257e:	f002 fced 	bl	8004f5c <__errno>
 8002582:	4603      	mov	r3, r0
 8002584:	2216      	movs	r2, #22
 8002586:	601a      	str	r2, [r3, #0]
	return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_exit>:

void _exit (int status)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffe7 	bl	8002574 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a6:	e7fe      	b.n	80025a6 <_exit+0x12>

080025a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e00a      	b.n	80025d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ba:	f3af 8000 	nop.w
 80025be:	4601      	mov	r1, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbf0      	blt.n	80025ba <_read+0x12>
	}

return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e009      	b.n	8002608 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf1      	blt.n	80025f4 <_write+0x12>
	}
	return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_close>:

int _close(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002642:	605a      	str	r2, [r3, #4]
	return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_isatty>:

int _isatty(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	return 1;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_sbrk+0x5c>)
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_sbrk+0x60>)
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <_sbrk+0x64>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <_sbrk+0x68>)
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b4:	f002 fc52 	bl	8004f5c <__errno>
 80026b8:	4603      	mov	r3, r0
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e009      	b.n	80026d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <_sbrk+0x64>)
 80026d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20018000 	.word	0x20018000
 80026e4:	00000400 	.word	0x00000400
 80026e8:	200001b8 	.word	0x200001b8
 80026ec:	200001d0 	.word	0x200001d0

080026f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <SystemInit+0x20>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <SystemInit+0x20>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800274c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002718:	480d      	ldr	r0, [pc, #52]	; (8002750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800271a:	490e      	ldr	r1, [pc, #56]	; (8002754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002730:	4c0b      	ldr	r4, [pc, #44]	; (8002760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800273e:	f7ff ffd7 	bl	80026f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002742:	f002 fc11 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002746:	f7ff f9e7 	bl	8001b18 <main>
  bx  lr    
 800274a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800274c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002758:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 800275c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002760:	200001d0 	.word	0x200001d0

08002764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_Init+0x40>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_Init+0x40>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_Init+0x40>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002790:	2003      	movs	r0, #3
 8002792:	f000 f94f 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f808 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800279c:	f7ff fdbc 	bl	8002318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_InitTick+0x54>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_InitTick+0x58>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f967 	bl	8002a9e <HAL_SYSTICK_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00e      	b.n	80027f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d80a      	bhi.n	80027f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f000 f92f 	bl	8002a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_InitTick+0x5c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000020 	.word	0x20000020
 8002804:	20000028 	.word	0x20000028
 8002808:	20000024 	.word	0x20000024

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000028 	.word	0x20000028
 8002830:	200001bc 	.word	0x200001bc

08002834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_GetTick+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	200001bc 	.word	0x200001bc

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ffee 	bl	8002834 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_Delay+0x44>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffde 	bl	8002834 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000028 	.word	0x20000028

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff29 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5c:	f7ff ff3e 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f7ff ff8e 	bl	8002988 <NVIC_EncodePriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff5d 	bl	8002934 <__NVIC_SetPriority>
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff31 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffa2 	bl	80029f0 <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff feb6 	bl	8002834 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d008      	beq.n	8002ae8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e052      	b.n	8002b8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0216 	bic.w	r2, r2, #22
 8002af6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <HAL_DMA_Abort+0x62>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b38:	e013      	b.n	8002b62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3a:	f7ff fe7b 	bl	8002834 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d90c      	bls.n	8002b62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e015      	b.n	8002b8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e4      	bne.n	8002b3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	223f      	movs	r2, #63	; 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00c      	b.n	8002bce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e159      	b.n	8002eac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8148 	bne.w	8002ea6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d005      	beq.n	8002c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d130      	bne.n	8002c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0201 	and.w	r2, r3, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d017      	beq.n	8002ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d123      	bne.n	8002d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a2 	beq.w	8002ea6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
 8002d72:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7e:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	220f      	movs	r2, #15
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <HAL_GPIO_Init+0x2f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x202>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a48      	ldr	r2, [pc, #288]	; (8002ed0 <HAL_GPIO_Init+0x2f4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x1fe>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a47      	ldr	r2, [pc, #284]	; (8002ed4 <HAL_GPIO_Init+0x2f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x1fa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_GPIO_Init+0x2fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x1f6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a45      	ldr	r2, [pc, #276]	; (8002edc <HAL_GPIO_Init+0x300>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x1f2>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f aea2 	bls.w	8002bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff f9d6 	bl	80022b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e12b      	b.n	800317e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fa14 	bl	8002368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f78:	f001 f888 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <HAL_I2C_Init+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <HAL_I2C_Init+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_I2C_Init+0x278>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e006      	b.n	8002fa6 <HAL_I2C_Init+0x92>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	; (8003190 <HAL_I2C_Init+0x27c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0e7      	b.n	800317e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a78      	ldr	r2, [pc, #480]	; (8003194 <HAL_I2C_Init+0x280>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a6a      	ldr	r2, [pc, #424]	; (8003188 <HAL_I2C_Init+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_I2C_Init+0xd4>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e009      	b.n	8002ffc <HAL_I2C_Init+0xe8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_I2C_Init+0x284>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	495c      	ldr	r1, [pc, #368]	; (8003188 <HAL_I2C_Init+0x274>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d819      	bhi.n	8003050 <HAL_I2C_Init+0x13c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e59      	subs	r1, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fbb1 f3f3 	udiv	r3, r1, r3
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003030:	400b      	ands	r3, r1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_I2C_Init+0x138>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e59      	subs	r1, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fbb1 f3f3 	udiv	r3, r1, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304a:	e051      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 800304c:	2304      	movs	r3, #4
 800304e:	e04f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <HAL_I2C_Init+0x168>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e012      	b.n	80030a2 <HAL_I2C_Init+0x18e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Init+0x196>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e022      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10e      	bne.n	80030d0 <HAL_I2C_Init+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e58      	subs	r0, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	e00f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	6809      	ldr	r1, [r1, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6911      	ldr	r1, [r2, #16]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	000186a0 	.word	0x000186a0
 800318c:	001e847f 	.word	0x001e847f
 8003190:	003d08ff 	.word	0x003d08ff
 8003194:	431bde83 	.word	0x431bde83
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	461a      	mov	r2, r3
 80031a8:	460b      	mov	r3, r1
 80031aa:	817b      	strh	r3, [r7, #10]
 80031ac:	4613      	mov	r3, r2
 80031ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff fb40 	bl	8002834 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	f040 80e0 	bne.w	8003384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	4970      	ldr	r1, [pc, #448]	; (8003390 <HAL_I2C_Master_Transmit+0x1f4>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f964 	bl	800349c <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	e0d3      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x50>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0cc      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d007      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2210      	movs	r2, #16
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	893a      	ldrh	r2, [r7, #8]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a50      	ldr	r2, [pc, #320]	; (8003394 <HAL_I2C_Master_Transmit+0x1f8>)
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f89c 	bl	8003398 <I2C_MasterRequestWrite>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08d      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003280:	e066      	b.n	8003350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9de 	bl	8003648 <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_I2C_Master_Transmit+0x188>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9ce 	bl	80036ca <I2C_WaitOnBTFFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e01a      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d194      	bne.n	8003282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000

08003398 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	460b      	mov	r3, r1
 80033a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d006      	beq.n	80033c2 <I2C_MasterRequestWrite+0x2a>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d003      	beq.n	80033c2 <I2C_MasterRequestWrite+0x2a>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c0:	d108      	bne.n	80033d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e00b      	b.n	80033ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d107      	bne.n	80033ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f84f 	bl	800349c <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d103      	bne.n	800341c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e035      	b.n	800348c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003428:	d108      	bne.n	800343c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e01b      	b.n	8003474 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	11db      	asrs	r3, r3, #7
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 0306 	and.w	r3, r3, #6
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f063 030f 	orn	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <I2C_MasterRequestWrite+0xfc>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f875 	bl	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e010      	b.n	800348c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <I2C_MasterRequestWrite+0x100>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f865 	bl	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	00010008 	.word	0x00010008
 8003498:	00010002 	.word	0x00010002

0800349c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ac:	e025      	b.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d021      	beq.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7ff f9bd 	bl	8002834 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d116      	bne.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e023      	b.n	8003542 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	e00c      	b.n	800353a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d0b6      	beq.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003558:	e051      	b.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d123      	bne.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003582:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0204 	orr.w	r2, r3, #4
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e046      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d021      	beq.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7ff f93b 	bl	8002834 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d116      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e020      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10c      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e00b      	b.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d18d      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003654:	e02d      	b.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f878 	bl	800374c <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02d      	b.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d021      	beq.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7ff f8e1 	bl	8002834 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d1ca      	bne.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d6:	e02d      	b.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f837 	bl	800374c <I2C_IsAcknowledgeFailed>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e02d      	b.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d021      	beq.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f0:	f7ff f8a0 	bl	8002834 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d302      	bcc.n	8003706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e007      	b.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d1ca      	bne.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d11b      	bne.n	800379c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e267      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d112      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b82      	ldr	r3, [pc, #520]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e242      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x74>
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6f      	ldr	r2, [pc, #444]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b6d      	ldr	r3, [pc, #436]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6c      	ldr	r2, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003844:	4b69      	ldr	r3, [pc, #420]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a68      	ldr	r2, [pc, #416]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fe ffe6 	bl	8002834 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe ffe2 	bl	8002834 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e207      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b5b      	ldr	r3, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xc0>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe ffd2 	bl	8002834 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe ffce 	bl	8002834 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1f3      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	4b51      	ldr	r3, [pc, #324]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c2:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d11c      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b44      	ldr	r3, [pc, #272]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1c7      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4937      	ldr	r1, [pc, #220]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	e03a      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x244>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe ff87 	bl	8002834 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7fe ff83 	bl	8002834 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1a8      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4925      	ldr	r1, [pc, #148]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x244>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe ff66 	bl	8002834 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396c:	f7fe ff62 	bl	8002834 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e187      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCC_OscConfig+0x248>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe ff46 	bl	8002834 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fe ff42 	bl	8002834 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e167      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
 80039ca:	e01b      	b.n	8003a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_OscConfig+0x248>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7fe ff2f 	bl	8002834 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e00e      	b.n	80039f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fe ff2b 	bl	8002834 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d907      	bls.n	80039f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e150      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ea      	bne.n	80039da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8097 	beq.w	8003b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b7d      	ldr	r3, [pc, #500]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a7c      	ldr	r2, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b7a      	ldr	r3, [pc, #488]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b77      	ldr	r3, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	4b74      	ldr	r3, [pc, #464]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a73      	ldr	r2, [pc, #460]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe feeb 	bl	8002834 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fe fee7 	bl	8002834 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e10c      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x2ea>
 8003a88:	4b64      	ldr	r3, [pc, #400]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a63      	ldr	r2, [pc, #396]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x324>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x30c>
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a5e      	ldr	r2, [pc, #376]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	4b5c      	ldr	r3, [pc, #368]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a5b      	ldr	r2, [pc, #364]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x324>
 8003ab8:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a57      	ldr	r2, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d015      	beq.n	8003b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe feac 	bl	8002834 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fea8 	bl	8002834 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0cb      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ee      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x334>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b04:	f7fe fe96 	bl	8002834 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fe92 	bl	8002834 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0b5      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ee      	bne.n	8003b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a1 	beq.w	8003c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d05c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d141      	bne.n	8003be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe fe66 	bl	8002834 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fe62 	bl	8002834 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e087      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	491b      	ldr	r1, [pc, #108]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fe fe3b 	bl	8002834 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fe fe37 	bl	8002834 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e05c      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x416>
 8003be0:	e054      	b.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe fe24 	bl	8002834 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe fe20 	bl	8002834 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e045      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x444>
 8003c0e:	e03d      	b.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e038      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40007000 	.word	0x40007000
 8003c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d028      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d121      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11a      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d111      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fe fd52 	bl	8002834 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fe fd4e 	bl	8002834 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fcb2 	bl	80027ac <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08007b74 	.word	0x08007b74
 8003e60:	20000020 	.word	0x20000020
 8003e64:	20000024 	.word	0x20000024

08003e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b094      	sub	sp, #80	; 0x50
 8003e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	647b      	str	r3, [r7, #68]	; 0x44
 8003e74:	2300      	movs	r3, #0
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e78:	2300      	movs	r3, #0
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e80:	4b79      	ldr	r3, [pc, #484]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	f200 80e1 	bhi.w	8004054 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x34>
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9a:	e0db      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ea0:	e0db      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea2:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea6:	e0d8      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb2:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d063      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eda:	4622      	mov	r2, r4
 8003edc:	462b      	mov	r3, r5
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	0159      	lsls	r1, r3, #5
 8003ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eec:	0150      	lsls	r0, r2, #5
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	1a51      	subs	r1, r2, r1
 8003ef6:	6139      	str	r1, [r7, #16]
 8003ef8:	4629      	mov	r1, r5
 8003efa:	eb63 0301 	sbc.w	r3, r3, r1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	018b      	lsls	r3, r1, #6
 8003f10:	4651      	mov	r1, sl
 8003f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f16:	4651      	mov	r1, sl
 8003f18:	018a      	lsls	r2, r1, #6
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f20:	4659      	mov	r1, fp
 8003f22:	eb63 0901 	sbc.w	r9, r3, r1
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3a:	4690      	mov	r8, r2
 8003f3c:	4699      	mov	r9, r3
 8003f3e:	4623      	mov	r3, r4
 8003f40:	eb18 0303 	adds.w	r3, r8, r3
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	462b      	mov	r3, r5
 8003f48:	eb49 0303 	adc.w	r3, r9, r3
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	024b      	lsls	r3, r1, #9
 8003f5e:	4621      	mov	r1, r4
 8003f60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f64:	4621      	mov	r1, r4
 8003f66:	024a      	lsls	r2, r1, #9
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6e:	2200      	movs	r2, #0
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f78:	f7fc fe60 	bl	8000c3c <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f84:	e058      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f86:	4b38      	ldr	r3, [pc, #224]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	099b      	lsrs	r3, r3, #6
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	4611      	mov	r1, r2
 8003f92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	0159      	lsls	r1, r3, #5
 8003fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb2:	0150      	lsls	r0, r2, #5
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4641      	mov	r1, r8
 8003fba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fdc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	00eb      	lsls	r3, r5, #3
 8003fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fee:	00e2      	lsls	r2, r4, #3
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	18e3      	adds	r3, r4, r3
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb45 0303 	adc.w	r3, r5, r3
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400e:	4629      	mov	r1, r5
 8004010:	028b      	lsls	r3, r1, #10
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004018:	4621      	mov	r1, r4
 800401a:	028a      	lsls	r2, r1, #10
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	2200      	movs	r2, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	61fa      	str	r2, [r7, #28]
 8004028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800402c:	f7fc fe06 	bl	8000c3c <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_GetSysClockFreq+0x200>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	3301      	adds	r3, #1
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800404a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004052:	e002      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetSysClockFreq+0x204>)
 8004056:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800405c:	4618      	mov	r0, r3
 800405e:	3750      	adds	r7, #80	; 0x50
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200

08004074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_RCC_GetHCLKFreq+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000020 	.word	0x20000020

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004090:	f7ff fff0 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0a9b      	lsrs	r3, r3, #10
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	08007b84 	.word	0x08007b84

080040b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040b8:	f7ff ffdc 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0b5b      	lsrs	r3, r3, #13
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4903      	ldr	r1, [pc, #12]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	08007b84 	.word	0x08007b84

080040dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e047      	b.n	800417e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe f978 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fc83 	bl	8004a2c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004144:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0208 	orr.w	r2, r2, #8
 8004154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ba      	sub	sp, #232	; 0xe8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fb65 	bl	80048b6 <UART_Receive_IT>
      return;
 80041ec:	e256      	b.n	800469c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80de 	beq.w	80043b4 <HAL_UART_IRQHandler+0x22c>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80d1 	beq.w	80043b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
 800421e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d105      	bne.n	80042a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 81ed 	beq.w	8004692 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 faf0 	bl	80048b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_UART_IRQHandler+0x17a>
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04f      	beq.n	80043a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9f8 	bl	80046f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d141      	bne.n	800439a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800432c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800434e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1d9      	bne.n	8004316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	4a7d      	ldr	r2, [pc, #500]	; (8004564 <HAL_UART_IRQHandler+0x3dc>)
 8004370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fc0d 	bl	8002b96 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e00e      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f99a 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00a      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f996 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e006      	b.n	80043b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f992 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043ae:	e170      	b.n	8004692 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	bf00      	nop
    return;
 80043b2:	e16e      	b.n	8004692 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f040 814a 	bne.w	8004652 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8143 	beq.w	8004652 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 813c 	beq.w	8004652 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	f040 80b4 	bne.w	8004568 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800440c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8140 	beq.w	8004696 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800441e:	429a      	cmp	r2, r3
 8004420:	f080 8139 	bcs.w	8004696 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	f000 8088 	beq.w	800454a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800447e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d9      	bne.n	800443a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e1      	bne.n	8004486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800452c:	65ba      	str	r2, [r7, #88]	; 0x58
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e3      	bne.n	8004508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fab6 	bl	8002ab6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004552:	b29b      	uxth	r3, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	b29b      	uxth	r3, r3
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8c0 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004560:	e099      	b.n	8004696 <HAL_UART_IRQHandler+0x50e>
 8004562:	bf00      	nop
 8004564:	080047bf 	.word	0x080047bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004570:	b29b      	uxth	r3, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 808b 	beq.w	800469a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8086 	beq.w	800469a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045b2:	647a      	str	r2, [r7, #68]	; 0x44
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e3      	bne.n	800458e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	623b      	str	r3, [r7, #32]
   return(result);
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045ea:	633a      	str	r2, [r7, #48]	; 0x30
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	60fb      	str	r3, [r7, #12]
   return(result);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004630:	61fa      	str	r2, [r7, #28]
 8004632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	69b9      	ldr	r1, [r7, #24]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	617b      	str	r3, [r7, #20]
   return(result);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e3      	bne.n	800460c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f848 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004650:	e023      	b.n	800469a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_UART_IRQHandler+0x4ea>
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8bb 	bl	80047e6 <UART_Transmit_IT>
    return;
 8004670:	e014      	b.n	800469c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00e      	beq.n	800469c <HAL_UART_IRQHandler+0x514>
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8fb 	bl	8004886 <UART_EndTransmit_IT>
    return;
 8004690:	e004      	b.n	800469c <HAL_UART_IRQHandler+0x514>
    return;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <HAL_UART_IRQHandler+0x514>
      return;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <HAL_UART_IRQHandler+0x514>
      return;
 800469a:	bf00      	nop
  }
}
 800469c:	37e8      	adds	r7, #232	; 0xe8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop

080046a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b095      	sub	sp, #84	; 0x54
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	330c      	adds	r3, #12
 800471e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004720:	643a      	str	r2, [r7, #64]	; 0x40
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e5      	bne.n	8004700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	61fb      	str	r3, [r7, #28]
   return(result);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3314      	adds	r3, #20
 8004752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	2b01      	cmp	r3, #1
 800476e:	d119      	bne.n	80047a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004790:	61ba      	str	r2, [r7, #24]
 8004792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	613b      	str	r3, [r7, #16]
   return(result);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047b2:	bf00      	nop
 80047b4:	3754      	adds	r7, #84	; 0x54
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff ff77 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b21      	cmp	r3, #33	; 0x21
 80047f8:	d13e      	bne.n	8004878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	d114      	bne.n	800482e <UART_Transmit_IT+0x48>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d110      	bne.n	800482e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	1c9a      	adds	r2, r3, #2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	621a      	str	r2, [r3, #32]
 800482c:	e008      	b.n	8004840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	1c59      	adds	r1, r3, #1
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6211      	str	r1, [r2, #32]
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29b      	uxth	r3, r3
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fefc 	bl	80046a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08c      	sub	sp, #48	; 0x30
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b22      	cmp	r3, #34	; 0x22
 80048c8:	f040 80ab 	bne.w	8004a22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d4:	d117      	bne.n	8004906 <UART_Receive_IT+0x50>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d113      	bne.n	8004906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28
 8004904:	e026      	b.n	8004954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d007      	beq.n	800492a <UART_Receive_IT+0x74>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <UART_Receive_IT+0x82>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e008      	b.n	800494a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004944:	b2da      	uxtb	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4619      	mov	r1, r3
 8004962:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004964:	2b00      	cmp	r3, #0
 8004966:	d15a      	bne.n	8004a1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0220 	bic.w	r2, r2, #32
 8004976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d135      	bne.n	8004a14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	613b      	str	r3, [r7, #16]
   return(result);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f023 0310 	bic.w	r3, r3, #16
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	623a      	str	r2, [r7, #32]
 80049d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	69f9      	ldr	r1, [r7, #28]
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	61bb      	str	r3, [r7, #24]
   return(result);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e5      	bne.n	80049ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d10a      	bne.n	8004a06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff fe67 	bl	80046e0 <HAL_UARTEx_RxEventCallback>
 8004a12:	e002      	b.n	8004a1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fe4f 	bl	80046b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e002      	b.n	8004a24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3730      	adds	r7, #48	; 0x30
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b0c0      	sub	sp, #256	; 0x100
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	68d9      	ldr	r1, [r3, #12]
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	ea40 0301 	orr.w	r3, r0, r1
 8004a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a84:	f021 010c 	bic.w	r1, r1, #12
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a92:	430b      	orrs	r3, r1
 8004a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	6999      	ldr	r1, [r3, #24]
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	ea40 0301 	orr.w	r3, r0, r1
 8004ab2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b8f      	ldr	r3, [pc, #572]	; (8004cf8 <UART_SetConfig+0x2cc>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d005      	beq.n	8004acc <UART_SetConfig+0xa0>
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <UART_SetConfig+0x2d0>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d104      	bne.n	8004ad6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7ff faf2 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8004ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ad4:	e003      	b.n	8004ade <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f7ff fad9 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8004ada:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae8:	f040 810c 	bne.w	8004d04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004af6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004afa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004afe:	4622      	mov	r2, r4
 8004b00:	462b      	mov	r3, r5
 8004b02:	1891      	adds	r1, r2, r2
 8004b04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b06:	415b      	adcs	r3, r3
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b0e:	4621      	mov	r1, r4
 8004b10:	eb12 0801 	adds.w	r8, r2, r1
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb43 0901 	adc.w	r9, r3, r1
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2e:	4690      	mov	r8, r2
 8004b30:	4699      	mov	r9, r3
 8004b32:	4623      	mov	r3, r4
 8004b34:	eb18 0303 	adds.w	r3, r8, r3
 8004b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	eb49 0303 	adc.w	r3, r9, r3
 8004b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	18db      	adds	r3, r3, r3
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	4613      	mov	r3, r2
 8004b62:	eb42 0303 	adc.w	r3, r2, r3
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
 8004b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b70:	f7fc f864 	bl	8000c3c <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	011c      	lsls	r4, r3, #4
 8004b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	eb12 0a01 	adds.w	sl, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0b01 	adc.w	fp, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc4:	4692      	mov	sl, r2
 8004bc6:	469b      	mov	fp, r3
 8004bc8:	4643      	mov	r3, r8
 8004bca:	eb1a 0303 	adds.w	r3, sl, r3
 8004bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	18db      	adds	r3, r3, r3
 8004bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c06:	f7fc f819 	bl	8000c3c <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004c12:	fba3 2301 	umull	r2, r3, r3, r1
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2264      	movs	r2, #100	; 0x64
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	1acb      	subs	r3, r1, r3
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004c28:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c34:	441c      	add	r4, r3
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c50:	415b      	adcs	r3, r3
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c58:	4641      	mov	r1, r8
 8004c5a:	1851      	adds	r1, r2, r1
 8004c5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c5e:	4649      	mov	r1, r9
 8004c60:	414b      	adcs	r3, r1
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c70:	4659      	mov	r1, fp
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	00ca      	lsls	r2, r1, #3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	4642      	mov	r2, r8
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ca4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cac:	460b      	mov	r3, r1
 8004cae:	18db      	adds	r3, r3, r3
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cc2:	f7fb ffbb 	bl	8000c3c <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <UART_SetConfig+0x2d4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 0207 	and.w	r2, r3, #7
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4422      	add	r2, r4
 8004cf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cf4:	e105      	b.n	8004f02 <UART_SetConfig+0x4d6>
 8004cf6:	bf00      	nop
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	40011400 	.word	0x40011400
 8004d00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d16:	4642      	mov	r2, r8
 8004d18:	464b      	mov	r3, r9
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	6239      	str	r1, [r7, #32]
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d26:	4641      	mov	r1, r8
 8004d28:	1854      	adds	r4, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0501 	adc.w	r5, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	00eb      	lsls	r3, r5, #3
 8004d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3e:	00e2      	lsls	r2, r4, #3
 8004d40:	4614      	mov	r4, r2
 8004d42:	461d      	mov	r5, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	18e3      	adds	r3, r4, r3
 8004d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	eb45 0303 	adc.w	r3, r5, r3
 8004d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d72:	4629      	mov	r1, r5
 8004d74:	008b      	lsls	r3, r1, #2
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	008a      	lsls	r2, r1, #2
 8004d80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d84:	f7fb ff5a 	bl	8000c3c <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	011c      	lsls	r4, r3, #4
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004da0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004da4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	61b9      	str	r1, [r7, #24]
 8004db0:	415b      	adcs	r3, r3
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db8:	4641      	mov	r1, r8
 8004dba:	1851      	adds	r1, r2, r1
 8004dbc:	6139      	str	r1, [r7, #16]
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	414b      	adcs	r3, r1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	00cb      	lsls	r3, r1, #3
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dda:	4651      	mov	r1, sl
 8004ddc:	00ca      	lsls	r2, r1, #3
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	4642      	mov	r2, r8
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e10:	4649      	mov	r1, r9
 8004e12:	008b      	lsls	r3, r1, #2
 8004e14:	4641      	mov	r1, r8
 8004e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	008a      	lsls	r2, r1, #2
 8004e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e22:	f7fb ff0b 	bl	8000c3c <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4a:	441c      	add	r4, r3
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e50:	2200      	movs	r2, #0
 8004e52:	673b      	str	r3, [r7, #112]	; 0x70
 8004e54:	677a      	str	r2, [r7, #116]	; 0x74
 8004e56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1851      	adds	r1, r2, r1
 8004e6e:	6039      	str	r1, [r7, #0]
 8004e70:	4649      	mov	r1, r9
 8004e72:	414b      	adcs	r3, r1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e82:	4659      	mov	r1, fp
 8004e84:	00cb      	lsls	r3, r1, #3
 8004e86:	4651      	mov	r1, sl
 8004e88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	00ca      	lsls	r2, r1, #3
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	4642      	mov	r2, r8
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	008b      	lsls	r3, r1, #2
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec8:	4641      	mov	r1, r8
 8004eca:	008a      	lsls	r2, r1, #2
 8004ecc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ed0:	f7fb feb4 	bl	8000c3c <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004eda:	fba3 1302 	umull	r1, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2164      	movs	r1, #100	; 0x64
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <UART_SetConfig+0x4e4>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4422      	add	r2, r4
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	bf00      	nop
 8004f04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0e:	bf00      	nop
 8004f10:	51eb851f 	.word	0x51eb851f

08004f14 <gcvt>:
 8004f14:	b530      	push	{r4, r5, lr}
 8004f16:	2200      	movs	r2, #0
 8004f18:	b085      	sub	sp, #20
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	ec51 0b10 	vmov	r0, r1, d0
 8004f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f28:	f7fb fde8 	bl	8000afc <__aeabi_dcmplt>
 8004f2c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004f30:	4622      	mov	r2, r4
 8004f32:	b118      	cbz	r0, 8004f3c <gcvt+0x28>
 8004f34:	232d      	movs	r3, #45	; 0x2d
 8004f36:	f802 3b01 	strb.w	r3, [r2], #1
 8004f3a:	3d01      	subs	r5, #1
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4806      	ldr	r0, [pc, #24]	; (8004f58 <gcvt+0x44>)
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4629      	mov	r1, r5
 8004f44:	2367      	movs	r3, #103	; 0x67
 8004f46:	6800      	ldr	r0, [r0, #0]
 8004f48:	f000 f8d2 	bl	80050f0 <_gcvt>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	bf14      	ite	ne
 8004f50:	4620      	movne	r0, r4
 8004f52:	2000      	moveq	r0, #0
 8004f54:	b005      	add	sp, #20
 8004f56:	bd30      	pop	{r4, r5, pc}
 8004f58:	2000002c 	.word	0x2000002c

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	2000002c 	.word	0x2000002c

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4d0d      	ldr	r5, [pc, #52]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2600      	movs	r6, #0
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4d0b      	ldr	r5, [pc, #44]	; (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	; (8004fac <__libc_init_array+0x44>)
 8004f7c:	f002 fd66 	bl	8007a4c <_init>
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2600      	movs	r6, #0
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08007e58 	.word	0x08007e58
 8004fa4:	08007e58 	.word	0x08007e58
 8004fa8:	08007e58 	.word	0x08007e58
 8004fac:	08007e5c 	.word	0x08007e5c

08004fb0 <memset>:
 8004fb0:	4402      	add	r2, r0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d100      	bne.n	8004fba <memset+0xa>
 8004fb8:	4770      	bx	lr
 8004fba:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbe:	e7f9      	b.n	8004fb4 <memset+0x4>

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	b500      	push	{lr}
 8004fc4:	b09c      	sub	sp, #112	; 0x70
 8004fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <siprintf+0x38>)
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	9104      	str	r1, [sp, #16]
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	a902      	add	r1, sp, #8
 8004fe4:	f000 fe1a 	bl	8005c1c <_svfiprintf_r>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	; 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	2000002c 	.word	0x2000002c
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <print_e>:
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	b087      	sub	sp, #28
 8005004:	ec43 2b10 	vmov	d0, r2, r3
 8005008:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800500a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800500e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005010:	ab04      	add	r3, sp, #16
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	ab03      	add	r3, sp, #12
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	1c62      	adds	r2, r4, #1
 800501a:	ab05      	add	r3, sp, #20
 800501c:	460f      	mov	r7, r1
 800501e:	2102      	movs	r1, #2
 8005020:	f001 f952 	bl	80062c8 <_dtoa_r>
 8005024:	9a05      	ldr	r2, [sp, #20]
 8005026:	f242 730f 	movw	r3, #9999	; 0x270f
 800502a:	429a      	cmp	r2, r3
 800502c:	d105      	bne.n	800503a <print_e+0x3a>
 800502e:	4601      	mov	r1, r0
 8005030:	4638      	mov	r0, r7
 8005032:	f001 f897 	bl	8006164 <strcpy>
 8005036:	b007      	add	sp, #28
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	463b      	mov	r3, r7
 800503c:	7801      	ldrb	r1, [r0, #0]
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	2c00      	cmp	r4, #0
 8005044:	bfc8      	it	gt
 8005046:	2501      	movgt	r5, #1
 8005048:	212e      	movs	r1, #46	; 0x2e
 800504a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800504e:	b10f      	cbz	r7, 8005054 <print_e+0x54>
 8005050:	2c00      	cmp	r4, #0
 8005052:	dc37      	bgt.n	80050c4 <print_e+0xc4>
 8005054:	2e67      	cmp	r6, #103	; 0x67
 8005056:	d046      	beq.n	80050e6 <print_e+0xe6>
 8005058:	2e47      	cmp	r6, #71	; 0x47
 800505a:	d046      	beq.n	80050ea <print_e+0xea>
 800505c:	212e      	movs	r1, #46	; 0x2e
 800505e:	2030      	movs	r0, #48	; 0x30
 8005060:	2c00      	cmp	r4, #0
 8005062:	dc38      	bgt.n	80050d6 <print_e+0xd6>
 8005064:	1e51      	subs	r1, r2, #1
 8005066:	2900      	cmp	r1, #0
 8005068:	bfb8      	it	lt
 800506a:	f1c2 0201 	rsblt	r2, r2, #1
 800506e:	4618      	mov	r0, r3
 8005070:	9105      	str	r1, [sp, #20]
 8005072:	bfac      	ite	ge
 8005074:	222b      	movge	r2, #43	; 0x2b
 8005076:	9205      	strlt	r2, [sp, #20]
 8005078:	f800 6b02 	strb.w	r6, [r0], #2
 800507c:	bfa8      	it	ge
 800507e:	705a      	strbge	r2, [r3, #1]
 8005080:	9a05      	ldr	r2, [sp, #20]
 8005082:	bfbc      	itt	lt
 8005084:	212d      	movlt	r1, #45	; 0x2d
 8005086:	7059      	strblt	r1, [r3, #1]
 8005088:	2a63      	cmp	r2, #99	; 0x63
 800508a:	dd0b      	ble.n	80050a4 <print_e+0xa4>
 800508c:	2164      	movs	r1, #100	; 0x64
 800508e:	fb92 f1f1 	sdiv	r1, r2, r1
 8005092:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005096:	1cd8      	adds	r0, r3, #3
 8005098:	709c      	strb	r4, [r3, #2]
 800509a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800509e:	fb03 2201 	mla	r2, r3, r1, r2
 80050a2:	9205      	str	r2, [sp, #20]
 80050a4:	9b05      	ldr	r3, [sp, #20]
 80050a6:	220a      	movs	r2, #10
 80050a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80050ac:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80050b0:	7001      	strb	r1, [r0, #0]
 80050b2:	f06f 0109 	mvn.w	r1, #9
 80050b6:	fb01 3302 	mla	r3, r1, r2, r3
 80050ba:	3330      	adds	r3, #48	; 0x30
 80050bc:	7043      	strb	r3, [r0, #1]
 80050be:	2300      	movs	r3, #0
 80050c0:	7083      	strb	r3, [r0, #2]
 80050c2:	e7b8      	b.n	8005036 <print_e+0x36>
 80050c4:	b10d      	cbz	r5, 80050ca <print_e+0xca>
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	7805      	ldrb	r5, [r0, #0]
 80050cc:	f803 5b01 	strb.w	r5, [r3], #1
 80050d0:	3c01      	subs	r4, #1
 80050d2:	2500      	movs	r5, #0
 80050d4:	e7b9      	b.n	800504a <print_e+0x4a>
 80050d6:	b10d      	cbz	r5, 80050dc <print_e+0xdc>
 80050d8:	f803 1b01 	strb.w	r1, [r3], #1
 80050dc:	f803 0b01 	strb.w	r0, [r3], #1
 80050e0:	3c01      	subs	r4, #1
 80050e2:	2500      	movs	r5, #0
 80050e4:	e7bc      	b.n	8005060 <print_e+0x60>
 80050e6:	2665      	movs	r6, #101	; 0x65
 80050e8:	e7bc      	b.n	8005064 <print_e+0x64>
 80050ea:	2645      	movs	r6, #69	; 0x45
 80050ec:	e7ba      	b.n	8005064 <print_e+0x64>
	...

080050f0 <_gcvt>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	ec55 4b10 	vmov	r4, r5, d0
 80050f8:	b088      	sub	sp, #32
 80050fa:	4681      	mov	r9, r0
 80050fc:	4688      	mov	r8, r1
 80050fe:	4616      	mov	r6, r2
 8005100:	469a      	mov	sl, r3
 8005102:	ee10 0a10 	vmov	r0, s0
 8005106:	2200      	movs	r2, #0
 8005108:	2300      	movs	r3, #0
 800510a:	4629      	mov	r1, r5
 800510c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800510e:	f7fb fcf5 	bl	8000afc <__aeabi_dcmplt>
 8005112:	b110      	cbz	r0, 800511a <_gcvt+0x2a>
 8005114:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005118:	461d      	mov	r5, r3
 800511a:	2200      	movs	r2, #0
 800511c:	2300      	movs	r3, #0
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005126:	b138      	cbz	r0, 8005138 <_gcvt+0x48>
 8005128:	2330      	movs	r3, #48	; 0x30
 800512a:	7033      	strb	r3, [r6, #0]
 800512c:	2300      	movs	r3, #0
 800512e:	7073      	strb	r3, [r6, #1]
 8005130:	4630      	mov	r0, r6
 8005132:	b008      	add	sp, #32
 8005134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005138:	a34b      	add	r3, pc, #300	; (adr r3, 8005268 <_gcvt+0x178>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb fce5 	bl	8000b10 <__aeabi_dcmple>
 8005146:	b158      	cbz	r0, 8005160 <_gcvt+0x70>
 8005148:	f108 31ff 	add.w	r1, r8, #4294967295
 800514c:	9100      	str	r1, [sp, #0]
 800514e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	4631      	mov	r1, r6
 8005158:	4648      	mov	r0, r9
 800515a:	f7ff ff51 	bl	8005000 <print_e>
 800515e:	e7e7      	b.n	8005130 <_gcvt+0x40>
 8005160:	4640      	mov	r0, r8
 8005162:	f000 fc09 	bl	8005978 <_mprec_log10>
 8005166:	4622      	mov	r2, r4
 8005168:	ec51 0b10 	vmov	r0, r1, d0
 800516c:	462b      	mov	r3, r5
 800516e:	f7fb fccf 	bl	8000b10 <__aeabi_dcmple>
 8005172:	2800      	cmp	r0, #0
 8005174:	d1e8      	bne.n	8005148 <_gcvt+0x58>
 8005176:	ab07      	add	r3, sp, #28
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	ab06      	add	r3, sp, #24
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	4642      	mov	r2, r8
 8005180:	ab05      	add	r3, sp, #20
 8005182:	ec45 4b10 	vmov	d0, r4, r5
 8005186:	2102      	movs	r1, #2
 8005188:	4648      	mov	r0, r9
 800518a:	f001 f89d 	bl	80062c8 <_dtoa_r>
 800518e:	9a05      	ldr	r2, [sp, #20]
 8005190:	f242 730f 	movw	r3, #9999	; 0x270f
 8005194:	429a      	cmp	r2, r3
 8005196:	d00e      	beq.n	80051b6 <_gcvt+0xc6>
 8005198:	4633      	mov	r3, r6
 800519a:	44b0      	add	r8, r6
 800519c:	4605      	mov	r5, r0
 800519e:	f810 1b01 	ldrb.w	r1, [r0], #1
 80051a2:	9c05      	ldr	r4, [sp, #20]
 80051a4:	eba8 0203 	sub.w	r2, r8, r3
 80051a8:	b109      	cbz	r1, 80051ae <_gcvt+0xbe>
 80051aa:	2c00      	cmp	r4, #0
 80051ac:	dc08      	bgt.n	80051c0 <_gcvt+0xd0>
 80051ae:	2100      	movs	r1, #0
 80051b0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80051b4:	e00d      	b.n	80051d2 <_gcvt+0xe2>
 80051b6:	4601      	mov	r1, r0
 80051b8:	4630      	mov	r0, r6
 80051ba:	f000 ffd3 	bl	8006164 <strcpy>
 80051be:	e7b7      	b.n	8005130 <_gcvt+0x40>
 80051c0:	3c01      	subs	r4, #1
 80051c2:	f803 1b01 	strb.w	r1, [r3], #1
 80051c6:	9405      	str	r4, [sp, #20]
 80051c8:	e7e8      	b.n	800519c <_gcvt+0xac>
 80051ca:	f803 cb01 	strb.w	ip, [r3], #1
 80051ce:	3a01      	subs	r2, #1
 80051d0:	2101      	movs	r1, #1
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	4620      	mov	r0, r4
 80051d6:	dc2a      	bgt.n	800522e <_gcvt+0x13e>
 80051d8:	b101      	cbz	r1, 80051dc <_gcvt+0xec>
 80051da:	9405      	str	r4, [sp, #20]
 80051dc:	b90f      	cbnz	r7, 80051e2 <_gcvt+0xf2>
 80051de:	7829      	ldrb	r1, [r5, #0]
 80051e0:	b311      	cbz	r1, 8005228 <_gcvt+0x138>
 80051e2:	42b3      	cmp	r3, r6
 80051e4:	bf04      	itt	eq
 80051e6:	2130      	moveq	r1, #48	; 0x30
 80051e8:	f803 1b01 	strbeq.w	r1, [r3], #1
 80051ec:	212e      	movs	r1, #46	; 0x2e
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	9905      	ldr	r1, [sp, #20]
 80051f2:	4618      	mov	r0, r3
 80051f4:	2400      	movs	r4, #0
 80051f6:	eba1 0c03 	sub.w	ip, r1, r3
 80051fa:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80051fe:	eb1c 0f00 	cmn.w	ip, r0
 8005202:	d41c      	bmi.n	800523e <_gcvt+0x14e>
 8005204:	2900      	cmp	r1, #0
 8005206:	f1c1 0000 	rsb	r0, r1, #0
 800520a:	bfc8      	it	gt
 800520c:	2000      	movgt	r0, #0
 800520e:	f100 0c01 	add.w	ip, r0, #1
 8005212:	4463      	add	r3, ip
 8005214:	4401      	add	r1, r0
 8005216:	b104      	cbz	r4, 800521a <_gcvt+0x12a>
 8005218:	9105      	str	r1, [sp, #20]
 800521a:	1e69      	subs	r1, r5, #1
 800521c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005220:	b108      	cbz	r0, 8005226 <_gcvt+0x136>
 8005222:	2a00      	cmp	r2, #0
 8005224:	dc0f      	bgt.n	8005246 <_gcvt+0x156>
 8005226:	b9df      	cbnz	r7, 8005260 <_gcvt+0x170>
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e780      	b.n	8005130 <_gcvt+0x40>
 800522e:	2a00      	cmp	r2, #0
 8005230:	f104 34ff 	add.w	r4, r4, #4294967295
 8005234:	dcc9      	bgt.n	80051ca <_gcvt+0xda>
 8005236:	2900      	cmp	r1, #0
 8005238:	d0d0      	beq.n	80051dc <_gcvt+0xec>
 800523a:	9005      	str	r0, [sp, #20]
 800523c:	e7ce      	b.n	80051dc <_gcvt+0xec>
 800523e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005242:	2401      	movs	r4, #1
 8005244:	e7db      	b.n	80051fe <_gcvt+0x10e>
 8005246:	f803 0b01 	strb.w	r0, [r3], #1
 800524a:	3a01      	subs	r2, #1
 800524c:	e7e6      	b.n	800521c <_gcvt+0x12c>
 800524e:	f801 5b01 	strb.w	r5, [r1], #1
 8005252:	1a60      	subs	r0, r4, r1
 8005254:	2800      	cmp	r0, #0
 8005256:	dcfa      	bgt.n	800524e <_gcvt+0x15e>
 8005258:	2a00      	cmp	r2, #0
 800525a:	bfa8      	it	ge
 800525c:	189b      	addge	r3, r3, r2
 800525e:	e7e3      	b.n	8005228 <_gcvt+0x138>
 8005260:	4619      	mov	r1, r3
 8005262:	189c      	adds	r4, r3, r2
 8005264:	2530      	movs	r5, #48	; 0x30
 8005266:	e7f4      	b.n	8005252 <_gcvt+0x162>
 8005268:	eb1c432d 	.word	0xeb1c432d
 800526c:	3f1a36e2 	.word	0x3f1a36e2

08005270 <_Balloc>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005274:	4604      	mov	r4, r0
 8005276:	460d      	mov	r5, r1
 8005278:	b976      	cbnz	r6, 8005298 <_Balloc+0x28>
 800527a:	2010      	movs	r0, #16
 800527c:	f001 fe24 	bl	8006ec8 <malloc>
 8005280:	4602      	mov	r2, r0
 8005282:	6260      	str	r0, [r4, #36]	; 0x24
 8005284:	b920      	cbnz	r0, 8005290 <_Balloc+0x20>
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <_Balloc+0x78>)
 8005288:	4818      	ldr	r0, [pc, #96]	; (80052ec <_Balloc+0x7c>)
 800528a:	2166      	movs	r1, #102	; 0x66
 800528c:	f000 ff72 	bl	8006174 <__assert_func>
 8005290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005294:	6006      	str	r6, [r0, #0]
 8005296:	60c6      	str	r6, [r0, #12]
 8005298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800529a:	68f3      	ldr	r3, [r6, #12]
 800529c:	b183      	cbz	r3, 80052c0 <_Balloc+0x50>
 800529e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052a6:	b9b8      	cbnz	r0, 80052d8 <_Balloc+0x68>
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f605 	lsl.w	r6, r1, r5
 80052ae:	1d72      	adds	r2, r6, #5
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 fb7e 	bl	80059b4 <_calloc_r>
 80052b8:	b160      	cbz	r0, 80052d4 <_Balloc+0x64>
 80052ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052be:	e00e      	b.n	80052de <_Balloc+0x6e>
 80052c0:	2221      	movs	r2, #33	; 0x21
 80052c2:	2104      	movs	r1, #4
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fb75 	bl	80059b4 <_calloc_r>
 80052ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052cc:	60f0      	str	r0, [r6, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e4      	bne.n	800529e <_Balloc+0x2e>
 80052d4:	2000      	movs	r0, #0
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052de:	2300      	movs	r3, #0
 80052e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052e4:	e7f7      	b.n	80052d6 <_Balloc+0x66>
 80052e6:	bf00      	nop
 80052e8:	08007b90 	.word	0x08007b90
 80052ec:	08007ba7 	.word	0x08007ba7

080052f0 <_Bfree>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	b976      	cbnz	r6, 8005318 <_Bfree+0x28>
 80052fa:	2010      	movs	r0, #16
 80052fc:	f001 fde4 	bl	8006ec8 <malloc>
 8005300:	4602      	mov	r2, r0
 8005302:	6268      	str	r0, [r5, #36]	; 0x24
 8005304:	b920      	cbnz	r0, 8005310 <_Bfree+0x20>
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <_Bfree+0x3c>)
 8005308:	4809      	ldr	r0, [pc, #36]	; (8005330 <_Bfree+0x40>)
 800530a:	218a      	movs	r1, #138	; 0x8a
 800530c:	f000 ff32 	bl	8006174 <__assert_func>
 8005310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005314:	6006      	str	r6, [r0, #0]
 8005316:	60c6      	str	r6, [r0, #12]
 8005318:	b13c      	cbz	r4, 800532a <_Bfree+0x3a>
 800531a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005324:	6021      	str	r1, [r4, #0]
 8005326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	08007b90 	.word	0x08007b90
 8005330:	08007ba7 	.word	0x08007ba7

08005334 <__multadd>:
 8005334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	690d      	ldr	r5, [r1, #16]
 800533a:	4607      	mov	r7, r0
 800533c:	460c      	mov	r4, r1
 800533e:	461e      	mov	r6, r3
 8005340:	f101 0c14 	add.w	ip, r1, #20
 8005344:	2000      	movs	r0, #0
 8005346:	f8dc 3000 	ldr.w	r3, [ip]
 800534a:	b299      	uxth	r1, r3
 800534c:	fb02 6101 	mla	r1, r2, r1, r6
 8005350:	0c1e      	lsrs	r6, r3, #16
 8005352:	0c0b      	lsrs	r3, r1, #16
 8005354:	fb02 3306 	mla	r3, r2, r6, r3
 8005358:	b289      	uxth	r1, r1
 800535a:	3001      	adds	r0, #1
 800535c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005360:	4285      	cmp	r5, r0
 8005362:	f84c 1b04 	str.w	r1, [ip], #4
 8005366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800536a:	dcec      	bgt.n	8005346 <__multadd+0x12>
 800536c:	b30e      	cbz	r6, 80053b2 <__multadd+0x7e>
 800536e:	68a3      	ldr	r3, [r4, #8]
 8005370:	42ab      	cmp	r3, r5
 8005372:	dc19      	bgt.n	80053a8 <__multadd+0x74>
 8005374:	6861      	ldr	r1, [r4, #4]
 8005376:	4638      	mov	r0, r7
 8005378:	3101      	adds	r1, #1
 800537a:	f7ff ff79 	bl	8005270 <_Balloc>
 800537e:	4680      	mov	r8, r0
 8005380:	b928      	cbnz	r0, 800538e <__multadd+0x5a>
 8005382:	4602      	mov	r2, r0
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__multadd+0x84>)
 8005386:	480d      	ldr	r0, [pc, #52]	; (80053bc <__multadd+0x88>)
 8005388:	21b5      	movs	r1, #181	; 0xb5
 800538a:	f000 fef3 	bl	8006174 <__assert_func>
 800538e:	6922      	ldr	r2, [r4, #16]
 8005390:	3202      	adds	r2, #2
 8005392:	f104 010c 	add.w	r1, r4, #12
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	300c      	adds	r0, #12
 800539a:	f001 fd9d 	bl	8006ed8 <memcpy>
 800539e:	4621      	mov	r1, r4
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ffa5 	bl	80052f0 <_Bfree>
 80053a6:	4644      	mov	r4, r8
 80053a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053ac:	3501      	adds	r5, #1
 80053ae:	615e      	str	r6, [r3, #20]
 80053b0:	6125      	str	r5, [r4, #16]
 80053b2:	4620      	mov	r0, r4
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	08007c03 	.word	0x08007c03
 80053bc:	08007ba7 	.word	0x08007ba7

080053c0 <__hi0bits>:
 80053c0:	0c03      	lsrs	r3, r0, #16
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	b9d3      	cbnz	r3, 80053fc <__hi0bits+0x3c>
 80053c6:	0400      	lsls	r0, r0, #16
 80053c8:	2310      	movs	r3, #16
 80053ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80053ce:	bf04      	itt	eq
 80053d0:	0200      	lsleq	r0, r0, #8
 80053d2:	3308      	addeq	r3, #8
 80053d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80053d8:	bf04      	itt	eq
 80053da:	0100      	lsleq	r0, r0, #4
 80053dc:	3304      	addeq	r3, #4
 80053de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80053e2:	bf04      	itt	eq
 80053e4:	0080      	lsleq	r0, r0, #2
 80053e6:	3302      	addeq	r3, #2
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db05      	blt.n	80053f8 <__hi0bits+0x38>
 80053ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80053f0:	f103 0301 	add.w	r3, r3, #1
 80053f4:	bf08      	it	eq
 80053f6:	2320      	moveq	r3, #32
 80053f8:	4618      	mov	r0, r3
 80053fa:	4770      	bx	lr
 80053fc:	2300      	movs	r3, #0
 80053fe:	e7e4      	b.n	80053ca <__hi0bits+0xa>

08005400 <__lo0bits>:
 8005400:	6803      	ldr	r3, [r0, #0]
 8005402:	f013 0207 	ands.w	r2, r3, #7
 8005406:	4601      	mov	r1, r0
 8005408:	d00b      	beq.n	8005422 <__lo0bits+0x22>
 800540a:	07da      	lsls	r2, r3, #31
 800540c:	d423      	bmi.n	8005456 <__lo0bits+0x56>
 800540e:	0798      	lsls	r0, r3, #30
 8005410:	bf49      	itett	mi
 8005412:	085b      	lsrmi	r3, r3, #1
 8005414:	089b      	lsrpl	r3, r3, #2
 8005416:	2001      	movmi	r0, #1
 8005418:	600b      	strmi	r3, [r1, #0]
 800541a:	bf5c      	itt	pl
 800541c:	600b      	strpl	r3, [r1, #0]
 800541e:	2002      	movpl	r0, #2
 8005420:	4770      	bx	lr
 8005422:	b298      	uxth	r0, r3
 8005424:	b9a8      	cbnz	r0, 8005452 <__lo0bits+0x52>
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	2010      	movs	r0, #16
 800542a:	b2da      	uxtb	r2, r3
 800542c:	b90a      	cbnz	r2, 8005432 <__lo0bits+0x32>
 800542e:	3008      	adds	r0, #8
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	071a      	lsls	r2, r3, #28
 8005434:	bf04      	itt	eq
 8005436:	091b      	lsreq	r3, r3, #4
 8005438:	3004      	addeq	r0, #4
 800543a:	079a      	lsls	r2, r3, #30
 800543c:	bf04      	itt	eq
 800543e:	089b      	lsreq	r3, r3, #2
 8005440:	3002      	addeq	r0, #2
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d403      	bmi.n	800544e <__lo0bits+0x4e>
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f100 0001 	add.w	r0, r0, #1
 800544c:	d005      	beq.n	800545a <__lo0bits+0x5a>
 800544e:	600b      	str	r3, [r1, #0]
 8005450:	4770      	bx	lr
 8005452:	4610      	mov	r0, r2
 8005454:	e7e9      	b.n	800542a <__lo0bits+0x2a>
 8005456:	2000      	movs	r0, #0
 8005458:	4770      	bx	lr
 800545a:	2020      	movs	r0, #32
 800545c:	4770      	bx	lr
	...

08005460 <__i2b>:
 8005460:	b510      	push	{r4, lr}
 8005462:	460c      	mov	r4, r1
 8005464:	2101      	movs	r1, #1
 8005466:	f7ff ff03 	bl	8005270 <_Balloc>
 800546a:	4602      	mov	r2, r0
 800546c:	b928      	cbnz	r0, 800547a <__i2b+0x1a>
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <__i2b+0x24>)
 8005470:	4805      	ldr	r0, [pc, #20]	; (8005488 <__i2b+0x28>)
 8005472:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005476:	f000 fe7d 	bl	8006174 <__assert_func>
 800547a:	2301      	movs	r3, #1
 800547c:	6144      	str	r4, [r0, #20]
 800547e:	6103      	str	r3, [r0, #16]
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop
 8005484:	08007c03 	.word	0x08007c03
 8005488:	08007ba7 	.word	0x08007ba7

0800548c <__multiply>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	4691      	mov	r9, r2
 8005492:	690a      	ldr	r2, [r1, #16]
 8005494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	bfb8      	it	lt
 800549c:	460b      	movlt	r3, r1
 800549e:	460c      	mov	r4, r1
 80054a0:	bfbc      	itt	lt
 80054a2:	464c      	movlt	r4, r9
 80054a4:	4699      	movlt	r9, r3
 80054a6:	6927      	ldr	r7, [r4, #16]
 80054a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	6861      	ldr	r1, [r4, #4]
 80054b0:	eb07 060a 	add.w	r6, r7, sl
 80054b4:	42b3      	cmp	r3, r6
 80054b6:	b085      	sub	sp, #20
 80054b8:	bfb8      	it	lt
 80054ba:	3101      	addlt	r1, #1
 80054bc:	f7ff fed8 	bl	8005270 <_Balloc>
 80054c0:	b930      	cbnz	r0, 80054d0 <__multiply+0x44>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <__multiply+0x14c>)
 80054c6:	4845      	ldr	r0, [pc, #276]	; (80055dc <__multiply+0x150>)
 80054c8:	f240 115d 	movw	r1, #349	; 0x15d
 80054cc:	f000 fe52 	bl	8006174 <__assert_func>
 80054d0:	f100 0514 	add.w	r5, r0, #20
 80054d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054d8:	462b      	mov	r3, r5
 80054da:	2200      	movs	r2, #0
 80054dc:	4543      	cmp	r3, r8
 80054de:	d321      	bcc.n	8005524 <__multiply+0x98>
 80054e0:	f104 0314 	add.w	r3, r4, #20
 80054e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054e8:	f109 0314 	add.w	r3, r9, #20
 80054ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054f0:	9202      	str	r2, [sp, #8]
 80054f2:	1b3a      	subs	r2, r7, r4
 80054f4:	3a15      	subs	r2, #21
 80054f6:	f022 0203 	bic.w	r2, r2, #3
 80054fa:	3204      	adds	r2, #4
 80054fc:	f104 0115 	add.w	r1, r4, #21
 8005500:	428f      	cmp	r7, r1
 8005502:	bf38      	it	cc
 8005504:	2204      	movcc	r2, #4
 8005506:	9201      	str	r2, [sp, #4]
 8005508:	9a02      	ldr	r2, [sp, #8]
 800550a:	9303      	str	r3, [sp, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d80c      	bhi.n	800552a <__multiply+0x9e>
 8005510:	2e00      	cmp	r6, #0
 8005512:	dd03      	ble.n	800551c <__multiply+0x90>
 8005514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005518:	2b00      	cmp	r3, #0
 800551a:	d05a      	beq.n	80055d2 <__multiply+0x146>
 800551c:	6106      	str	r6, [r0, #16]
 800551e:	b005      	add	sp, #20
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	f843 2b04 	str.w	r2, [r3], #4
 8005528:	e7d8      	b.n	80054dc <__multiply+0x50>
 800552a:	f8b3 a000 	ldrh.w	sl, [r3]
 800552e:	f1ba 0f00 	cmp.w	sl, #0
 8005532:	d024      	beq.n	800557e <__multiply+0xf2>
 8005534:	f104 0e14 	add.w	lr, r4, #20
 8005538:	46a9      	mov	r9, r5
 800553a:	f04f 0c00 	mov.w	ip, #0
 800553e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005542:	f8d9 1000 	ldr.w	r1, [r9]
 8005546:	fa1f fb82 	uxth.w	fp, r2
 800554a:	b289      	uxth	r1, r1
 800554c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005550:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005554:	f8d9 2000 	ldr.w	r2, [r9]
 8005558:	4461      	add	r1, ip
 800555a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800555e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005562:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005566:	b289      	uxth	r1, r1
 8005568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800556c:	4577      	cmp	r7, lr
 800556e:	f849 1b04 	str.w	r1, [r9], #4
 8005572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005576:	d8e2      	bhi.n	800553e <__multiply+0xb2>
 8005578:	9a01      	ldr	r2, [sp, #4]
 800557a:	f845 c002 	str.w	ip, [r5, r2]
 800557e:	9a03      	ldr	r2, [sp, #12]
 8005580:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005584:	3304      	adds	r3, #4
 8005586:	f1b9 0f00 	cmp.w	r9, #0
 800558a:	d020      	beq.n	80055ce <__multiply+0x142>
 800558c:	6829      	ldr	r1, [r5, #0]
 800558e:	f104 0c14 	add.w	ip, r4, #20
 8005592:	46ae      	mov	lr, r5
 8005594:	f04f 0a00 	mov.w	sl, #0
 8005598:	f8bc b000 	ldrh.w	fp, [ip]
 800559c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80055a0:	fb09 220b 	mla	r2, r9, fp, r2
 80055a4:	4492      	add	sl, r2
 80055a6:	b289      	uxth	r1, r1
 80055a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80055ac:	f84e 1b04 	str.w	r1, [lr], #4
 80055b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055b4:	f8be 1000 	ldrh.w	r1, [lr]
 80055b8:	0c12      	lsrs	r2, r2, #16
 80055ba:	fb09 1102 	mla	r1, r9, r2, r1
 80055be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80055c2:	4567      	cmp	r7, ip
 80055c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055c8:	d8e6      	bhi.n	8005598 <__multiply+0x10c>
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	50a9      	str	r1, [r5, r2]
 80055ce:	3504      	adds	r5, #4
 80055d0:	e79a      	b.n	8005508 <__multiply+0x7c>
 80055d2:	3e01      	subs	r6, #1
 80055d4:	e79c      	b.n	8005510 <__multiply+0x84>
 80055d6:	bf00      	nop
 80055d8:	08007c03 	.word	0x08007c03
 80055dc:	08007ba7 	.word	0x08007ba7

080055e0 <__pow5mult>:
 80055e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4615      	mov	r5, r2
 80055e6:	f012 0203 	ands.w	r2, r2, #3
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	d007      	beq.n	8005600 <__pow5mult+0x20>
 80055f0:	4c25      	ldr	r4, [pc, #148]	; (8005688 <__pow5mult+0xa8>)
 80055f2:	3a01      	subs	r2, #1
 80055f4:	2300      	movs	r3, #0
 80055f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055fa:	f7ff fe9b 	bl	8005334 <__multadd>
 80055fe:	4607      	mov	r7, r0
 8005600:	10ad      	asrs	r5, r5, #2
 8005602:	d03d      	beq.n	8005680 <__pow5mult+0xa0>
 8005604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005606:	b97c      	cbnz	r4, 8005628 <__pow5mult+0x48>
 8005608:	2010      	movs	r0, #16
 800560a:	f001 fc5d 	bl	8006ec8 <malloc>
 800560e:	4602      	mov	r2, r0
 8005610:	6270      	str	r0, [r6, #36]	; 0x24
 8005612:	b928      	cbnz	r0, 8005620 <__pow5mult+0x40>
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <__pow5mult+0xac>)
 8005616:	481e      	ldr	r0, [pc, #120]	; (8005690 <__pow5mult+0xb0>)
 8005618:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800561c:	f000 fdaa 	bl	8006174 <__assert_func>
 8005620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005624:	6004      	str	r4, [r0, #0]
 8005626:	60c4      	str	r4, [r0, #12]
 8005628:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800562c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005630:	b94c      	cbnz	r4, 8005646 <__pow5mult+0x66>
 8005632:	f240 2171 	movw	r1, #625	; 0x271
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ff12 	bl	8005460 <__i2b>
 800563c:	2300      	movs	r3, #0
 800563e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005642:	4604      	mov	r4, r0
 8005644:	6003      	str	r3, [r0, #0]
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	07eb      	lsls	r3, r5, #31
 800564c:	d50a      	bpl.n	8005664 <__pow5mult+0x84>
 800564e:	4639      	mov	r1, r7
 8005650:	4622      	mov	r2, r4
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ff1a 	bl	800548c <__multiply>
 8005658:	4639      	mov	r1, r7
 800565a:	4680      	mov	r8, r0
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff fe47 	bl	80052f0 <_Bfree>
 8005662:	4647      	mov	r7, r8
 8005664:	106d      	asrs	r5, r5, #1
 8005666:	d00b      	beq.n	8005680 <__pow5mult+0xa0>
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	b938      	cbnz	r0, 800567c <__pow5mult+0x9c>
 800566c:	4622      	mov	r2, r4
 800566e:	4621      	mov	r1, r4
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff ff0b 	bl	800548c <__multiply>
 8005676:	6020      	str	r0, [r4, #0]
 8005678:	f8c0 9000 	str.w	r9, [r0]
 800567c:	4604      	mov	r4, r0
 800567e:	e7e4      	b.n	800564a <__pow5mult+0x6a>
 8005680:	4638      	mov	r0, r7
 8005682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005686:	bf00      	nop
 8005688:	08007d08 	.word	0x08007d08
 800568c:	08007b90 	.word	0x08007b90
 8005690:	08007ba7 	.word	0x08007ba7

08005694 <__lshift>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	6849      	ldr	r1, [r1, #4]
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	4607      	mov	r7, r0
 80056a6:	4691      	mov	r9, r2
 80056a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056ac:	f108 0601 	add.w	r6, r8, #1
 80056b0:	42b3      	cmp	r3, r6
 80056b2:	db0b      	blt.n	80056cc <__lshift+0x38>
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff fddb 	bl	8005270 <_Balloc>
 80056ba:	4605      	mov	r5, r0
 80056bc:	b948      	cbnz	r0, 80056d2 <__lshift+0x3e>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b2a      	ldr	r3, [pc, #168]	; (800576c <__lshift+0xd8>)
 80056c2:	482b      	ldr	r0, [pc, #172]	; (8005770 <__lshift+0xdc>)
 80056c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80056c8:	f000 fd54 	bl	8006174 <__assert_func>
 80056cc:	3101      	adds	r1, #1
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	e7ee      	b.n	80056b0 <__lshift+0x1c>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f100 0114 	add.w	r1, r0, #20
 80056d8:	f100 0210 	add.w	r2, r0, #16
 80056dc:	4618      	mov	r0, r3
 80056de:	4553      	cmp	r3, sl
 80056e0:	db37      	blt.n	8005752 <__lshift+0xbe>
 80056e2:	6920      	ldr	r0, [r4, #16]
 80056e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056e8:	f104 0314 	add.w	r3, r4, #20
 80056ec:	f019 091f 	ands.w	r9, r9, #31
 80056f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80056f8:	d02f      	beq.n	800575a <__lshift+0xc6>
 80056fa:	f1c9 0e20 	rsb	lr, r9, #32
 80056fe:	468a      	mov	sl, r1
 8005700:	f04f 0c00 	mov.w	ip, #0
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	fa02 f209 	lsl.w	r2, r2, r9
 800570a:	ea42 020c 	orr.w	r2, r2, ip
 800570e:	f84a 2b04 	str.w	r2, [sl], #4
 8005712:	f853 2b04 	ldr.w	r2, [r3], #4
 8005716:	4298      	cmp	r0, r3
 8005718:	fa22 fc0e 	lsr.w	ip, r2, lr
 800571c:	d8f2      	bhi.n	8005704 <__lshift+0x70>
 800571e:	1b03      	subs	r3, r0, r4
 8005720:	3b15      	subs	r3, #21
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	3304      	adds	r3, #4
 8005728:	f104 0215 	add.w	r2, r4, #21
 800572c:	4290      	cmp	r0, r2
 800572e:	bf38      	it	cc
 8005730:	2304      	movcc	r3, #4
 8005732:	f841 c003 	str.w	ip, [r1, r3]
 8005736:	f1bc 0f00 	cmp.w	ip, #0
 800573a:	d001      	beq.n	8005740 <__lshift+0xac>
 800573c:	f108 0602 	add.w	r6, r8, #2
 8005740:	3e01      	subs	r6, #1
 8005742:	4638      	mov	r0, r7
 8005744:	612e      	str	r6, [r5, #16]
 8005746:	4621      	mov	r1, r4
 8005748:	f7ff fdd2 	bl	80052f0 <_Bfree>
 800574c:	4628      	mov	r0, r5
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	f842 0f04 	str.w	r0, [r2, #4]!
 8005756:	3301      	adds	r3, #1
 8005758:	e7c1      	b.n	80056de <__lshift+0x4a>
 800575a:	3904      	subs	r1, #4
 800575c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005760:	f841 2f04 	str.w	r2, [r1, #4]!
 8005764:	4298      	cmp	r0, r3
 8005766:	d8f9      	bhi.n	800575c <__lshift+0xc8>
 8005768:	e7ea      	b.n	8005740 <__lshift+0xac>
 800576a:	bf00      	nop
 800576c:	08007c03 	.word	0x08007c03
 8005770:	08007ba7 	.word	0x08007ba7

08005774 <__mcmp>:
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	6902      	ldr	r2, [r0, #16]
 8005778:	690c      	ldr	r4, [r1, #16]
 800577a:	1b12      	subs	r2, r2, r4
 800577c:	d10e      	bne.n	800579c <__mcmp+0x28>
 800577e:	f100 0314 	add.w	r3, r0, #20
 8005782:	3114      	adds	r1, #20
 8005784:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800578c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005790:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005794:	42a5      	cmp	r5, r4
 8005796:	d003      	beq.n	80057a0 <__mcmp+0x2c>
 8005798:	d305      	bcc.n	80057a6 <__mcmp+0x32>
 800579a:	2201      	movs	r2, #1
 800579c:	4610      	mov	r0, r2
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	4283      	cmp	r3, r0
 80057a2:	d3f3      	bcc.n	800578c <__mcmp+0x18>
 80057a4:	e7fa      	b.n	800579c <__mcmp+0x28>
 80057a6:	f04f 32ff 	mov.w	r2, #4294967295
 80057aa:	e7f7      	b.n	800579c <__mcmp+0x28>

080057ac <__mdiff>:
 80057ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	4606      	mov	r6, r0
 80057b4:	4611      	mov	r1, r2
 80057b6:	4620      	mov	r0, r4
 80057b8:	4690      	mov	r8, r2
 80057ba:	f7ff ffdb 	bl	8005774 <__mcmp>
 80057be:	1e05      	subs	r5, r0, #0
 80057c0:	d110      	bne.n	80057e4 <__mdiff+0x38>
 80057c2:	4629      	mov	r1, r5
 80057c4:	4630      	mov	r0, r6
 80057c6:	f7ff fd53 	bl	8005270 <_Balloc>
 80057ca:	b930      	cbnz	r0, 80057da <__mdiff+0x2e>
 80057cc:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <__mdiff+0x10c>)
 80057ce:	4602      	mov	r2, r0
 80057d0:	f240 2132 	movw	r1, #562	; 0x232
 80057d4:	4839      	ldr	r0, [pc, #228]	; (80058bc <__mdiff+0x110>)
 80057d6:	f000 fccd 	bl	8006174 <__assert_func>
 80057da:	2301      	movs	r3, #1
 80057dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e4:	bfa4      	itt	ge
 80057e6:	4643      	movge	r3, r8
 80057e8:	46a0      	movge	r8, r4
 80057ea:	4630      	mov	r0, r6
 80057ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057f0:	bfa6      	itte	ge
 80057f2:	461c      	movge	r4, r3
 80057f4:	2500      	movge	r5, #0
 80057f6:	2501      	movlt	r5, #1
 80057f8:	f7ff fd3a 	bl	8005270 <_Balloc>
 80057fc:	b920      	cbnz	r0, 8005808 <__mdiff+0x5c>
 80057fe:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <__mdiff+0x10c>)
 8005800:	4602      	mov	r2, r0
 8005802:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005806:	e7e5      	b.n	80057d4 <__mdiff+0x28>
 8005808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800580c:	6926      	ldr	r6, [r4, #16]
 800580e:	60c5      	str	r5, [r0, #12]
 8005810:	f104 0914 	add.w	r9, r4, #20
 8005814:	f108 0514 	add.w	r5, r8, #20
 8005818:	f100 0e14 	add.w	lr, r0, #20
 800581c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005824:	f108 0210 	add.w	r2, r8, #16
 8005828:	46f2      	mov	sl, lr
 800582a:	2100      	movs	r1, #0
 800582c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005834:	fa1f f883 	uxth.w	r8, r3
 8005838:	fa11 f18b 	uxtah	r1, r1, fp
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	eba1 0808 	sub.w	r8, r1, r8
 8005842:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005846:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800584a:	fa1f f888 	uxth.w	r8, r8
 800584e:	1419      	asrs	r1, r3, #16
 8005850:	454e      	cmp	r6, r9
 8005852:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005856:	f84a 3b04 	str.w	r3, [sl], #4
 800585a:	d8e7      	bhi.n	800582c <__mdiff+0x80>
 800585c:	1b33      	subs	r3, r6, r4
 800585e:	3b15      	subs	r3, #21
 8005860:	f023 0303 	bic.w	r3, r3, #3
 8005864:	3304      	adds	r3, #4
 8005866:	3415      	adds	r4, #21
 8005868:	42a6      	cmp	r6, r4
 800586a:	bf38      	it	cc
 800586c:	2304      	movcc	r3, #4
 800586e:	441d      	add	r5, r3
 8005870:	4473      	add	r3, lr
 8005872:	469e      	mov	lr, r3
 8005874:	462e      	mov	r6, r5
 8005876:	4566      	cmp	r6, ip
 8005878:	d30e      	bcc.n	8005898 <__mdiff+0xec>
 800587a:	f10c 0203 	add.w	r2, ip, #3
 800587e:	1b52      	subs	r2, r2, r5
 8005880:	f022 0203 	bic.w	r2, r2, #3
 8005884:	3d03      	subs	r5, #3
 8005886:	45ac      	cmp	ip, r5
 8005888:	bf38      	it	cc
 800588a:	2200      	movcc	r2, #0
 800588c:	441a      	add	r2, r3
 800588e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005892:	b17b      	cbz	r3, 80058b4 <__mdiff+0x108>
 8005894:	6107      	str	r7, [r0, #16]
 8005896:	e7a3      	b.n	80057e0 <__mdiff+0x34>
 8005898:	f856 8b04 	ldr.w	r8, [r6], #4
 800589c:	fa11 f288 	uxtah	r2, r1, r8
 80058a0:	1414      	asrs	r4, r2, #16
 80058a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80058a6:	b292      	uxth	r2, r2
 80058a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80058ac:	f84e 2b04 	str.w	r2, [lr], #4
 80058b0:	1421      	asrs	r1, r4, #16
 80058b2:	e7e0      	b.n	8005876 <__mdiff+0xca>
 80058b4:	3f01      	subs	r7, #1
 80058b6:	e7ea      	b.n	800588e <__mdiff+0xe2>
 80058b8:	08007c03 	.word	0x08007c03
 80058bc:	08007ba7 	.word	0x08007ba7

080058c0 <__d2b>:
 80058c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	4689      	mov	r9, r1
 80058c6:	2101      	movs	r1, #1
 80058c8:	ec57 6b10 	vmov	r6, r7, d0
 80058cc:	4690      	mov	r8, r2
 80058ce:	f7ff fccf 	bl	8005270 <_Balloc>
 80058d2:	4604      	mov	r4, r0
 80058d4:	b930      	cbnz	r0, 80058e4 <__d2b+0x24>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <__d2b+0xb0>)
 80058da:	4826      	ldr	r0, [pc, #152]	; (8005974 <__d2b+0xb4>)
 80058dc:	f240 310a 	movw	r1, #778	; 0x30a
 80058e0:	f000 fc48 	bl	8006174 <__assert_func>
 80058e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80058e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058ec:	bb35      	cbnz	r5, 800593c <__d2b+0x7c>
 80058ee:	2e00      	cmp	r6, #0
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	d028      	beq.n	8005946 <__d2b+0x86>
 80058f4:	4668      	mov	r0, sp
 80058f6:	9600      	str	r6, [sp, #0]
 80058f8:	f7ff fd82 	bl	8005400 <__lo0bits>
 80058fc:	9900      	ldr	r1, [sp, #0]
 80058fe:	b300      	cbz	r0, 8005942 <__d2b+0x82>
 8005900:	9a01      	ldr	r2, [sp, #4]
 8005902:	f1c0 0320 	rsb	r3, r0, #32
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	430b      	orrs	r3, r1
 800590c:	40c2      	lsrs	r2, r0
 800590e:	6163      	str	r3, [r4, #20]
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	61a3      	str	r3, [r4, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf14      	ite	ne
 800591a:	2202      	movne	r2, #2
 800591c:	2201      	moveq	r2, #1
 800591e:	6122      	str	r2, [r4, #16]
 8005920:	b1d5      	cbz	r5, 8005958 <__d2b+0x98>
 8005922:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005926:	4405      	add	r5, r0
 8005928:	f8c9 5000 	str.w	r5, [r9]
 800592c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005930:	f8c8 0000 	str.w	r0, [r8]
 8005934:	4620      	mov	r0, r4
 8005936:	b003      	add	sp, #12
 8005938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800593c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005940:	e7d5      	b.n	80058ee <__d2b+0x2e>
 8005942:	6161      	str	r1, [r4, #20]
 8005944:	e7e5      	b.n	8005912 <__d2b+0x52>
 8005946:	a801      	add	r0, sp, #4
 8005948:	f7ff fd5a 	bl	8005400 <__lo0bits>
 800594c:	9b01      	ldr	r3, [sp, #4]
 800594e:	6163      	str	r3, [r4, #20]
 8005950:	2201      	movs	r2, #1
 8005952:	6122      	str	r2, [r4, #16]
 8005954:	3020      	adds	r0, #32
 8005956:	e7e3      	b.n	8005920 <__d2b+0x60>
 8005958:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800595c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005960:	f8c9 0000 	str.w	r0, [r9]
 8005964:	6918      	ldr	r0, [r3, #16]
 8005966:	f7ff fd2b 	bl	80053c0 <__hi0bits>
 800596a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800596e:	e7df      	b.n	8005930 <__d2b+0x70>
 8005970:	08007c03 	.word	0x08007c03
 8005974:	08007ba7 	.word	0x08007ba7

08005978 <_mprec_log10>:
 8005978:	2817      	cmp	r0, #23
 800597a:	b5d0      	push	{r4, r6, r7, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	dc07      	bgt.n	8005990 <_mprec_log10+0x18>
 8005980:	4809      	ldr	r0, [pc, #36]	; (80059a8 <_mprec_log10+0x30>)
 8005982:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005986:	e9d4 0100 	ldrd	r0, r1, [r4]
 800598a:	ec41 0b10 	vmov	d0, r0, r1
 800598e:	bdd0      	pop	{r4, r6, r7, pc}
 8005990:	4906      	ldr	r1, [pc, #24]	; (80059ac <_mprec_log10+0x34>)
 8005992:	4f07      	ldr	r7, [pc, #28]	; (80059b0 <_mprec_log10+0x38>)
 8005994:	2000      	movs	r0, #0
 8005996:	2600      	movs	r6, #0
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	f7fa fe3c 	bl	8000618 <__aeabi_dmul>
 80059a0:	3c01      	subs	r4, #1
 80059a2:	d1f9      	bne.n	8005998 <_mprec_log10+0x20>
 80059a4:	e7f1      	b.n	800598a <_mprec_log10+0x12>
 80059a6:	bf00      	nop
 80059a8:	08007c40 	.word	0x08007c40
 80059ac:	3ff00000 	.word	0x3ff00000
 80059b0:	40240000 	.word	0x40240000

080059b4 <_calloc_r>:
 80059b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b6:	fba1 2402 	umull	r2, r4, r1, r2
 80059ba:	b94c      	cbnz	r4, 80059d0 <_calloc_r+0x1c>
 80059bc:	4611      	mov	r1, r2
 80059be:	9201      	str	r2, [sp, #4]
 80059c0:	f000 f82e 	bl	8005a20 <_malloc_r>
 80059c4:	9a01      	ldr	r2, [sp, #4]
 80059c6:	4605      	mov	r5, r0
 80059c8:	b930      	cbnz	r0, 80059d8 <_calloc_r+0x24>
 80059ca:	4628      	mov	r0, r5
 80059cc:	b003      	add	sp, #12
 80059ce:	bd30      	pop	{r4, r5, pc}
 80059d0:	220c      	movs	r2, #12
 80059d2:	6002      	str	r2, [r0, #0]
 80059d4:	2500      	movs	r5, #0
 80059d6:	e7f8      	b.n	80059ca <_calloc_r+0x16>
 80059d8:	4621      	mov	r1, r4
 80059da:	f7ff fae9 	bl	8004fb0 <memset>
 80059de:	e7f4      	b.n	80059ca <_calloc_r+0x16>

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0e      	ldr	r6, [pc, #56]	; (8005a1c <sbrk_aligned+0x3c>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 fbaa 	bl	8006144 <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fba5 	bl	8006144 <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d00a      	beq.n	8005a14 <sbrk_aligned+0x34>
 80059fe:	1cc4      	adds	r4, r0, #3
 8005a00:	f024 0403 	bic.w	r4, r4, #3
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d007      	beq.n	8005a18 <sbrk_aligned+0x38>
 8005a08:	1a21      	subs	r1, r4, r0
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 fb9a 	bl	8006144 <_sbrk_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d101      	bne.n	8005a18 <sbrk_aligned+0x38>
 8005a14:	f04f 34ff 	mov.w	r4, #4294967295
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	200001c4 	.word	0x200001c4

08005a20 <_malloc_r>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	1ccd      	adds	r5, r1, #3
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	4607      	mov	r7, r0
 8005a36:	db01      	blt.n	8005a3c <_malloc_r+0x1c>
 8005a38:	42a9      	cmp	r1, r5
 8005a3a:	d905      	bls.n	8005a48 <_malloc_r+0x28>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	2600      	movs	r6, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	4e2e      	ldr	r6, [pc, #184]	; (8005b04 <_malloc_r+0xe4>)
 8005a4a:	f001 fa6d 	bl	8006f28 <__malloc_lock>
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	461c      	mov	r4, r3
 8005a52:	bb34      	cbnz	r4, 8005aa2 <_malloc_r+0x82>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff ffc2 	bl	80059e0 <sbrk_aligned>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	4604      	mov	r4, r0
 8005a60:	d14d      	bne.n	8005afe <_malloc_r+0xde>
 8005a62:	6834      	ldr	r4, [r6, #0]
 8005a64:	4626      	mov	r6, r4
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	d140      	bne.n	8005aec <_malloc_r+0xcc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4638      	mov	r0, r7
 8005a70:	eb04 0803 	add.w	r8, r4, r3
 8005a74:	f000 fb66 	bl	8006144 <_sbrk_r>
 8005a78:	4580      	cmp	r8, r0
 8005a7a:	d13a      	bne.n	8005af2 <_malloc_r+0xd2>
 8005a7c:	6821      	ldr	r1, [r4, #0]
 8005a7e:	3503      	adds	r5, #3
 8005a80:	1a6d      	subs	r5, r5, r1
 8005a82:	f025 0503 	bic.w	r5, r5, #3
 8005a86:	3508      	adds	r5, #8
 8005a88:	2d0c      	cmp	r5, #12
 8005a8a:	bf38      	it	cc
 8005a8c:	250c      	movcc	r5, #12
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ffa5 	bl	80059e0 <sbrk_aligned>
 8005a96:	3001      	adds	r0, #1
 8005a98:	d02b      	beq.n	8005af2 <_malloc_r+0xd2>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	442b      	add	r3, r5
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	e00e      	b.n	8005ac0 <_malloc_r+0xa0>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	1b52      	subs	r2, r2, r5
 8005aa6:	d41e      	bmi.n	8005ae6 <_malloc_r+0xc6>
 8005aa8:	2a0b      	cmp	r2, #11
 8005aaa:	d916      	bls.n	8005ada <_malloc_r+0xba>
 8005aac:	1961      	adds	r1, r4, r5
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	bf18      	it	ne
 8005ab4:	6059      	strne	r1, [r3, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	bf08      	it	eq
 8005aba:	6031      	streq	r1, [r6, #0]
 8005abc:	5162      	str	r2, [r4, r5]
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f104 060b 	add.w	r6, r4, #11
 8005ac6:	f001 fa35 	bl	8006f34 <__malloc_unlock>
 8005aca:	f026 0607 	bic.w	r6, r6, #7
 8005ace:	1d23      	adds	r3, r4, #4
 8005ad0:	1af2      	subs	r2, r6, r3
 8005ad2:	d0b6      	beq.n	8005a42 <_malloc_r+0x22>
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	50a3      	str	r3, [r4, r2]
 8005ad8:	e7b3      	b.n	8005a42 <_malloc_r+0x22>
 8005ada:	6862      	ldr	r2, [r4, #4]
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	bf0c      	ite	eq
 8005ae0:	6032      	streq	r2, [r6, #0]
 8005ae2:	605a      	strne	r2, [r3, #4]
 8005ae4:	e7ec      	b.n	8005ac0 <_malloc_r+0xa0>
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	6864      	ldr	r4, [r4, #4]
 8005aea:	e7b2      	b.n	8005a52 <_malloc_r+0x32>
 8005aec:	4634      	mov	r4, r6
 8005aee:	6876      	ldr	r6, [r6, #4]
 8005af0:	e7b9      	b.n	8005a66 <_malloc_r+0x46>
 8005af2:	230c      	movs	r3, #12
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4638      	mov	r0, r7
 8005af8:	f001 fa1c 	bl	8006f34 <__malloc_unlock>
 8005afc:	e7a1      	b.n	8005a42 <_malloc_r+0x22>
 8005afe:	6025      	str	r5, [r4, #0]
 8005b00:	e7de      	b.n	8005ac0 <_malloc_r+0xa0>
 8005b02:	bf00      	nop
 8005b04:	200001c0 	.word	0x200001c0

08005b08 <_realloc_r>:
 8005b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	4614      	mov	r4, r2
 8005b10:	460e      	mov	r6, r1
 8005b12:	b921      	cbnz	r1, 8005b1e <_realloc_r+0x16>
 8005b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b18:	4611      	mov	r1, r2
 8005b1a:	f7ff bf81 	b.w	8005a20 <_malloc_r>
 8005b1e:	b92a      	cbnz	r2, 8005b2c <_realloc_r+0x24>
 8005b20:	f001 fa0e 	bl	8006f40 <_free_r>
 8005b24:	4625      	mov	r5, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	f001 fa54 	bl	8006fd8 <_malloc_usable_size_r>
 8005b30:	4284      	cmp	r4, r0
 8005b32:	4607      	mov	r7, r0
 8005b34:	d802      	bhi.n	8005b3c <_realloc_r+0x34>
 8005b36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b3a:	d812      	bhi.n	8005b62 <_realloc_r+0x5a>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f7ff ff6e 	bl	8005a20 <_malloc_r>
 8005b44:	4605      	mov	r5, r0
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0ed      	beq.n	8005b26 <_realloc_r+0x1e>
 8005b4a:	42bc      	cmp	r4, r7
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4631      	mov	r1, r6
 8005b50:	bf28      	it	cs
 8005b52:	463a      	movcs	r2, r7
 8005b54:	f001 f9c0 	bl	8006ed8 <memcpy>
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f001 f9f0 	bl	8006f40 <_free_r>
 8005b60:	e7e1      	b.n	8005b26 <_realloc_r+0x1e>
 8005b62:	4635      	mov	r5, r6
 8005b64:	e7df      	b.n	8005b26 <_realloc_r+0x1e>

08005b66 <__ssputs_r>:
 8005b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6a:	688e      	ldr	r6, [r1, #8]
 8005b6c:	429e      	cmp	r6, r3
 8005b6e:	4682      	mov	sl, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	4690      	mov	r8, r2
 8005b74:	461f      	mov	r7, r3
 8005b76:	d838      	bhi.n	8005bea <__ssputs_r+0x84>
 8005b78:	898a      	ldrh	r2, [r1, #12]
 8005b7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b7e:	d032      	beq.n	8005be6 <__ssputs_r+0x80>
 8005b80:	6825      	ldr	r5, [r4, #0]
 8005b82:	6909      	ldr	r1, [r1, #16]
 8005b84:	eba5 0901 	sub.w	r9, r5, r1
 8005b88:	6965      	ldr	r5, [r4, #20]
 8005b8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b92:	3301      	adds	r3, #1
 8005b94:	444b      	add	r3, r9
 8005b96:	106d      	asrs	r5, r5, #1
 8005b98:	429d      	cmp	r5, r3
 8005b9a:	bf38      	it	cc
 8005b9c:	461d      	movcc	r5, r3
 8005b9e:	0553      	lsls	r3, r2, #21
 8005ba0:	d531      	bpl.n	8005c06 <__ssputs_r+0xa0>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f7ff ff3c 	bl	8005a20 <_malloc_r>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	b950      	cbnz	r0, 8005bc2 <__ssputs_r+0x5c>
 8005bac:	230c      	movs	r3, #12
 8005bae:	f8ca 3000 	str.w	r3, [sl]
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc2:	6921      	ldr	r1, [r4, #16]
 8005bc4:	464a      	mov	r2, r9
 8005bc6:	f001 f987 	bl	8006ed8 <memcpy>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	6126      	str	r6, [r4, #16]
 8005bd8:	6165      	str	r5, [r4, #20]
 8005bda:	444e      	add	r6, r9
 8005bdc:	eba5 0509 	sub.w	r5, r5, r9
 8005be0:	6026      	str	r6, [r4, #0]
 8005be2:	60a5      	str	r5, [r4, #8]
 8005be4:	463e      	mov	r6, r7
 8005be6:	42be      	cmp	r6, r7
 8005be8:	d900      	bls.n	8005bec <__ssputs_r+0x86>
 8005bea:	463e      	mov	r6, r7
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	f001 f97f 	bl	8006ef4 <memmove>
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	1b9b      	subs	r3, r3, r6
 8005bfa:	60a3      	str	r3, [r4, #8]
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	4433      	add	r3, r6
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	2000      	movs	r0, #0
 8005c04:	e7db      	b.n	8005bbe <__ssputs_r+0x58>
 8005c06:	462a      	mov	r2, r5
 8005c08:	f7ff ff7e 	bl	8005b08 <_realloc_r>
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d1e1      	bne.n	8005bd6 <__ssputs_r+0x70>
 8005c12:	6921      	ldr	r1, [r4, #16]
 8005c14:	4650      	mov	r0, sl
 8005c16:	f001 f993 	bl	8006f40 <_free_r>
 8005c1a:	e7c7      	b.n	8005bac <__ssputs_r+0x46>

08005c1c <_svfiprintf_r>:
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	4698      	mov	r8, r3
 8005c22:	898b      	ldrh	r3, [r1, #12]
 8005c24:	061b      	lsls	r3, r3, #24
 8005c26:	b09d      	sub	sp, #116	; 0x74
 8005c28:	4607      	mov	r7, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	d50e      	bpl.n	8005c4e <_svfiprintf_r+0x32>
 8005c30:	690b      	ldr	r3, [r1, #16]
 8005c32:	b963      	cbnz	r3, 8005c4e <_svfiprintf_r+0x32>
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	f7ff fef3 	bl	8005a20 <_malloc_r>
 8005c3a:	6028      	str	r0, [r5, #0]
 8005c3c:	6128      	str	r0, [r5, #16]
 8005c3e:	b920      	cbnz	r0, 8005c4a <_svfiprintf_r+0x2e>
 8005c40:	230c      	movs	r3, #12
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	e0d1      	b.n	8005dee <_svfiprintf_r+0x1d2>
 8005c4a:	2340      	movs	r3, #64	; 0x40
 8005c4c:	616b      	str	r3, [r5, #20]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9309      	str	r3, [sp, #36]	; 0x24
 8005c52:	2320      	movs	r3, #32
 8005c54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c5c:	2330      	movs	r3, #48	; 0x30
 8005c5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e08 <_svfiprintf_r+0x1ec>
 8005c62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c66:	f04f 0901 	mov.w	r9, #1
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c72:	b10a      	cbz	r2, 8005c78 <_svfiprintf_r+0x5c>
 8005c74:	2a25      	cmp	r2, #37	; 0x25
 8005c76:	d1f9      	bne.n	8005c6c <_svfiprintf_r+0x50>
 8005c78:	ebba 0b04 	subs.w	fp, sl, r4
 8005c7c:	d00b      	beq.n	8005c96 <_svfiprintf_r+0x7a>
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4622      	mov	r2, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ff6e 	bl	8005b66 <__ssputs_r>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f000 80aa 	beq.w	8005de4 <_svfiprintf_r+0x1c8>
 8005c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c92:	445a      	add	r2, fp
 8005c94:	9209      	str	r2, [sp, #36]	; 0x24
 8005c96:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80a2 	beq.w	8005de4 <_svfiprintf_r+0x1c8>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005caa:	f10a 0a01 	add.w	sl, sl, #1
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005cb8:	4654      	mov	r4, sl
 8005cba:	2205      	movs	r2, #5
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	4851      	ldr	r0, [pc, #324]	; (8005e08 <_svfiprintf_r+0x1ec>)
 8005cc2:	f7fa fa9d 	bl	8000200 <memchr>
 8005cc6:	9a04      	ldr	r2, [sp, #16]
 8005cc8:	b9d8      	cbnz	r0, 8005d02 <_svfiprintf_r+0xe6>
 8005cca:	06d0      	lsls	r0, r2, #27
 8005ccc:	bf44      	itt	mi
 8005cce:	2320      	movmi	r3, #32
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd4:	0711      	lsls	r1, r2, #28
 8005cd6:	bf44      	itt	mi
 8005cd8:	232b      	movmi	r3, #43	; 0x2b
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce4:	d015      	beq.n	8005d12 <_svfiprintf_r+0xf6>
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	4654      	mov	r4, sl
 8005cea:	2000      	movs	r0, #0
 8005cec:	f04f 0c0a 	mov.w	ip, #10
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf6:	3b30      	subs	r3, #48	; 0x30
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d94e      	bls.n	8005d9a <_svfiprintf_r+0x17e>
 8005cfc:	b1b0      	cbz	r0, 8005d2c <_svfiprintf_r+0x110>
 8005cfe:	9207      	str	r2, [sp, #28]
 8005d00:	e014      	b.n	8005d2c <_svfiprintf_r+0x110>
 8005d02:	eba0 0308 	sub.w	r3, r0, r8
 8005d06:	fa09 f303 	lsl.w	r3, r9, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	46a2      	mov	sl, r4
 8005d10:	e7d2      	b.n	8005cb8 <_svfiprintf_r+0x9c>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	9103      	str	r1, [sp, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bfbb      	ittet	lt
 8005d1e:	425b      	neglt	r3, r3
 8005d20:	f042 0202 	orrlt.w	r2, r2, #2
 8005d24:	9307      	strge	r3, [sp, #28]
 8005d26:	9307      	strlt	r3, [sp, #28]
 8005d28:	bfb8      	it	lt
 8005d2a:	9204      	strlt	r2, [sp, #16]
 8005d2c:	7823      	ldrb	r3, [r4, #0]
 8005d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d30:	d10c      	bne.n	8005d4c <_svfiprintf_r+0x130>
 8005d32:	7863      	ldrb	r3, [r4, #1]
 8005d34:	2b2a      	cmp	r3, #42	; 0x2a
 8005d36:	d135      	bne.n	8005da4 <_svfiprintf_r+0x188>
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	9203      	str	r2, [sp, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bfb8      	it	lt
 8005d44:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d48:	3402      	adds	r4, #2
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e18 <_svfiprintf_r+0x1fc>
 8005d50:	7821      	ldrb	r1, [r4, #0]
 8005d52:	2203      	movs	r2, #3
 8005d54:	4650      	mov	r0, sl
 8005d56:	f7fa fa53 	bl	8000200 <memchr>
 8005d5a:	b140      	cbz	r0, 8005d6e <_svfiprintf_r+0x152>
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	eba0 000a 	sub.w	r0, r0, sl
 8005d62:	fa03 f000 	lsl.w	r0, r3, r0
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	4303      	orrs	r3, r0
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d72:	4826      	ldr	r0, [pc, #152]	; (8005e0c <_svfiprintf_r+0x1f0>)
 8005d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d78:	2206      	movs	r2, #6
 8005d7a:	f7fa fa41 	bl	8000200 <memchr>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d038      	beq.n	8005df4 <_svfiprintf_r+0x1d8>
 8005d82:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <_svfiprintf_r+0x1f4>)
 8005d84:	bb1b      	cbnz	r3, 8005dce <_svfiprintf_r+0x1b2>
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	3308      	adds	r3, #8
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d94:	4433      	add	r3, r6
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	e767      	b.n	8005c6a <_svfiprintf_r+0x4e>
 8005d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2001      	movs	r0, #1
 8005da2:	e7a5      	b.n	8005cf0 <_svfiprintf_r+0xd4>
 8005da4:	2300      	movs	r3, #0
 8005da6:	3401      	adds	r4, #1
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f04f 0c0a 	mov.w	ip, #10
 8005db0:	4620      	mov	r0, r4
 8005db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db6:	3a30      	subs	r2, #48	; 0x30
 8005db8:	2a09      	cmp	r2, #9
 8005dba:	d903      	bls.n	8005dc4 <_svfiprintf_r+0x1a8>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0c5      	beq.n	8005d4c <_svfiprintf_r+0x130>
 8005dc0:	9105      	str	r1, [sp, #20]
 8005dc2:	e7c3      	b.n	8005d4c <_svfiprintf_r+0x130>
 8005dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc8:	4604      	mov	r4, r0
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e7f0      	b.n	8005db0 <_svfiprintf_r+0x194>
 8005dce:	ab03      	add	r3, sp, #12
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	462a      	mov	r2, r5
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <_svfiprintf_r+0x1f8>)
 8005dd6:	a904      	add	r1, sp, #16
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f3af 8000 	nop.w
 8005dde:	1c42      	adds	r2, r0, #1
 8005de0:	4606      	mov	r6, r0
 8005de2:	d1d6      	bne.n	8005d92 <_svfiprintf_r+0x176>
 8005de4:	89ab      	ldrh	r3, [r5, #12]
 8005de6:	065b      	lsls	r3, r3, #25
 8005de8:	f53f af2c 	bmi.w	8005c44 <_svfiprintf_r+0x28>
 8005dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dee:	b01d      	add	sp, #116	; 0x74
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	ab03      	add	r3, sp, #12
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <_svfiprintf_r+0x1f8>)
 8005dfc:	a904      	add	r1, sp, #16
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f000 f87a 	bl	8005ef8 <_printf_i>
 8005e04:	e7eb      	b.n	8005dde <_svfiprintf_r+0x1c2>
 8005e06:	bf00      	nop
 8005e08:	08007d14 	.word	0x08007d14
 8005e0c:	08007d1e 	.word	0x08007d1e
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005b67 	.word	0x08005b67
 8005e18:	08007d1a 	.word	0x08007d1a

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4699      	mov	r9, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e68:	1e13      	subs	r3, r2, #0
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	68e5      	ldr	r5, [r4, #12]
 8005e86:	6832      	ldr	r2, [r6, #0]
 8005e88:	f003 0306 	and.w	r3, r3, #6
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	bf08      	it	eq
 8005e90:	1aad      	subeq	r5, r5, r2
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c0      	blx	r8
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	; 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c0      	blx	r8
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	7e0f      	ldrb	r7, [r1, #24]
 8005efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f00:	2f78      	cmp	r7, #120	; 0x78
 8005f02:	4691      	mov	r9, r2
 8005f04:	4680      	mov	r8, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	; 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d8 	beq.w	80060ca <_printf_i+0x1d2>
 8005f1a:	2f58      	cmp	r7, #88	; 0x58
 8005f1c:	f000 80a3 	beq.w	8006066 <_printf_i+0x16e>
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a101      	add	r1, pc, #4	; (adr r1, 8005f38 <_printf_i+0x40>)
 8005f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060b1 	.word	0x080060b1
 8005f68:	08005fd5 	.word	0x08005fd5
 8005f6c:	08006093 	.word	0x08006093
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060d3 	.word	0x080060d3
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	0800609b 	.word	0x0800609b
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	602a      	str	r2, [r5, #0]
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0a3      	b.n	80060ec <_printf_i+0x1f4>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	6829      	ldr	r1, [r5, #0]
 8005fa8:	0606      	lsls	r6, r0, #24
 8005faa:	f101 0304 	add.w	r3, r1, #4
 8005fae:	d50a      	bpl.n	8005fc6 <_printf_i+0xce>
 8005fb0:	680e      	ldr	r6, [r1, #0]
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	da03      	bge.n	8005fc0 <_printf_i+0xc8>
 8005fb8:	232d      	movs	r3, #45	; 0x2d
 8005fba:	4276      	negs	r6, r6
 8005fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc0:	485e      	ldr	r0, [pc, #376]	; (800613c <_printf_i+0x244>)
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	e019      	b.n	8005ffa <_printf_i+0x102>
 8005fc6:	680e      	ldr	r6, [r1, #0]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fce:	bf18      	it	ne
 8005fd0:	b236      	sxthne	r6, r6
 8005fd2:	e7ef      	b.n	8005fb4 <_printf_i+0xbc>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	1d19      	adds	r1, r3, #4
 8005fda:	6029      	str	r1, [r5, #0]
 8005fdc:	0601      	lsls	r1, r0, #24
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0xec>
 8005fe0:	681e      	ldr	r6, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0xf2>
 8005fe4:	0646      	lsls	r6, r0, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0xe8>
 8005fe8:	881e      	ldrh	r6, [r3, #0]
 8005fea:	4854      	ldr	r0, [pc, #336]	; (800613c <_printf_i+0x244>)
 8005fec:	2f6f      	cmp	r7, #111	; 0x6f
 8005fee:	bf0c      	ite	eq
 8005ff0:	2308      	moveq	r3, #8
 8005ff2:	230a      	movne	r3, #10
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffa:	6865      	ldr	r5, [r4, #4]
 8005ffc:	60a5      	str	r5, [r4, #8]
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	bfa2      	ittt	ge
 8006002:	6821      	ldrge	r1, [r4, #0]
 8006004:	f021 0104 	bicge.w	r1, r1, #4
 8006008:	6021      	strge	r1, [r4, #0]
 800600a:	b90e      	cbnz	r6, 8006010 <_printf_i+0x118>
 800600c:	2d00      	cmp	r5, #0
 800600e:	d04d      	beq.n	80060ac <_printf_i+0x1b4>
 8006010:	4615      	mov	r5, r2
 8006012:	fbb6 f1f3 	udiv	r1, r6, r3
 8006016:	fb03 6711 	mls	r7, r3, r1, r6
 800601a:	5dc7      	ldrb	r7, [r0, r7]
 800601c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006020:	4637      	mov	r7, r6
 8006022:	42bb      	cmp	r3, r7
 8006024:	460e      	mov	r6, r1
 8006026:	d9f4      	bls.n	8006012 <_printf_i+0x11a>
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10b      	bne.n	8006044 <_printf_i+0x14c>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	07de      	lsls	r6, r3, #31
 8006030:	d508      	bpl.n	8006044 <_printf_i+0x14c>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4299      	cmp	r1, r3
 8006038:	bfde      	ittt	le
 800603a:	2330      	movle	r3, #48	; 0x30
 800603c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006044:	1b52      	subs	r2, r2, r5
 8006046:	6122      	str	r2, [r4, #16]
 8006048:	f8cd a000 	str.w	sl, [sp]
 800604c:	464b      	mov	r3, r9
 800604e:	aa03      	add	r2, sp, #12
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fee2 	bl	8005e1c <_printf_common>
 8006058:	3001      	adds	r0, #1
 800605a:	d14c      	bne.n	80060f6 <_printf_i+0x1fe>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	b004      	add	sp, #16
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	4835      	ldr	r0, [pc, #212]	; (800613c <_printf_i+0x244>)
 8006068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800606c:	6829      	ldr	r1, [r5, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f851 6b04 	ldr.w	r6, [r1], #4
 8006074:	6029      	str	r1, [r5, #0]
 8006076:	061d      	lsls	r5, r3, #24
 8006078:	d514      	bpl.n	80060a4 <_printf_i+0x1ac>
 800607a:	07df      	lsls	r7, r3, #31
 800607c:	bf44      	itt	mi
 800607e:	f043 0320 	orrmi.w	r3, r3, #32
 8006082:	6023      	strmi	r3, [r4, #0]
 8006084:	b91e      	cbnz	r6, 800608e <_printf_i+0x196>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f023 0320 	bic.w	r3, r3, #32
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	2310      	movs	r3, #16
 8006090:	e7b0      	b.n	8005ff4 <_printf_i+0xfc>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f043 0320 	orr.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2378      	movs	r3, #120	; 0x78
 800609c:	4828      	ldr	r0, [pc, #160]	; (8006140 <_printf_i+0x248>)
 800609e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a2:	e7e3      	b.n	800606c <_printf_i+0x174>
 80060a4:	0659      	lsls	r1, r3, #25
 80060a6:	bf48      	it	mi
 80060a8:	b2b6      	uxthmi	r6, r6
 80060aa:	e7e6      	b.n	800607a <_printf_i+0x182>
 80060ac:	4615      	mov	r5, r2
 80060ae:	e7bb      	b.n	8006028 <_printf_i+0x130>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	6826      	ldr	r6, [r4, #0]
 80060b4:	6961      	ldr	r1, [r4, #20]
 80060b6:	1d18      	adds	r0, r3, #4
 80060b8:	6028      	str	r0, [r5, #0]
 80060ba:	0635      	lsls	r5, r6, #24
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0x1cc>
 80060c0:	6019      	str	r1, [r3, #0]
 80060c2:	e002      	b.n	80060ca <_printf_i+0x1d2>
 80060c4:	0670      	lsls	r0, r6, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0x1c8>
 80060c8:	8019      	strh	r1, [r3, #0]
 80060ca:	2300      	movs	r3, #0
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	4615      	mov	r5, r2
 80060d0:	e7ba      	b.n	8006048 <_printf_i+0x150>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	602a      	str	r2, [r5, #0]
 80060d8:	681d      	ldr	r5, [r3, #0]
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	2100      	movs	r1, #0
 80060de:	4628      	mov	r0, r5
 80060e0:	f7fa f88e 	bl	8000200 <memchr>
 80060e4:	b108      	cbz	r0, 80060ea <_printf_i+0x1f2>
 80060e6:	1b40      	subs	r0, r0, r5
 80060e8:	6060      	str	r0, [r4, #4]
 80060ea:	6863      	ldr	r3, [r4, #4]
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	2300      	movs	r3, #0
 80060f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f4:	e7a8      	b.n	8006048 <_printf_i+0x150>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	47d0      	blx	sl
 8006100:	3001      	adds	r0, #1
 8006102:	d0ab      	beq.n	800605c <_printf_i+0x164>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	d413      	bmi.n	8006132 <_printf_i+0x23a>
 800610a:	68e0      	ldr	r0, [r4, #12]
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	4298      	cmp	r0, r3
 8006110:	bfb8      	it	lt
 8006112:	4618      	movlt	r0, r3
 8006114:	e7a4      	b.n	8006060 <_printf_i+0x168>
 8006116:	2301      	movs	r3, #1
 8006118:	4632      	mov	r2, r6
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	47d0      	blx	sl
 8006120:	3001      	adds	r0, #1
 8006122:	d09b      	beq.n	800605c <_printf_i+0x164>
 8006124:	3501      	adds	r5, #1
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	9903      	ldr	r1, [sp, #12]
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	42ab      	cmp	r3, r5
 800612e:	dcf2      	bgt.n	8006116 <_printf_i+0x21e>
 8006130:	e7eb      	b.n	800610a <_printf_i+0x212>
 8006132:	2500      	movs	r5, #0
 8006134:	f104 0619 	add.w	r6, r4, #25
 8006138:	e7f5      	b.n	8006126 <_printf_i+0x22e>
 800613a:	bf00      	nop
 800613c:	08007d25 	.word	0x08007d25
 8006140:	08007d36 	.word	0x08007d36

08006144 <_sbrk_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	; (8006160 <_sbrk_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fc fa98 	bl	8002684 <_sbrk>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_sbrk_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_sbrk_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	200001c8 	.word	0x200001c8

08006164 <strcpy>:
 8006164:	4603      	mov	r3, r0
 8006166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800616a:	f803 2b01 	strb.w	r2, [r3], #1
 800616e:	2a00      	cmp	r2, #0
 8006170:	d1f9      	bne.n	8006166 <strcpy+0x2>
 8006172:	4770      	bx	lr

08006174 <__assert_func>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	4614      	mov	r4, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <__assert_func+0x2c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4605      	mov	r5, r0
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	b14c      	cbz	r4, 8006198 <__assert_func+0x24>
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <__assert_func+0x30>)
 8006186:	9100      	str	r1, [sp, #0]
 8006188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618c:	4906      	ldr	r1, [pc, #24]	; (80061a8 <__assert_func+0x34>)
 800618e:	462b      	mov	r3, r5
 8006190:	f000 fe88 	bl	8006ea4 <fiprintf>
 8006194:	f001 f942 	bl	800741c <abort>
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <__assert_func+0x38>)
 800619a:	461c      	mov	r4, r3
 800619c:	e7f3      	b.n	8006186 <__assert_func+0x12>
 800619e:	bf00      	nop
 80061a0:	2000002c 	.word	0x2000002c
 80061a4:	08007d47 	.word	0x08007d47
 80061a8:	08007d54 	.word	0x08007d54
 80061ac:	08007d82 	.word	0x08007d82

080061b0 <quorem>:
 80061b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	6903      	ldr	r3, [r0, #16]
 80061b6:	690c      	ldr	r4, [r1, #16]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	4607      	mov	r7, r0
 80061bc:	f2c0 8081 	blt.w	80062c2 <quorem+0x112>
 80061c0:	3c01      	subs	r4, #1
 80061c2:	f101 0814 	add.w	r8, r1, #20
 80061c6:	f100 0514 	add.w	r5, r0, #20
 80061ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d8:	3301      	adds	r3, #1
 80061da:	429a      	cmp	r2, r3
 80061dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80061e8:	d331      	bcc.n	800624e <quorem+0x9e>
 80061ea:	f04f 0e00 	mov.w	lr, #0
 80061ee:	4640      	mov	r0, r8
 80061f0:	46ac      	mov	ip, r5
 80061f2:	46f2      	mov	sl, lr
 80061f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80061f8:	b293      	uxth	r3, r2
 80061fa:	fb06 e303 	mla	r3, r6, r3, lr
 80061fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006202:	b29b      	uxth	r3, r3
 8006204:	ebaa 0303 	sub.w	r3, sl, r3
 8006208:	f8dc a000 	ldr.w	sl, [ip]
 800620c:	0c12      	lsrs	r2, r2, #16
 800620e:	fa13 f38a 	uxtah	r3, r3, sl
 8006212:	fb06 e202 	mla	r2, r6, r2, lr
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	9b00      	ldr	r3, [sp, #0]
 800621a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800621e:	b292      	uxth	r2, r2
 8006220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006228:	f8bd 3000 	ldrh.w	r3, [sp]
 800622c:	4581      	cmp	r9, r0
 800622e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006232:	f84c 3b04 	str.w	r3, [ip], #4
 8006236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800623a:	d2db      	bcs.n	80061f4 <quorem+0x44>
 800623c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006240:	b92b      	cbnz	r3, 800624e <quorem+0x9e>
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	3b04      	subs	r3, #4
 8006246:	429d      	cmp	r5, r3
 8006248:	461a      	mov	r2, r3
 800624a:	d32e      	bcc.n	80062aa <quorem+0xfa>
 800624c:	613c      	str	r4, [r7, #16]
 800624e:	4638      	mov	r0, r7
 8006250:	f7ff fa90 	bl	8005774 <__mcmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	db24      	blt.n	80062a2 <quorem+0xf2>
 8006258:	3601      	adds	r6, #1
 800625a:	4628      	mov	r0, r5
 800625c:	f04f 0c00 	mov.w	ip, #0
 8006260:	f858 2b04 	ldr.w	r2, [r8], #4
 8006264:	f8d0 e000 	ldr.w	lr, [r0]
 8006268:	b293      	uxth	r3, r2
 800626a:	ebac 0303 	sub.w	r3, ip, r3
 800626e:	0c12      	lsrs	r2, r2, #16
 8006270:	fa13 f38e 	uxtah	r3, r3, lr
 8006274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006282:	45c1      	cmp	r9, r8
 8006284:	f840 3b04 	str.w	r3, [r0], #4
 8006288:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800628c:	d2e8      	bcs.n	8006260 <quorem+0xb0>
 800628e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006296:	b922      	cbnz	r2, 80062a2 <quorem+0xf2>
 8006298:	3b04      	subs	r3, #4
 800629a:	429d      	cmp	r5, r3
 800629c:	461a      	mov	r2, r3
 800629e:	d30a      	bcc.n	80062b6 <quorem+0x106>
 80062a0:	613c      	str	r4, [r7, #16]
 80062a2:	4630      	mov	r0, r6
 80062a4:	b003      	add	sp, #12
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1cc      	bne.n	800624c <quorem+0x9c>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7c7      	b.n	8006246 <quorem+0x96>
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d1f0      	bne.n	80062a0 <quorem+0xf0>
 80062be:	3c01      	subs	r4, #1
 80062c0:	e7eb      	b.n	800629a <quorem+0xea>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7ee      	b.n	80062a4 <quorem+0xf4>
	...

080062c8 <_dtoa_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ed2d 8b04 	vpush	{d8-d9}
 80062d0:	ec57 6b10 	vmov	r6, r7, d0
 80062d4:	b093      	sub	sp, #76	; 0x4c
 80062d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062dc:	9106      	str	r1, [sp, #24]
 80062de:	ee10 aa10 	vmov	sl, s0
 80062e2:	4604      	mov	r4, r0
 80062e4:	9209      	str	r2, [sp, #36]	; 0x24
 80062e6:	930c      	str	r3, [sp, #48]	; 0x30
 80062e8:	46bb      	mov	fp, r7
 80062ea:	b975      	cbnz	r5, 800630a <_dtoa_r+0x42>
 80062ec:	2010      	movs	r0, #16
 80062ee:	f000 fdeb 	bl	8006ec8 <malloc>
 80062f2:	4602      	mov	r2, r0
 80062f4:	6260      	str	r0, [r4, #36]	; 0x24
 80062f6:	b920      	cbnz	r0, 8006302 <_dtoa_r+0x3a>
 80062f8:	4ba7      	ldr	r3, [pc, #668]	; (8006598 <_dtoa_r+0x2d0>)
 80062fa:	21ea      	movs	r1, #234	; 0xea
 80062fc:	48a7      	ldr	r0, [pc, #668]	; (800659c <_dtoa_r+0x2d4>)
 80062fe:	f7ff ff39 	bl	8006174 <__assert_func>
 8006302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006306:	6005      	str	r5, [r0, #0]
 8006308:	60c5      	str	r5, [r0, #12]
 800630a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	b151      	cbz	r1, 8006326 <_dtoa_r+0x5e>
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	604a      	str	r2, [r1, #4]
 8006314:	2301      	movs	r3, #1
 8006316:	4093      	lsls	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
 800631a:	4620      	mov	r0, r4
 800631c:	f7fe ffe8 	bl	80052f0 <_Bfree>
 8006320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	1e3b      	subs	r3, r7, #0
 8006328:	bfaa      	itet	ge
 800632a:	2300      	movge	r3, #0
 800632c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006330:	f8c8 3000 	strge.w	r3, [r8]
 8006334:	4b9a      	ldr	r3, [pc, #616]	; (80065a0 <_dtoa_r+0x2d8>)
 8006336:	bfbc      	itt	lt
 8006338:	2201      	movlt	r2, #1
 800633a:	f8c8 2000 	strlt.w	r2, [r8]
 800633e:	ea33 030b 	bics.w	r3, r3, fp
 8006342:	d11b      	bne.n	800637c <_dtoa_r+0xb4>
 8006344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006346:	f242 730f 	movw	r3, #9999	; 0x270f
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006350:	4333      	orrs	r3, r6
 8006352:	f000 8592 	beq.w	8006e7a <_dtoa_r+0xbb2>
 8006356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006358:	b963      	cbnz	r3, 8006374 <_dtoa_r+0xac>
 800635a:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <_dtoa_r+0x2dc>)
 800635c:	e022      	b.n	80063a4 <_dtoa_r+0xdc>
 800635e:	4b92      	ldr	r3, [pc, #584]	; (80065a8 <_dtoa_r+0x2e0>)
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	3308      	adds	r3, #8
 8006364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	9801      	ldr	r0, [sp, #4]
 800636a:	b013      	add	sp, #76	; 0x4c
 800636c:	ecbd 8b04 	vpop	{d8-d9}
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	4b8b      	ldr	r3, [pc, #556]	; (80065a4 <_dtoa_r+0x2dc>)
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	3303      	adds	r3, #3
 800637a:	e7f3      	b.n	8006364 <_dtoa_r+0x9c>
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	4650      	mov	r0, sl
 8006382:	4659      	mov	r1, fp
 8006384:	f7fa fbb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006388:	ec4b ab19 	vmov	d9, sl, fp
 800638c:	4680      	mov	r8, r0
 800638e:	b158      	cbz	r0, 80063a8 <_dtoa_r+0xe0>
 8006390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006392:	2301      	movs	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 856b 	beq.w	8006e74 <_dtoa_r+0xbac>
 800639e:	4883      	ldr	r0, [pc, #524]	; (80065ac <_dtoa_r+0x2e4>)
 80063a0:	6018      	str	r0, [r3, #0]
 80063a2:	1e43      	subs	r3, r0, #1
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	e7df      	b.n	8006368 <_dtoa_r+0xa0>
 80063a8:	ec4b ab10 	vmov	d0, sl, fp
 80063ac:	aa10      	add	r2, sp, #64	; 0x40
 80063ae:	a911      	add	r1, sp, #68	; 0x44
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fa85 	bl	80058c0 <__d2b>
 80063b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80063ba:	ee08 0a10 	vmov	s16, r0
 80063be:	2d00      	cmp	r5, #0
 80063c0:	f000 8084 	beq.w	80064cc <_dtoa_r+0x204>
 80063c4:	ee19 3a90 	vmov	r3, s19
 80063c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063d0:	4656      	mov	r6, sl
 80063d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80063de:	4b74      	ldr	r3, [pc, #464]	; (80065b0 <_dtoa_r+0x2e8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7f9 ff5f 	bl	80002a8 <__aeabi_dsub>
 80063ea:	a365      	add	r3, pc, #404	; (adr r3, 8006580 <_dtoa_r+0x2b8>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f912 	bl	8000618 <__aeabi_dmul>
 80063f4:	a364      	add	r3, pc, #400	; (adr r3, 8006588 <_dtoa_r+0x2c0>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 ff57 	bl	80002ac <__adddf3>
 80063fe:	4606      	mov	r6, r0
 8006400:	4628      	mov	r0, r5
 8006402:	460f      	mov	r7, r1
 8006404:	f7fa f89e 	bl	8000544 <__aeabi_i2d>
 8006408:	a361      	add	r3, pc, #388	; (adr r3, 8006590 <_dtoa_r+0x2c8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f903 	bl	8000618 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7f9 ff47 	bl	80002ac <__adddf3>
 800641e:	4606      	mov	r6, r0
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa fb93 	bl	8000b4c <__aeabi_d2iz>
 8006426:	2200      	movs	r2, #0
 8006428:	9000      	str	r0, [sp, #0]
 800642a:	2300      	movs	r3, #0
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7fa fb64 	bl	8000afc <__aeabi_dcmplt>
 8006434:	b150      	cbz	r0, 800644c <_dtoa_r+0x184>
 8006436:	9800      	ldr	r0, [sp, #0]
 8006438:	f7fa f884 	bl	8000544 <__aeabi_i2d>
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	f7fa fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 8006444:	b910      	cbnz	r0, 800644c <_dtoa_r+0x184>
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	3b01      	subs	r3, #1
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	9b00      	ldr	r3, [sp, #0]
 800644e:	2b16      	cmp	r3, #22
 8006450:	d85a      	bhi.n	8006508 <_dtoa_r+0x240>
 8006452:	9a00      	ldr	r2, [sp, #0]
 8006454:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <_dtoa_r+0x2ec>)
 8006456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	ec51 0b19 	vmov	r0, r1, d9
 8006462:	f7fa fb4b 	bl	8000afc <__aeabi_dcmplt>
 8006466:	2800      	cmp	r0, #0
 8006468:	d050      	beq.n	800650c <_dtoa_r+0x244>
 800646a:	9b00      	ldr	r3, [sp, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2300      	movs	r3, #0
 8006472:	930b      	str	r3, [sp, #44]	; 0x2c
 8006474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006476:	1b5d      	subs	r5, r3, r5
 8006478:	1e6b      	subs	r3, r5, #1
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	bf45      	ittet	mi
 800647e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006482:	9304      	strmi	r3, [sp, #16]
 8006484:	2300      	movpl	r3, #0
 8006486:	2300      	movmi	r3, #0
 8006488:	bf4c      	ite	mi
 800648a:	9305      	strmi	r3, [sp, #20]
 800648c:	9304      	strpl	r3, [sp, #16]
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	db3d      	blt.n	8006510 <_dtoa_r+0x248>
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	9a00      	ldr	r2, [sp, #0]
 8006498:	920a      	str	r2, [sp, #40]	; 0x28
 800649a:	4413      	add	r3, r2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	2300      	movs	r3, #0
 80064a0:	9307      	str	r3, [sp, #28]
 80064a2:	9b06      	ldr	r3, [sp, #24]
 80064a4:	2b09      	cmp	r3, #9
 80064a6:	f200 8089 	bhi.w	80065bc <_dtoa_r+0x2f4>
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	bfc4      	itt	gt
 80064ae:	3b04      	subgt	r3, #4
 80064b0:	9306      	strgt	r3, [sp, #24]
 80064b2:	9b06      	ldr	r3, [sp, #24]
 80064b4:	f1a3 0302 	sub.w	r3, r3, #2
 80064b8:	bfcc      	ite	gt
 80064ba:	2500      	movgt	r5, #0
 80064bc:	2501      	movle	r5, #1
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f200 8087 	bhi.w	80065d2 <_dtoa_r+0x30a>
 80064c4:	e8df f003 	tbb	[pc, r3]
 80064c8:	59383a2d 	.word	0x59383a2d
 80064cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064d0:	441d      	add	r5, r3
 80064d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	bfc1      	itttt	gt
 80064da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80064e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064ea:	bfda      	itte	le
 80064ec:	f1c3 0320 	rsble	r3, r3, #32
 80064f0:	fa06 f003 	lslle.w	r0, r6, r3
 80064f4:	4318      	orrgt	r0, r3
 80064f6:	f7fa f815 	bl	8000524 <__aeabi_ui2d>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4606      	mov	r6, r0
 80064fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006502:	3d01      	subs	r5, #1
 8006504:	930e      	str	r3, [sp, #56]	; 0x38
 8006506:	e76a      	b.n	80063de <_dtoa_r+0x116>
 8006508:	2301      	movs	r3, #1
 800650a:	e7b2      	b.n	8006472 <_dtoa_r+0x1aa>
 800650c:	900b      	str	r0, [sp, #44]	; 0x2c
 800650e:	e7b1      	b.n	8006474 <_dtoa_r+0x1ac>
 8006510:	9b04      	ldr	r3, [sp, #16]
 8006512:	9a00      	ldr	r2, [sp, #0]
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	4253      	negs	r3, r2
 800651a:	9307      	str	r3, [sp, #28]
 800651c:	2300      	movs	r3, #0
 800651e:	930a      	str	r3, [sp, #40]	; 0x28
 8006520:	e7bf      	b.n	80064a2 <_dtoa_r+0x1da>
 8006522:	2300      	movs	r3, #0
 8006524:	9308      	str	r3, [sp, #32]
 8006526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	dc55      	bgt.n	80065d8 <_dtoa_r+0x310>
 800652c:	2301      	movs	r3, #1
 800652e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006532:	461a      	mov	r2, r3
 8006534:	9209      	str	r2, [sp, #36]	; 0x24
 8006536:	e00c      	b.n	8006552 <_dtoa_r+0x28a>
 8006538:	2301      	movs	r3, #1
 800653a:	e7f3      	b.n	8006524 <_dtoa_r+0x25c>
 800653c:	2300      	movs	r3, #0
 800653e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006540:	9308      	str	r3, [sp, #32]
 8006542:	9b00      	ldr	r3, [sp, #0]
 8006544:	4413      	add	r3, r2
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	3301      	adds	r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	9303      	str	r3, [sp, #12]
 800654e:	bfb8      	it	lt
 8006550:	2301      	movlt	r3, #1
 8006552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006554:	2200      	movs	r2, #0
 8006556:	6042      	str	r2, [r0, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	f102 0614 	add.w	r6, r2, #20
 800655e:	429e      	cmp	r6, r3
 8006560:	6841      	ldr	r1, [r0, #4]
 8006562:	d93d      	bls.n	80065e0 <_dtoa_r+0x318>
 8006564:	4620      	mov	r0, r4
 8006566:	f7fe fe83 	bl	8005270 <_Balloc>
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	2800      	cmp	r0, #0
 800656e:	d13b      	bne.n	80065e8 <_dtoa_r+0x320>
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <_dtoa_r+0x2f0>)
 8006572:	4602      	mov	r2, r0
 8006574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006578:	e6c0      	b.n	80062fc <_dtoa_r+0x34>
 800657a:	2301      	movs	r3, #1
 800657c:	e7df      	b.n	800653e <_dtoa_r+0x276>
 800657e:	bf00      	nop
 8006580:	636f4361 	.word	0x636f4361
 8006584:	3fd287a7 	.word	0x3fd287a7
 8006588:	8b60c8b3 	.word	0x8b60c8b3
 800658c:	3fc68a28 	.word	0x3fc68a28
 8006590:	509f79fb 	.word	0x509f79fb
 8006594:	3fd34413 	.word	0x3fd34413
 8006598:	08007b90 	.word	0x08007b90
 800659c:	08007d92 	.word	0x08007d92
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	08007d8c 	.word	0x08007d8c
 80065a8:	08007d83 	.word	0x08007d83
 80065ac:	08007d91 	.word	0x08007d91
 80065b0:	3ff80000 	.word	0x3ff80000
 80065b4:	08007c40 	.word	0x08007c40
 80065b8:	08007c03 	.word	0x08007c03
 80065bc:	2501      	movs	r5, #1
 80065be:	2300      	movs	r3, #0
 80065c0:	9306      	str	r3, [sp, #24]
 80065c2:	9508      	str	r5, [sp, #32]
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2312      	movs	r3, #18
 80065d0:	e7b0      	b.n	8006534 <_dtoa_r+0x26c>
 80065d2:	2301      	movs	r3, #1
 80065d4:	9308      	str	r3, [sp, #32]
 80065d6:	e7f5      	b.n	80065c4 <_dtoa_r+0x2fc>
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065de:	e7b8      	b.n	8006552 <_dtoa_r+0x28a>
 80065e0:	3101      	adds	r1, #1
 80065e2:	6041      	str	r1, [r0, #4]
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	e7b8      	b.n	800655a <_dtoa_r+0x292>
 80065e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	2b0e      	cmp	r3, #14
 80065f2:	f200 809d 	bhi.w	8006730 <_dtoa_r+0x468>
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	f000 809a 	beq.w	8006730 <_dtoa_r+0x468>
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dd32      	ble.n	8006668 <_dtoa_r+0x3a0>
 8006602:	4ab7      	ldr	r2, [pc, #732]	; (80068e0 <_dtoa_r+0x618>)
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800660c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	05d8      	lsls	r0, r3, #23
 8006614:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006618:	d516      	bpl.n	8006648 <_dtoa_r+0x380>
 800661a:	4bb2      	ldr	r3, [pc, #712]	; (80068e4 <_dtoa_r+0x61c>)
 800661c:	ec51 0b19 	vmov	r0, r1, d9
 8006620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006624:	f7fa f922 	bl	800086c <__aeabi_ddiv>
 8006628:	f007 070f 	and.w	r7, r7, #15
 800662c:	4682      	mov	sl, r0
 800662e:	468b      	mov	fp, r1
 8006630:	2503      	movs	r5, #3
 8006632:	4eac      	ldr	r6, [pc, #688]	; (80068e4 <_dtoa_r+0x61c>)
 8006634:	b957      	cbnz	r7, 800664c <_dtoa_r+0x384>
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	4650      	mov	r0, sl
 800663c:	4659      	mov	r1, fp
 800663e:	f7fa f915 	bl	800086c <__aeabi_ddiv>
 8006642:	4682      	mov	sl, r0
 8006644:	468b      	mov	fp, r1
 8006646:	e028      	b.n	800669a <_dtoa_r+0x3d2>
 8006648:	2502      	movs	r5, #2
 800664a:	e7f2      	b.n	8006632 <_dtoa_r+0x36a>
 800664c:	07f9      	lsls	r1, r7, #31
 800664e:	d508      	bpl.n	8006662 <_dtoa_r+0x39a>
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006658:	f7f9 ffde 	bl	8000618 <__aeabi_dmul>
 800665c:	3501      	adds	r5, #1
 800665e:	4680      	mov	r8, r0
 8006660:	4689      	mov	r9, r1
 8006662:	107f      	asrs	r7, r7, #1
 8006664:	3608      	adds	r6, #8
 8006666:	e7e5      	b.n	8006634 <_dtoa_r+0x36c>
 8006668:	f000 809b 	beq.w	80067a2 <_dtoa_r+0x4da>
 800666c:	9b00      	ldr	r3, [sp, #0]
 800666e:	4f9d      	ldr	r7, [pc, #628]	; (80068e4 <_dtoa_r+0x61c>)
 8006670:	425e      	negs	r6, r3
 8006672:	4b9b      	ldr	r3, [pc, #620]	; (80068e0 <_dtoa_r+0x618>)
 8006674:	f006 020f 	and.w	r2, r6, #15
 8006678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	ec51 0b19 	vmov	r0, r1, d9
 8006684:	f7f9 ffc8 	bl	8000618 <__aeabi_dmul>
 8006688:	1136      	asrs	r6, r6, #4
 800668a:	4682      	mov	sl, r0
 800668c:	468b      	mov	fp, r1
 800668e:	2300      	movs	r3, #0
 8006690:	2502      	movs	r5, #2
 8006692:	2e00      	cmp	r6, #0
 8006694:	d17a      	bne.n	800678c <_dtoa_r+0x4c4>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1d3      	bne.n	8006642 <_dtoa_r+0x37a>
 800669a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8082 	beq.w	80067a6 <_dtoa_r+0x4de>
 80066a2:	4b91      	ldr	r3, [pc, #580]	; (80068e8 <_dtoa_r+0x620>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	4650      	mov	r0, sl
 80066a8:	4659      	mov	r1, fp
 80066aa:	f7fa fa27 	bl	8000afc <__aeabi_dcmplt>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d079      	beq.n	80067a6 <_dtoa_r+0x4de>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d076      	beq.n	80067a6 <_dtoa_r+0x4de>
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dd36      	ble.n	800672c <_dtoa_r+0x464>
 80066be:	9b00      	ldr	r3, [sp, #0]
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	1e5f      	subs	r7, r3, #1
 80066c6:	2200      	movs	r2, #0
 80066c8:	4b88      	ldr	r3, [pc, #544]	; (80068ec <_dtoa_r+0x624>)
 80066ca:	f7f9 ffa5 	bl	8000618 <__aeabi_dmul>
 80066ce:	9e02      	ldr	r6, [sp, #8]
 80066d0:	4682      	mov	sl, r0
 80066d2:	468b      	mov	fp, r1
 80066d4:	3501      	adds	r5, #1
 80066d6:	4628      	mov	r0, r5
 80066d8:	f7f9 ff34 	bl	8000544 <__aeabi_i2d>
 80066dc:	4652      	mov	r2, sl
 80066de:	465b      	mov	r3, fp
 80066e0:	f7f9 ff9a 	bl	8000618 <__aeabi_dmul>
 80066e4:	4b82      	ldr	r3, [pc, #520]	; (80068f0 <_dtoa_r+0x628>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	f7f9 fde0 	bl	80002ac <__adddf3>
 80066ec:	46d0      	mov	r8, sl
 80066ee:	46d9      	mov	r9, fp
 80066f0:	4682      	mov	sl, r0
 80066f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	d158      	bne.n	80067ac <_dtoa_r+0x4e4>
 80066fa:	4b7e      	ldr	r3, [pc, #504]	; (80068f4 <_dtoa_r+0x62c>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	4640      	mov	r0, r8
 8006700:	4649      	mov	r1, r9
 8006702:	f7f9 fdd1 	bl	80002a8 <__aeabi_dsub>
 8006706:	4652      	mov	r2, sl
 8006708:	465b      	mov	r3, fp
 800670a:	4680      	mov	r8, r0
 800670c:	4689      	mov	r9, r1
 800670e:	f7fa fa13 	bl	8000b38 <__aeabi_dcmpgt>
 8006712:	2800      	cmp	r0, #0
 8006714:	f040 8295 	bne.w	8006c42 <_dtoa_r+0x97a>
 8006718:	4652      	mov	r2, sl
 800671a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7fa f9eb 	bl	8000afc <__aeabi_dcmplt>
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 8289 	bne.w	8006c3e <_dtoa_r+0x976>
 800672c:	ec5b ab19 	vmov	sl, fp, d9
 8006730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006732:	2b00      	cmp	r3, #0
 8006734:	f2c0 8148 	blt.w	80069c8 <_dtoa_r+0x700>
 8006738:	9a00      	ldr	r2, [sp, #0]
 800673a:	2a0e      	cmp	r2, #14
 800673c:	f300 8144 	bgt.w	80069c8 <_dtoa_r+0x700>
 8006740:	4b67      	ldr	r3, [pc, #412]	; (80068e0 <_dtoa_r+0x618>)
 8006742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	f280 80d5 	bge.w	80068fc <_dtoa_r+0x634>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f300 80d1 	bgt.w	80068fc <_dtoa_r+0x634>
 800675a:	f040 826f 	bne.w	8006c3c <_dtoa_r+0x974>
 800675e:	4b65      	ldr	r3, [pc, #404]	; (80068f4 <_dtoa_r+0x62c>)
 8006760:	2200      	movs	r2, #0
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 ff57 	bl	8000618 <__aeabi_dmul>
 800676a:	4652      	mov	r2, sl
 800676c:	465b      	mov	r3, fp
 800676e:	f7fa f9d9 	bl	8000b24 <__aeabi_dcmpge>
 8006772:	9e03      	ldr	r6, [sp, #12]
 8006774:	4637      	mov	r7, r6
 8006776:	2800      	cmp	r0, #0
 8006778:	f040 8245 	bne.w	8006c06 <_dtoa_r+0x93e>
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	2331      	movs	r3, #49	; 0x31
 8006780:	f805 3b01 	strb.w	r3, [r5], #1
 8006784:	9b00      	ldr	r3, [sp, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	e240      	b.n	8006c0e <_dtoa_r+0x946>
 800678c:	07f2      	lsls	r2, r6, #31
 800678e:	d505      	bpl.n	800679c <_dtoa_r+0x4d4>
 8006790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006794:	f7f9 ff40 	bl	8000618 <__aeabi_dmul>
 8006798:	3501      	adds	r5, #1
 800679a:	2301      	movs	r3, #1
 800679c:	1076      	asrs	r6, r6, #1
 800679e:	3708      	adds	r7, #8
 80067a0:	e777      	b.n	8006692 <_dtoa_r+0x3ca>
 80067a2:	2502      	movs	r5, #2
 80067a4:	e779      	b.n	800669a <_dtoa_r+0x3d2>
 80067a6:	9f00      	ldr	r7, [sp, #0]
 80067a8:	9e03      	ldr	r6, [sp, #12]
 80067aa:	e794      	b.n	80066d6 <_dtoa_r+0x40e>
 80067ac:	9901      	ldr	r1, [sp, #4]
 80067ae:	4b4c      	ldr	r3, [pc, #304]	; (80068e0 <_dtoa_r+0x618>)
 80067b0:	4431      	add	r1, r6
 80067b2:	910d      	str	r1, [sp, #52]	; 0x34
 80067b4:	9908      	ldr	r1, [sp, #32]
 80067b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067be:	2900      	cmp	r1, #0
 80067c0:	d043      	beq.n	800684a <_dtoa_r+0x582>
 80067c2:	494d      	ldr	r1, [pc, #308]	; (80068f8 <_dtoa_r+0x630>)
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7fa f851 	bl	800086c <__aeabi_ddiv>
 80067ca:	4652      	mov	r2, sl
 80067cc:	465b      	mov	r3, fp
 80067ce:	f7f9 fd6b 	bl	80002a8 <__aeabi_dsub>
 80067d2:	9d01      	ldr	r5, [sp, #4]
 80067d4:	4682      	mov	sl, r0
 80067d6:	468b      	mov	fp, r1
 80067d8:	4649      	mov	r1, r9
 80067da:	4640      	mov	r0, r8
 80067dc:	f7fa f9b6 	bl	8000b4c <__aeabi_d2iz>
 80067e0:	4606      	mov	r6, r0
 80067e2:	f7f9 feaf 	bl	8000544 <__aeabi_i2d>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	f7f9 fd5b 	bl	80002a8 <__aeabi_dsub>
 80067f2:	3630      	adds	r6, #48	; 0x30
 80067f4:	f805 6b01 	strb.w	r6, [r5], #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	465b      	mov	r3, fp
 80067fc:	4680      	mov	r8, r0
 80067fe:	4689      	mov	r9, r1
 8006800:	f7fa f97c 	bl	8000afc <__aeabi_dcmplt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d163      	bne.n	80068d0 <_dtoa_r+0x608>
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	4936      	ldr	r1, [pc, #216]	; (80068e8 <_dtoa_r+0x620>)
 800680e:	2000      	movs	r0, #0
 8006810:	f7f9 fd4a 	bl	80002a8 <__aeabi_dsub>
 8006814:	4652      	mov	r2, sl
 8006816:	465b      	mov	r3, fp
 8006818:	f7fa f970 	bl	8000afc <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	f040 80b5 	bne.w	800698c <_dtoa_r+0x6c4>
 8006822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006824:	429d      	cmp	r5, r3
 8006826:	d081      	beq.n	800672c <_dtoa_r+0x464>
 8006828:	4b30      	ldr	r3, [pc, #192]	; (80068ec <_dtoa_r+0x624>)
 800682a:	2200      	movs	r2, #0
 800682c:	4650      	mov	r0, sl
 800682e:	4659      	mov	r1, fp
 8006830:	f7f9 fef2 	bl	8000618 <__aeabi_dmul>
 8006834:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <_dtoa_r+0x624>)
 8006836:	4682      	mov	sl, r0
 8006838:	468b      	mov	fp, r1
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	2200      	movs	r2, #0
 8006840:	f7f9 feea 	bl	8000618 <__aeabi_dmul>
 8006844:	4680      	mov	r8, r0
 8006846:	4689      	mov	r9, r1
 8006848:	e7c6      	b.n	80067d8 <_dtoa_r+0x510>
 800684a:	4650      	mov	r0, sl
 800684c:	4659      	mov	r1, fp
 800684e:	f7f9 fee3 	bl	8000618 <__aeabi_dmul>
 8006852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006854:	9d01      	ldr	r5, [sp, #4]
 8006856:	930f      	str	r3, [sp, #60]	; 0x3c
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	4649      	mov	r1, r9
 800685e:	4640      	mov	r0, r8
 8006860:	f7fa f974 	bl	8000b4c <__aeabi_d2iz>
 8006864:	4606      	mov	r6, r0
 8006866:	f7f9 fe6d 	bl	8000544 <__aeabi_i2d>
 800686a:	3630      	adds	r6, #48	; 0x30
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7f9 fd18 	bl	80002a8 <__aeabi_dsub>
 8006878:	f805 6b01 	strb.w	r6, [r5], #1
 800687c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687e:	429d      	cmp	r5, r3
 8006880:	4680      	mov	r8, r0
 8006882:	4689      	mov	r9, r1
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	d124      	bne.n	80068d4 <_dtoa_r+0x60c>
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <_dtoa_r+0x630>)
 800688c:	4650      	mov	r0, sl
 800688e:	4659      	mov	r1, fp
 8006890:	f7f9 fd0c 	bl	80002ac <__adddf3>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4640      	mov	r0, r8
 800689a:	4649      	mov	r1, r9
 800689c:	f7fa f94c 	bl	8000b38 <__aeabi_dcmpgt>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d173      	bne.n	800698c <_dtoa_r+0x6c4>
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	4913      	ldr	r1, [pc, #76]	; (80068f8 <_dtoa_r+0x630>)
 80068aa:	2000      	movs	r0, #0
 80068ac:	f7f9 fcfc 	bl	80002a8 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4640      	mov	r0, r8
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7fa f920 	bl	8000afc <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f43f af35 	beq.w	800672c <_dtoa_r+0x464>
 80068c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068c4:	1e6b      	subs	r3, r5, #1
 80068c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d0f8      	beq.n	80068c2 <_dtoa_r+0x5fa>
 80068d0:	9700      	str	r7, [sp, #0]
 80068d2:	e049      	b.n	8006968 <_dtoa_r+0x6a0>
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <_dtoa_r+0x624>)
 80068d6:	f7f9 fe9f 	bl	8000618 <__aeabi_dmul>
 80068da:	4680      	mov	r8, r0
 80068dc:	4689      	mov	r9, r1
 80068de:	e7bd      	b.n	800685c <_dtoa_r+0x594>
 80068e0:	08007c40 	.word	0x08007c40
 80068e4:	08007c18 	.word	0x08007c18
 80068e8:	3ff00000 	.word	0x3ff00000
 80068ec:	40240000 	.word	0x40240000
 80068f0:	401c0000 	.word	0x401c0000
 80068f4:	40140000 	.word	0x40140000
 80068f8:	3fe00000 	.word	0x3fe00000
 80068fc:	9d01      	ldr	r5, [sp, #4]
 80068fe:	4656      	mov	r6, sl
 8006900:	465f      	mov	r7, fp
 8006902:	4642      	mov	r2, r8
 8006904:	464b      	mov	r3, r9
 8006906:	4630      	mov	r0, r6
 8006908:	4639      	mov	r1, r7
 800690a:	f7f9 ffaf 	bl	800086c <__aeabi_ddiv>
 800690e:	f7fa f91d 	bl	8000b4c <__aeabi_d2iz>
 8006912:	4682      	mov	sl, r0
 8006914:	f7f9 fe16 	bl	8000544 <__aeabi_i2d>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	f7f9 fe7c 	bl	8000618 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800692c:	f7f9 fcbc 	bl	80002a8 <__aeabi_dsub>
 8006930:	f805 6b01 	strb.w	r6, [r5], #1
 8006934:	9e01      	ldr	r6, [sp, #4]
 8006936:	9f03      	ldr	r7, [sp, #12]
 8006938:	1bae      	subs	r6, r5, r6
 800693a:	42b7      	cmp	r7, r6
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	d135      	bne.n	80069ae <_dtoa_r+0x6e6>
 8006942:	f7f9 fcb3 	bl	80002ac <__adddf3>
 8006946:	4642      	mov	r2, r8
 8006948:	464b      	mov	r3, r9
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	f7fa f8f3 	bl	8000b38 <__aeabi_dcmpgt>
 8006952:	b9d0      	cbnz	r0, 800698a <_dtoa_r+0x6c2>
 8006954:	4642      	mov	r2, r8
 8006956:	464b      	mov	r3, r9
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7fa f8c4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006960:	b110      	cbz	r0, 8006968 <_dtoa_r+0x6a0>
 8006962:	f01a 0f01 	tst.w	sl, #1
 8006966:	d110      	bne.n	800698a <_dtoa_r+0x6c2>
 8006968:	4620      	mov	r0, r4
 800696a:	ee18 1a10 	vmov	r1, s16
 800696e:	f7fe fcbf 	bl	80052f0 <_Bfree>
 8006972:	2300      	movs	r3, #0
 8006974:	9800      	ldr	r0, [sp, #0]
 8006976:	702b      	strb	r3, [r5, #0]
 8006978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800697a:	3001      	adds	r0, #1
 800697c:	6018      	str	r0, [r3, #0]
 800697e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006980:	2b00      	cmp	r3, #0
 8006982:	f43f acf1 	beq.w	8006368 <_dtoa_r+0xa0>
 8006986:	601d      	str	r5, [r3, #0]
 8006988:	e4ee      	b.n	8006368 <_dtoa_r+0xa0>
 800698a:	9f00      	ldr	r7, [sp, #0]
 800698c:	462b      	mov	r3, r5
 800698e:	461d      	mov	r5, r3
 8006990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006994:	2a39      	cmp	r2, #57	; 0x39
 8006996:	d106      	bne.n	80069a6 <_dtoa_r+0x6de>
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d1f7      	bne.n	800698e <_dtoa_r+0x6c6>
 800699e:	9901      	ldr	r1, [sp, #4]
 80069a0:	2230      	movs	r2, #48	; 0x30
 80069a2:	3701      	adds	r7, #1
 80069a4:	700a      	strb	r2, [r1, #0]
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	3201      	adds	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	e790      	b.n	80068d0 <_dtoa_r+0x608>
 80069ae:	4ba6      	ldr	r3, [pc, #664]	; (8006c48 <_dtoa_r+0x980>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	f7f9 fe31 	bl	8000618 <__aeabi_dmul>
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4606      	mov	r6, r0
 80069bc:	460f      	mov	r7, r1
 80069be:	f7fa f893 	bl	8000ae8 <__aeabi_dcmpeq>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d09d      	beq.n	8006902 <_dtoa_r+0x63a>
 80069c6:	e7cf      	b.n	8006968 <_dtoa_r+0x6a0>
 80069c8:	9a08      	ldr	r2, [sp, #32]
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	f000 80d7 	beq.w	8006b7e <_dtoa_r+0x8b6>
 80069d0:	9a06      	ldr	r2, [sp, #24]
 80069d2:	2a01      	cmp	r2, #1
 80069d4:	f300 80ba 	bgt.w	8006b4c <_dtoa_r+0x884>
 80069d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069da:	2a00      	cmp	r2, #0
 80069dc:	f000 80b2 	beq.w	8006b44 <_dtoa_r+0x87c>
 80069e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069e4:	9e07      	ldr	r6, [sp, #28]
 80069e6:	9d04      	ldr	r5, [sp, #16]
 80069e8:	9a04      	ldr	r2, [sp, #16]
 80069ea:	441a      	add	r2, r3
 80069ec:	9204      	str	r2, [sp, #16]
 80069ee:	9a05      	ldr	r2, [sp, #20]
 80069f0:	2101      	movs	r1, #1
 80069f2:	441a      	add	r2, r3
 80069f4:	4620      	mov	r0, r4
 80069f6:	9205      	str	r2, [sp, #20]
 80069f8:	f7fe fd32 	bl	8005460 <__i2b>
 80069fc:	4607      	mov	r7, r0
 80069fe:	2d00      	cmp	r5, #0
 8006a00:	dd0c      	ble.n	8006a1c <_dtoa_r+0x754>
 8006a02:	9b05      	ldr	r3, [sp, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dd09      	ble.n	8006a1c <_dtoa_r+0x754>
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	9a04      	ldr	r2, [sp, #16]
 8006a0c:	bfa8      	it	ge
 8006a0e:	462b      	movge	r3, r5
 8006a10:	1ad2      	subs	r2, r2, r3
 8006a12:	9204      	str	r2, [sp, #16]
 8006a14:	9a05      	ldr	r2, [sp, #20]
 8006a16:	1aed      	subs	r5, r5, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	b31b      	cbz	r3, 8006a68 <_dtoa_r+0x7a0>
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80af 	beq.w	8006b86 <_dtoa_r+0x8be>
 8006a28:	2e00      	cmp	r6, #0
 8006a2a:	dd13      	ble.n	8006a54 <_dtoa_r+0x78c>
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4632      	mov	r2, r6
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7fe fdd5 	bl	80055e0 <__pow5mult>
 8006a36:	ee18 2a10 	vmov	r2, s16
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7fe fd24 	bl	800548c <__multiply>
 8006a44:	ee18 1a10 	vmov	r1, s16
 8006a48:	4680      	mov	r8, r0
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7fe fc50 	bl	80052f0 <_Bfree>
 8006a50:	ee08 8a10 	vmov	s16, r8
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	1b9a      	subs	r2, r3, r6
 8006a58:	d006      	beq.n	8006a68 <_dtoa_r+0x7a0>
 8006a5a:	ee18 1a10 	vmov	r1, s16
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7fe fdbe 	bl	80055e0 <__pow5mult>
 8006a64:	ee08 0a10 	vmov	s16, r0
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7fe fcf8 	bl	8005460 <__i2b>
 8006a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	4606      	mov	r6, r0
 8006a76:	f340 8088 	ble.w	8006b8a <_dtoa_r+0x8c2>
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7fe fdae 	bl	80055e0 <__pow5mult>
 8006a84:	9b06      	ldr	r3, [sp, #24]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	4606      	mov	r6, r0
 8006a8a:	f340 8081 	ble.w	8006b90 <_dtoa_r+0x8c8>
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	6933      	ldr	r3, [r6, #16]
 8006a94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a98:	6918      	ldr	r0, [r3, #16]
 8006a9a:	f7fe fc91 	bl	80053c0 <__hi0bits>
 8006a9e:	f1c0 0020 	rsb	r0, r0, #32
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	4418      	add	r0, r3
 8006aa6:	f010 001f 	ands.w	r0, r0, #31
 8006aaa:	f000 8092 	beq.w	8006bd2 <_dtoa_r+0x90a>
 8006aae:	f1c0 0320 	rsb	r3, r0, #32
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	f340 808a 	ble.w	8006bcc <_dtoa_r+0x904>
 8006ab8:	f1c0 001c 	rsb	r0, r0, #28
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	4403      	add	r3, r0
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	4403      	add	r3, r0
 8006ac6:	4405      	add	r5, r0
 8006ac8:	9305      	str	r3, [sp, #20]
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dd07      	ble.n	8006ae0 <_dtoa_r+0x818>
 8006ad0:	ee18 1a10 	vmov	r1, s16
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7fe fddc 	bl	8005694 <__lshift>
 8006adc:	ee08 0a10 	vmov	s16, r0
 8006ae0:	9b05      	ldr	r3, [sp, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dd05      	ble.n	8006af2 <_dtoa_r+0x82a>
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7fe fdd2 	bl	8005694 <__lshift>
 8006af0:	4606      	mov	r6, r0
 8006af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d06e      	beq.n	8006bd6 <_dtoa_r+0x90e>
 8006af8:	ee18 0a10 	vmov	r0, s16
 8006afc:	4631      	mov	r1, r6
 8006afe:	f7fe fe39 	bl	8005774 <__mcmp>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	da67      	bge.n	8006bd6 <_dtoa_r+0x90e>
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	ee18 1a10 	vmov	r1, s16
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	220a      	movs	r2, #10
 8006b12:	2300      	movs	r3, #0
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fe fc0d 	bl	8005334 <__multadd>
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	ee08 0a10 	vmov	s16, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 81b1 	beq.w	8006e88 <_dtoa_r+0xbc0>
 8006b26:	2300      	movs	r3, #0
 8006b28:	4639      	mov	r1, r7
 8006b2a:	220a      	movs	r2, #10
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7fe fc01 	bl	8005334 <__multadd>
 8006b32:	9b02      	ldr	r3, [sp, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	4607      	mov	r7, r0
 8006b38:	f300 808e 	bgt.w	8006c58 <_dtoa_r+0x990>
 8006b3c:	9b06      	ldr	r3, [sp, #24]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	dc51      	bgt.n	8006be6 <_dtoa_r+0x91e>
 8006b42:	e089      	b.n	8006c58 <_dtoa_r+0x990>
 8006b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b4a:	e74b      	b.n	80069e4 <_dtoa_r+0x71c>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1e5e      	subs	r6, r3, #1
 8006b50:	9b07      	ldr	r3, [sp, #28]
 8006b52:	42b3      	cmp	r3, r6
 8006b54:	bfbf      	itttt	lt
 8006b56:	9b07      	ldrlt	r3, [sp, #28]
 8006b58:	9607      	strlt	r6, [sp, #28]
 8006b5a:	1af2      	sublt	r2, r6, r3
 8006b5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b5e:	bfb6      	itet	lt
 8006b60:	189b      	addlt	r3, r3, r2
 8006b62:	1b9e      	subge	r6, r3, r6
 8006b64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	bfb8      	it	lt
 8006b6a:	2600      	movlt	r6, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bfb7      	itett	lt
 8006b70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b78:	1a9d      	sublt	r5, r3, r2
 8006b7a:	2300      	movlt	r3, #0
 8006b7c:	e734      	b.n	80069e8 <_dtoa_r+0x720>
 8006b7e:	9e07      	ldr	r6, [sp, #28]
 8006b80:	9d04      	ldr	r5, [sp, #16]
 8006b82:	9f08      	ldr	r7, [sp, #32]
 8006b84:	e73b      	b.n	80069fe <_dtoa_r+0x736>
 8006b86:	9a07      	ldr	r2, [sp, #28]
 8006b88:	e767      	b.n	8006a5a <_dtoa_r+0x792>
 8006b8a:	9b06      	ldr	r3, [sp, #24]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	dc18      	bgt.n	8006bc2 <_dtoa_r+0x8fa>
 8006b90:	f1ba 0f00 	cmp.w	sl, #0
 8006b94:	d115      	bne.n	8006bc2 <_dtoa_r+0x8fa>
 8006b96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b9a:	b993      	cbnz	r3, 8006bc2 <_dtoa_r+0x8fa>
 8006b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ba0:	0d1b      	lsrs	r3, r3, #20
 8006ba2:	051b      	lsls	r3, r3, #20
 8006ba4:	b183      	cbz	r3, 8006bc8 <_dtoa_r+0x900>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	9b05      	ldr	r3, [sp, #20]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	f04f 0801 	mov.w	r8, #1
 8006bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f47f af6a 	bne.w	8006a92 <_dtoa_r+0x7ca>
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	e76f      	b.n	8006aa2 <_dtoa_r+0x7da>
 8006bc2:	f04f 0800 	mov.w	r8, #0
 8006bc6:	e7f6      	b.n	8006bb6 <_dtoa_r+0x8ee>
 8006bc8:	4698      	mov	r8, r3
 8006bca:	e7f4      	b.n	8006bb6 <_dtoa_r+0x8ee>
 8006bcc:	f43f af7d 	beq.w	8006aca <_dtoa_r+0x802>
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	301c      	adds	r0, #28
 8006bd4:	e772      	b.n	8006abc <_dtoa_r+0x7f4>
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dc37      	bgt.n	8006c4c <_dtoa_r+0x984>
 8006bdc:	9b06      	ldr	r3, [sp, #24]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	dd34      	ble.n	8006c4c <_dtoa_r+0x984>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	9302      	str	r3, [sp, #8]
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	b96b      	cbnz	r3, 8006c06 <_dtoa_r+0x93e>
 8006bea:	4631      	mov	r1, r6
 8006bec:	2205      	movs	r2, #5
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7fe fba0 	bl	8005334 <__multadd>
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	ee18 0a10 	vmov	r0, s16
 8006bfc:	f7fe fdba 	bl	8005774 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f73f adbb 	bgt.w	800677c <_dtoa_r+0x4b4>
 8006c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c08:	9d01      	ldr	r5, [sp, #4]
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	4631      	mov	r1, r6
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fe fb6b 	bl	80052f0 <_Bfree>
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	f43f aea4 	beq.w	8006968 <_dtoa_r+0x6a0>
 8006c20:	f1b8 0f00 	cmp.w	r8, #0
 8006c24:	d005      	beq.n	8006c32 <_dtoa_r+0x96a>
 8006c26:	45b8      	cmp	r8, r7
 8006c28:	d003      	beq.n	8006c32 <_dtoa_r+0x96a>
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7fe fb5f 	bl	80052f0 <_Bfree>
 8006c32:	4639      	mov	r1, r7
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7fe fb5b 	bl	80052f0 <_Bfree>
 8006c3a:	e695      	b.n	8006968 <_dtoa_r+0x6a0>
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	4637      	mov	r7, r6
 8006c40:	e7e1      	b.n	8006c06 <_dtoa_r+0x93e>
 8006c42:	9700      	str	r7, [sp, #0]
 8006c44:	4637      	mov	r7, r6
 8006c46:	e599      	b.n	800677c <_dtoa_r+0x4b4>
 8006c48:	40240000 	.word	0x40240000
 8006c4c:	9b08      	ldr	r3, [sp, #32]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80ca 	beq.w	8006de8 <_dtoa_r+0xb20>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	dd05      	ble.n	8006c68 <_dtoa_r+0x9a0>
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7fe fd17 	bl	8005694 <__lshift>
 8006c66:	4607      	mov	r7, r0
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	d05b      	beq.n	8006d26 <_dtoa_r+0xa5e>
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7fe fafd 	bl	8005270 <_Balloc>
 8006c76:	4605      	mov	r5, r0
 8006c78:	b928      	cbnz	r0, 8006c86 <_dtoa_r+0x9be>
 8006c7a:	4b87      	ldr	r3, [pc, #540]	; (8006e98 <_dtoa_r+0xbd0>)
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c82:	f7ff bb3b 	b.w	80062fc <_dtoa_r+0x34>
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	3202      	adds	r2, #2
 8006c8a:	0092      	lsls	r2, r2, #2
 8006c8c:	f107 010c 	add.w	r1, r7, #12
 8006c90:	300c      	adds	r0, #12
 8006c92:	f000 f921 	bl	8006ed8 <memcpy>
 8006c96:	2201      	movs	r2, #1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7fe fcfa 	bl	8005694 <__lshift>
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	f103 0901 	add.w	r9, r3, #1
 8006ca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	f00a 0301 	and.w	r3, sl, #1
 8006cb2:	46b8      	mov	r8, r7
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	4631      	mov	r1, r6
 8006cba:	ee18 0a10 	vmov	r0, s16
 8006cbe:	f7ff fa77 	bl	80061b0 <quorem>
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	9002      	str	r0, [sp, #8]
 8006cc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006cca:	ee18 0a10 	vmov	r0, s16
 8006cce:	f7fe fd51 	bl	8005774 <__mcmp>
 8006cd2:	463a      	mov	r2, r7
 8006cd4:	9003      	str	r0, [sp, #12]
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7fe fd67 	bl	80057ac <__mdiff>
 8006cde:	68c2      	ldr	r2, [r0, #12]
 8006ce0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	bb02      	cbnz	r2, 8006d2a <_dtoa_r+0xa62>
 8006ce8:	4601      	mov	r1, r0
 8006cea:	ee18 0a10 	vmov	r0, s16
 8006cee:	f7fe fd41 	bl	8005774 <__mcmp>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	f7fe faf9 	bl	80052f0 <_Bfree>
 8006cfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d02:	ea43 0102 	orr.w	r1, r3, r2
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	464d      	mov	r5, r9
 8006d0c:	d10f      	bne.n	8006d2e <_dtoa_r+0xa66>
 8006d0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d12:	d02a      	beq.n	8006d6a <_dtoa_r+0xaa2>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dd02      	ble.n	8006d20 <_dtoa_r+0xa58>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006d20:	f88b a000 	strb.w	sl, [fp]
 8006d24:	e775      	b.n	8006c12 <_dtoa_r+0x94a>
 8006d26:	4638      	mov	r0, r7
 8006d28:	e7ba      	b.n	8006ca0 <_dtoa_r+0x9d8>
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	e7e2      	b.n	8006cf4 <_dtoa_r+0xa2c>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	db04      	blt.n	8006d3e <_dtoa_r+0xa76>
 8006d34:	9906      	ldr	r1, [sp, #24]
 8006d36:	430b      	orrs	r3, r1
 8006d38:	9904      	ldr	r1, [sp, #16]
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	d122      	bne.n	8006d84 <_dtoa_r+0xabc>
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	ddee      	ble.n	8006d20 <_dtoa_r+0xa58>
 8006d42:	ee18 1a10 	vmov	r1, s16
 8006d46:	2201      	movs	r2, #1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7fe fca3 	bl	8005694 <__lshift>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	ee08 0a10 	vmov	s16, r0
 8006d54:	f7fe fd0e 	bl	8005774 <__mcmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	dc03      	bgt.n	8006d64 <_dtoa_r+0xa9c>
 8006d5c:	d1e0      	bne.n	8006d20 <_dtoa_r+0xa58>
 8006d5e:	f01a 0f01 	tst.w	sl, #1
 8006d62:	d0dd      	beq.n	8006d20 <_dtoa_r+0xa58>
 8006d64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d68:	d1d7      	bne.n	8006d1a <_dtoa_r+0xa52>
 8006d6a:	2339      	movs	r3, #57	; 0x39
 8006d6c:	f88b 3000 	strb.w	r3, [fp]
 8006d70:	462b      	mov	r3, r5
 8006d72:	461d      	mov	r5, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d7a:	2a39      	cmp	r2, #57	; 0x39
 8006d7c:	d071      	beq.n	8006e62 <_dtoa_r+0xb9a>
 8006d7e:	3201      	adds	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e746      	b.n	8006c12 <_dtoa_r+0x94a>
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	dd07      	ble.n	8006d98 <_dtoa_r+0xad0>
 8006d88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d8c:	d0ed      	beq.n	8006d6a <_dtoa_r+0xaa2>
 8006d8e:	f10a 0301 	add.w	r3, sl, #1
 8006d92:	f88b 3000 	strb.w	r3, [fp]
 8006d96:	e73c      	b.n	8006c12 <_dtoa_r+0x94a>
 8006d98:	9b05      	ldr	r3, [sp, #20]
 8006d9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d9e:	4599      	cmp	r9, r3
 8006da0:	d047      	beq.n	8006e32 <_dtoa_r+0xb6a>
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2300      	movs	r3, #0
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f7fe fac2 	bl	8005334 <__multadd>
 8006db0:	45b8      	cmp	r8, r7
 8006db2:	ee08 0a10 	vmov	s16, r0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	f04f 020a 	mov.w	r2, #10
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	d106      	bne.n	8006dd2 <_dtoa_r+0xb0a>
 8006dc4:	f7fe fab6 	bl	8005334 <__multadd>
 8006dc8:	4680      	mov	r8, r0
 8006dca:	4607      	mov	r7, r0
 8006dcc:	f109 0901 	add.w	r9, r9, #1
 8006dd0:	e772      	b.n	8006cb8 <_dtoa_r+0x9f0>
 8006dd2:	f7fe faaf 	bl	8005334 <__multadd>
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	4680      	mov	r8, r0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	220a      	movs	r2, #10
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7fe faa8 	bl	8005334 <__multadd>
 8006de4:	4607      	mov	r7, r0
 8006de6:	e7f1      	b.n	8006dcc <_dtoa_r+0xb04>
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	9302      	str	r3, [sp, #8]
 8006dec:	9d01      	ldr	r5, [sp, #4]
 8006dee:	ee18 0a10 	vmov	r0, s16
 8006df2:	4631      	mov	r1, r6
 8006df4:	f7ff f9dc 	bl	80061b0 <quorem>
 8006df8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dfc:	9b01      	ldr	r3, [sp, #4]
 8006dfe:	f805 ab01 	strb.w	sl, [r5], #1
 8006e02:	1aea      	subs	r2, r5, r3
 8006e04:	9b02      	ldr	r3, [sp, #8]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	dd09      	ble.n	8006e1e <_dtoa_r+0xb56>
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	2300      	movs	r3, #0
 8006e10:	220a      	movs	r2, #10
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7fe fa8e 	bl	8005334 <__multadd>
 8006e18:	ee08 0a10 	vmov	s16, r0
 8006e1c:	e7e7      	b.n	8006dee <_dtoa_r+0xb26>
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bfc8      	it	gt
 8006e24:	461d      	movgt	r5, r3
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	bfd8      	it	le
 8006e2a:	2501      	movle	r5, #1
 8006e2c:	441d      	add	r5, r3
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	ee18 1a10 	vmov	r1, s16
 8006e36:	2201      	movs	r2, #1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7fe fc2b 	bl	8005694 <__lshift>
 8006e3e:	4631      	mov	r1, r6
 8006e40:	ee08 0a10 	vmov	s16, r0
 8006e44:	f7fe fc96 	bl	8005774 <__mcmp>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dc91      	bgt.n	8006d70 <_dtoa_r+0xaa8>
 8006e4c:	d102      	bne.n	8006e54 <_dtoa_r+0xb8c>
 8006e4e:	f01a 0f01 	tst.w	sl, #1
 8006e52:	d18d      	bne.n	8006d70 <_dtoa_r+0xaa8>
 8006e54:	462b      	mov	r3, r5
 8006e56:	461d      	mov	r5, r3
 8006e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5c:	2a30      	cmp	r2, #48	; 0x30
 8006e5e:	d0fa      	beq.n	8006e56 <_dtoa_r+0xb8e>
 8006e60:	e6d7      	b.n	8006c12 <_dtoa_r+0x94a>
 8006e62:	9a01      	ldr	r2, [sp, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d184      	bne.n	8006d72 <_dtoa_r+0xaaa>
 8006e68:	9b00      	ldr	r3, [sp, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	2331      	movs	r3, #49	; 0x31
 8006e70:	7013      	strb	r3, [r2, #0]
 8006e72:	e6ce      	b.n	8006c12 <_dtoa_r+0x94a>
 8006e74:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <_dtoa_r+0xbd4>)
 8006e76:	f7ff ba95 	b.w	80063a4 <_dtoa_r+0xdc>
 8006e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f47f aa6e 	bne.w	800635e <_dtoa_r+0x96>
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <_dtoa_r+0xbd8>)
 8006e84:	f7ff ba8e 	b.w	80063a4 <_dtoa_r+0xdc>
 8006e88:	9b02      	ldr	r3, [sp, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dcae      	bgt.n	8006dec <_dtoa_r+0xb24>
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	f73f aea8 	bgt.w	8006be6 <_dtoa_r+0x91e>
 8006e96:	e7a9      	b.n	8006dec <_dtoa_r+0xb24>
 8006e98:	08007c03 	.word	0x08007c03
 8006e9c:	08007d90 	.word	0x08007d90
 8006ea0:	08007d83 	.word	0x08007d83

08006ea4 <fiprintf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b503      	push	{r0, r1, lr}
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <fiprintf+0x20>)
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	6800      	ldr	r0, [r0, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	f000 f8c1 	bl	800703c <_vfiprintf_r>
 8006eba:	b002      	add	sp, #8
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	2000002c 	.word	0x2000002c

08006ec8 <malloc>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <malloc+0xc>)
 8006eca:	4601      	mov	r1, r0
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	f7fe bda7 	b.w	8005a20 <_malloc_r>
 8006ed2:	bf00      	nop
 8006ed4:	2000002c 	.word	0x2000002c

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <memmove>:
 8006ef4:	4288      	cmp	r0, r1
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	eb01 0402 	add.w	r4, r1, r2
 8006efc:	d902      	bls.n	8006f04 <memmove+0x10>
 8006efe:	4284      	cmp	r4, r0
 8006f00:	4623      	mov	r3, r4
 8006f02:	d807      	bhi.n	8006f14 <memmove+0x20>
 8006f04:	1e43      	subs	r3, r0, #1
 8006f06:	42a1      	cmp	r1, r4
 8006f08:	d008      	beq.n	8006f1c <memmove+0x28>
 8006f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f12:	e7f8      	b.n	8006f06 <memmove+0x12>
 8006f14:	4402      	add	r2, r0
 8006f16:	4601      	mov	r1, r0
 8006f18:	428a      	cmp	r2, r1
 8006f1a:	d100      	bne.n	8006f1e <memmove+0x2a>
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f26:	e7f7      	b.n	8006f18 <memmove+0x24>

08006f28 <__malloc_lock>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__malloc_lock+0x8>)
 8006f2a:	f000 bc37 	b.w	800779c <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	200001cc 	.word	0x200001cc

08006f34 <__malloc_unlock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_unlock+0x8>)
 8006f36:	f000 bc32 	b.w	800779e <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	200001cc 	.word	0x200001cc

08006f40 <_free_r>:
 8006f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d044      	beq.n	8006fd0 <_free_r+0x90>
 8006f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4a:	9001      	str	r0, [sp, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f52:	bfb8      	it	lt
 8006f54:	18e4      	addlt	r4, r4, r3
 8006f56:	f7ff ffe7 	bl	8006f28 <__malloc_lock>
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <_free_r+0x94>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	b933      	cbnz	r3, 8006f70 <_free_r+0x30>
 8006f62:	6063      	str	r3, [r4, #4]
 8006f64:	6014      	str	r4, [r2, #0]
 8006f66:	b003      	add	sp, #12
 8006f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6c:	f7ff bfe2 	b.w	8006f34 <__malloc_unlock>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d908      	bls.n	8006f86 <_free_r+0x46>
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	1961      	adds	r1, r4, r5
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	bf01      	itttt	eq
 8006f7c:	6819      	ldreq	r1, [r3, #0]
 8006f7e:	685b      	ldreq	r3, [r3, #4]
 8006f80:	1949      	addeq	r1, r1, r5
 8006f82:	6021      	streq	r1, [r4, #0]
 8006f84:	e7ed      	b.n	8006f62 <_free_r+0x22>
 8006f86:	461a      	mov	r2, r3
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b10b      	cbz	r3, 8006f90 <_free_r+0x50>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d9fa      	bls.n	8006f86 <_free_r+0x46>
 8006f90:	6811      	ldr	r1, [r2, #0]
 8006f92:	1855      	adds	r5, r2, r1
 8006f94:	42a5      	cmp	r5, r4
 8006f96:	d10b      	bne.n	8006fb0 <_free_r+0x70>
 8006f98:	6824      	ldr	r4, [r4, #0]
 8006f9a:	4421      	add	r1, r4
 8006f9c:	1854      	adds	r4, r2, r1
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	d1e0      	bne.n	8006f66 <_free_r+0x26>
 8006fa4:	681c      	ldr	r4, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6053      	str	r3, [r2, #4]
 8006faa:	4421      	add	r1, r4
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	e7da      	b.n	8006f66 <_free_r+0x26>
 8006fb0:	d902      	bls.n	8006fb8 <_free_r+0x78>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	e7d6      	b.n	8006f66 <_free_r+0x26>
 8006fb8:	6825      	ldr	r5, [r4, #0]
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf04      	itt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	bf04      	itt	eq
 8006fc8:	1949      	addeq	r1, r1, r5
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	6054      	str	r4, [r2, #4]
 8006fce:	e7ca      	b.n	8006f66 <_free_r+0x26>
 8006fd0:	b003      	add	sp, #12
 8006fd2:	bd30      	pop	{r4, r5, pc}
 8006fd4:	200001c0 	.word	0x200001c0

08006fd8 <_malloc_usable_size_r>:
 8006fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fdc:	1f18      	subs	r0, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfbc      	itt	lt
 8006fe2:	580b      	ldrlt	r3, [r1, r0]
 8006fe4:	18c0      	addlt	r0, r0, r3
 8006fe6:	4770      	bx	lr

08006fe8 <__sfputc_r>:
 8006fe8:	6893      	ldr	r3, [r2, #8]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	b410      	push	{r4}
 8006ff0:	6093      	str	r3, [r2, #8]
 8006ff2:	da08      	bge.n	8007006 <__sfputc_r+0x1e>
 8006ff4:	6994      	ldr	r4, [r2, #24]
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	db01      	blt.n	8006ffe <__sfputc_r+0x16>
 8006ffa:	290a      	cmp	r1, #10
 8006ffc:	d103      	bne.n	8007006 <__sfputc_r+0x1e>
 8006ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007002:	f000 b94b 	b.w	800729c <__swbuf_r>
 8007006:	6813      	ldr	r3, [r2, #0]
 8007008:	1c58      	adds	r0, r3, #1
 800700a:	6010      	str	r0, [r2, #0]
 800700c:	7019      	strb	r1, [r3, #0]
 800700e:	4608      	mov	r0, r1
 8007010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007014:	4770      	bx	lr

08007016 <__sfputs_r>:
 8007016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007018:	4606      	mov	r6, r0
 800701a:	460f      	mov	r7, r1
 800701c:	4614      	mov	r4, r2
 800701e:	18d5      	adds	r5, r2, r3
 8007020:	42ac      	cmp	r4, r5
 8007022:	d101      	bne.n	8007028 <__sfputs_r+0x12>
 8007024:	2000      	movs	r0, #0
 8007026:	e007      	b.n	8007038 <__sfputs_r+0x22>
 8007028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702c:	463a      	mov	r2, r7
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ffda 	bl	8006fe8 <__sfputc_r>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d1f3      	bne.n	8007020 <__sfputs_r+0xa>
 8007038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800703c <_vfiprintf_r>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	b09d      	sub	sp, #116	; 0x74
 8007044:	4614      	mov	r4, r2
 8007046:	4698      	mov	r8, r3
 8007048:	4606      	mov	r6, r0
 800704a:	b118      	cbz	r0, 8007054 <_vfiprintf_r+0x18>
 800704c:	6983      	ldr	r3, [r0, #24]
 800704e:	b90b      	cbnz	r3, 8007054 <_vfiprintf_r+0x18>
 8007050:	f000 fb06 	bl	8007660 <__sinit>
 8007054:	4b89      	ldr	r3, [pc, #548]	; (800727c <_vfiprintf_r+0x240>)
 8007056:	429d      	cmp	r5, r3
 8007058:	d11b      	bne.n	8007092 <_vfiprintf_r+0x56>
 800705a:	6875      	ldr	r5, [r6, #4]
 800705c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705e:	07d9      	lsls	r1, r3, #31
 8007060:	d405      	bmi.n	800706e <_vfiprintf_r+0x32>
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	059a      	lsls	r2, r3, #22
 8007066:	d402      	bmi.n	800706e <_vfiprintf_r+0x32>
 8007068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706a:	f000 fb97 	bl	800779c <__retarget_lock_acquire_recursive>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	071b      	lsls	r3, r3, #28
 8007072:	d501      	bpl.n	8007078 <_vfiprintf_r+0x3c>
 8007074:	692b      	ldr	r3, [r5, #16]
 8007076:	b9eb      	cbnz	r3, 80070b4 <_vfiprintf_r+0x78>
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f960 	bl	8007340 <__swsetup_r>
 8007080:	b1c0      	cbz	r0, 80070b4 <_vfiprintf_r+0x78>
 8007082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007084:	07dc      	lsls	r4, r3, #31
 8007086:	d50e      	bpl.n	80070a6 <_vfiprintf_r+0x6a>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	b01d      	add	sp, #116	; 0x74
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	4b7b      	ldr	r3, [pc, #492]	; (8007280 <_vfiprintf_r+0x244>)
 8007094:	429d      	cmp	r5, r3
 8007096:	d101      	bne.n	800709c <_vfiprintf_r+0x60>
 8007098:	68b5      	ldr	r5, [r6, #8]
 800709a:	e7df      	b.n	800705c <_vfiprintf_r+0x20>
 800709c:	4b79      	ldr	r3, [pc, #484]	; (8007284 <_vfiprintf_r+0x248>)
 800709e:	429d      	cmp	r5, r3
 80070a0:	bf08      	it	eq
 80070a2:	68f5      	ldreq	r5, [r6, #12]
 80070a4:	e7da      	b.n	800705c <_vfiprintf_r+0x20>
 80070a6:	89ab      	ldrh	r3, [r5, #12]
 80070a8:	0598      	lsls	r0, r3, #22
 80070aa:	d4ed      	bmi.n	8007088 <_vfiprintf_r+0x4c>
 80070ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ae:	f000 fb76 	bl	800779e <__retarget_lock_release_recursive>
 80070b2:	e7e9      	b.n	8007088 <_vfiprintf_r+0x4c>
 80070b4:	2300      	movs	r3, #0
 80070b6:	9309      	str	r3, [sp, #36]	; 0x24
 80070b8:	2320      	movs	r3, #32
 80070ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070be:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c2:	2330      	movs	r3, #48	; 0x30
 80070c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007288 <_vfiprintf_r+0x24c>
 80070c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070cc:	f04f 0901 	mov.w	r9, #1
 80070d0:	4623      	mov	r3, r4
 80070d2:	469a      	mov	sl, r3
 80070d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d8:	b10a      	cbz	r2, 80070de <_vfiprintf_r+0xa2>
 80070da:	2a25      	cmp	r2, #37	; 0x25
 80070dc:	d1f9      	bne.n	80070d2 <_vfiprintf_r+0x96>
 80070de:	ebba 0b04 	subs.w	fp, sl, r4
 80070e2:	d00b      	beq.n	80070fc <_vfiprintf_r+0xc0>
 80070e4:	465b      	mov	r3, fp
 80070e6:	4622      	mov	r2, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7ff ff93 	bl	8007016 <__sfputs_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	f000 80aa 	beq.w	800724a <_vfiprintf_r+0x20e>
 80070f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f8:	445a      	add	r2, fp
 80070fa:	9209      	str	r2, [sp, #36]	; 0x24
 80070fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80a2 	beq.w	800724a <_vfiprintf_r+0x20e>
 8007106:	2300      	movs	r3, #0
 8007108:	f04f 32ff 	mov.w	r2, #4294967295
 800710c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007110:	f10a 0a01 	add.w	sl, sl, #1
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	9307      	str	r3, [sp, #28]
 8007118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800711c:	931a      	str	r3, [sp, #104]	; 0x68
 800711e:	4654      	mov	r4, sl
 8007120:	2205      	movs	r2, #5
 8007122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007126:	4858      	ldr	r0, [pc, #352]	; (8007288 <_vfiprintf_r+0x24c>)
 8007128:	f7f9 f86a 	bl	8000200 <memchr>
 800712c:	9a04      	ldr	r2, [sp, #16]
 800712e:	b9d8      	cbnz	r0, 8007168 <_vfiprintf_r+0x12c>
 8007130:	06d1      	lsls	r1, r2, #27
 8007132:	bf44      	itt	mi
 8007134:	2320      	movmi	r3, #32
 8007136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713a:	0713      	lsls	r3, r2, #28
 800713c:	bf44      	itt	mi
 800713e:	232b      	movmi	r3, #43	; 0x2b
 8007140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007144:	f89a 3000 	ldrb.w	r3, [sl]
 8007148:	2b2a      	cmp	r3, #42	; 0x2a
 800714a:	d015      	beq.n	8007178 <_vfiprintf_r+0x13c>
 800714c:	9a07      	ldr	r2, [sp, #28]
 800714e:	4654      	mov	r4, sl
 8007150:	2000      	movs	r0, #0
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4621      	mov	r1, r4
 8007158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800715c:	3b30      	subs	r3, #48	; 0x30
 800715e:	2b09      	cmp	r3, #9
 8007160:	d94e      	bls.n	8007200 <_vfiprintf_r+0x1c4>
 8007162:	b1b0      	cbz	r0, 8007192 <_vfiprintf_r+0x156>
 8007164:	9207      	str	r2, [sp, #28]
 8007166:	e014      	b.n	8007192 <_vfiprintf_r+0x156>
 8007168:	eba0 0308 	sub.w	r3, r0, r8
 800716c:	fa09 f303 	lsl.w	r3, r9, r3
 8007170:	4313      	orrs	r3, r2
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	46a2      	mov	sl, r4
 8007176:	e7d2      	b.n	800711e <_vfiprintf_r+0xe2>
 8007178:	9b03      	ldr	r3, [sp, #12]
 800717a:	1d19      	adds	r1, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	9103      	str	r1, [sp, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	bfbb      	ittet	lt
 8007184:	425b      	neglt	r3, r3
 8007186:	f042 0202 	orrlt.w	r2, r2, #2
 800718a:	9307      	strge	r3, [sp, #28]
 800718c:	9307      	strlt	r3, [sp, #28]
 800718e:	bfb8      	it	lt
 8007190:	9204      	strlt	r2, [sp, #16]
 8007192:	7823      	ldrb	r3, [r4, #0]
 8007194:	2b2e      	cmp	r3, #46	; 0x2e
 8007196:	d10c      	bne.n	80071b2 <_vfiprintf_r+0x176>
 8007198:	7863      	ldrb	r3, [r4, #1]
 800719a:	2b2a      	cmp	r3, #42	; 0x2a
 800719c:	d135      	bne.n	800720a <_vfiprintf_r+0x1ce>
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	1d1a      	adds	r2, r3, #4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	9203      	str	r2, [sp, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfb8      	it	lt
 80071aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ae:	3402      	adds	r4, #2
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007298 <_vfiprintf_r+0x25c>
 80071b6:	7821      	ldrb	r1, [r4, #0]
 80071b8:	2203      	movs	r2, #3
 80071ba:	4650      	mov	r0, sl
 80071bc:	f7f9 f820 	bl	8000200 <memchr>
 80071c0:	b140      	cbz	r0, 80071d4 <_vfiprintf_r+0x198>
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	eba0 000a 	sub.w	r0, r0, sl
 80071c8:	fa03 f000 	lsl.w	r0, r3, r0
 80071cc:	9b04      	ldr	r3, [sp, #16]
 80071ce:	4303      	orrs	r3, r0
 80071d0:	3401      	adds	r4, #1
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d8:	482c      	ldr	r0, [pc, #176]	; (800728c <_vfiprintf_r+0x250>)
 80071da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071de:	2206      	movs	r2, #6
 80071e0:	f7f9 f80e 	bl	8000200 <memchr>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d03f      	beq.n	8007268 <_vfiprintf_r+0x22c>
 80071e8:	4b29      	ldr	r3, [pc, #164]	; (8007290 <_vfiprintf_r+0x254>)
 80071ea:	bb1b      	cbnz	r3, 8007234 <_vfiprintf_r+0x1f8>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	3307      	adds	r3, #7
 80071f0:	f023 0307 	bic.w	r3, r3, #7
 80071f4:	3308      	adds	r3, #8
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fa:	443b      	add	r3, r7
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	e767      	b.n	80070d0 <_vfiprintf_r+0x94>
 8007200:	fb0c 3202 	mla	r2, ip, r2, r3
 8007204:	460c      	mov	r4, r1
 8007206:	2001      	movs	r0, #1
 8007208:	e7a5      	b.n	8007156 <_vfiprintf_r+0x11a>
 800720a:	2300      	movs	r3, #0
 800720c:	3401      	adds	r4, #1
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	4619      	mov	r1, r3
 8007212:	f04f 0c0a 	mov.w	ip, #10
 8007216:	4620      	mov	r0, r4
 8007218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800721c:	3a30      	subs	r2, #48	; 0x30
 800721e:	2a09      	cmp	r2, #9
 8007220:	d903      	bls.n	800722a <_vfiprintf_r+0x1ee>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0c5      	beq.n	80071b2 <_vfiprintf_r+0x176>
 8007226:	9105      	str	r1, [sp, #20]
 8007228:	e7c3      	b.n	80071b2 <_vfiprintf_r+0x176>
 800722a:	fb0c 2101 	mla	r1, ip, r1, r2
 800722e:	4604      	mov	r4, r0
 8007230:	2301      	movs	r3, #1
 8007232:	e7f0      	b.n	8007216 <_vfiprintf_r+0x1da>
 8007234:	ab03      	add	r3, sp, #12
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	462a      	mov	r2, r5
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <_vfiprintf_r+0x258>)
 800723c:	a904      	add	r1, sp, #16
 800723e:	4630      	mov	r0, r6
 8007240:	f3af 8000 	nop.w
 8007244:	4607      	mov	r7, r0
 8007246:	1c78      	adds	r0, r7, #1
 8007248:	d1d6      	bne.n	80071f8 <_vfiprintf_r+0x1bc>
 800724a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800724c:	07d9      	lsls	r1, r3, #31
 800724e:	d405      	bmi.n	800725c <_vfiprintf_r+0x220>
 8007250:	89ab      	ldrh	r3, [r5, #12]
 8007252:	059a      	lsls	r2, r3, #22
 8007254:	d402      	bmi.n	800725c <_vfiprintf_r+0x220>
 8007256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007258:	f000 faa1 	bl	800779e <__retarget_lock_release_recursive>
 800725c:	89ab      	ldrh	r3, [r5, #12]
 800725e:	065b      	lsls	r3, r3, #25
 8007260:	f53f af12 	bmi.w	8007088 <_vfiprintf_r+0x4c>
 8007264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007266:	e711      	b.n	800708c <_vfiprintf_r+0x50>
 8007268:	ab03      	add	r3, sp, #12
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	462a      	mov	r2, r5
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <_vfiprintf_r+0x258>)
 8007270:	a904      	add	r1, sp, #16
 8007272:	4630      	mov	r0, r6
 8007274:	f7fe fe40 	bl	8005ef8 <_printf_i>
 8007278:	e7e4      	b.n	8007244 <_vfiprintf_r+0x208>
 800727a:	bf00      	nop
 800727c:	08007e10 	.word	0x08007e10
 8007280:	08007e30 	.word	0x08007e30
 8007284:	08007df0 	.word	0x08007df0
 8007288:	08007d14 	.word	0x08007d14
 800728c:	08007d1e 	.word	0x08007d1e
 8007290:	00000000 	.word	0x00000000
 8007294:	08007017 	.word	0x08007017
 8007298:	08007d1a 	.word	0x08007d1a

0800729c <__swbuf_r>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	460e      	mov	r6, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	4605      	mov	r5, r0
 80072a4:	b118      	cbz	r0, 80072ae <__swbuf_r+0x12>
 80072a6:	6983      	ldr	r3, [r0, #24]
 80072a8:	b90b      	cbnz	r3, 80072ae <__swbuf_r+0x12>
 80072aa:	f000 f9d9 	bl	8007660 <__sinit>
 80072ae:	4b21      	ldr	r3, [pc, #132]	; (8007334 <__swbuf_r+0x98>)
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d12b      	bne.n	800730c <__swbuf_r+0x70>
 80072b4:	686c      	ldr	r4, [r5, #4]
 80072b6:	69a3      	ldr	r3, [r4, #24]
 80072b8:	60a3      	str	r3, [r4, #8]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	071a      	lsls	r2, r3, #28
 80072be:	d52f      	bpl.n	8007320 <__swbuf_r+0x84>
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	b36b      	cbz	r3, 8007320 <__swbuf_r+0x84>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	6820      	ldr	r0, [r4, #0]
 80072c8:	1ac0      	subs	r0, r0, r3
 80072ca:	6963      	ldr	r3, [r4, #20]
 80072cc:	b2f6      	uxtb	r6, r6
 80072ce:	4283      	cmp	r3, r0
 80072d0:	4637      	mov	r7, r6
 80072d2:	dc04      	bgt.n	80072de <__swbuf_r+0x42>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 f92e 	bl	8007538 <_fflush_r>
 80072dc:	bb30      	cbnz	r0, 800732c <__swbuf_r+0x90>
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	60a3      	str	r3, [r4, #8]
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	6022      	str	r2, [r4, #0]
 80072ea:	701e      	strb	r6, [r3, #0]
 80072ec:	6963      	ldr	r3, [r4, #20]
 80072ee:	3001      	adds	r0, #1
 80072f0:	4283      	cmp	r3, r0
 80072f2:	d004      	beq.n	80072fe <__swbuf_r+0x62>
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	07db      	lsls	r3, r3, #31
 80072f8:	d506      	bpl.n	8007308 <__swbuf_r+0x6c>
 80072fa:	2e0a      	cmp	r6, #10
 80072fc:	d104      	bne.n	8007308 <__swbuf_r+0x6c>
 80072fe:	4621      	mov	r1, r4
 8007300:	4628      	mov	r0, r5
 8007302:	f000 f919 	bl	8007538 <_fflush_r>
 8007306:	b988      	cbnz	r0, 800732c <__swbuf_r+0x90>
 8007308:	4638      	mov	r0, r7
 800730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <__swbuf_r+0x9c>)
 800730e:	429c      	cmp	r4, r3
 8007310:	d101      	bne.n	8007316 <__swbuf_r+0x7a>
 8007312:	68ac      	ldr	r4, [r5, #8]
 8007314:	e7cf      	b.n	80072b6 <__swbuf_r+0x1a>
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <__swbuf_r+0xa0>)
 8007318:	429c      	cmp	r4, r3
 800731a:	bf08      	it	eq
 800731c:	68ec      	ldreq	r4, [r5, #12]
 800731e:	e7ca      	b.n	80072b6 <__swbuf_r+0x1a>
 8007320:	4621      	mov	r1, r4
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f80c 	bl	8007340 <__swsetup_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	d0cb      	beq.n	80072c4 <__swbuf_r+0x28>
 800732c:	f04f 37ff 	mov.w	r7, #4294967295
 8007330:	e7ea      	b.n	8007308 <__swbuf_r+0x6c>
 8007332:	bf00      	nop
 8007334:	08007e10 	.word	0x08007e10
 8007338:	08007e30 	.word	0x08007e30
 800733c:	08007df0 	.word	0x08007df0

08007340 <__swsetup_r>:
 8007340:	4b32      	ldr	r3, [pc, #200]	; (800740c <__swsetup_r+0xcc>)
 8007342:	b570      	push	{r4, r5, r6, lr}
 8007344:	681d      	ldr	r5, [r3, #0]
 8007346:	4606      	mov	r6, r0
 8007348:	460c      	mov	r4, r1
 800734a:	b125      	cbz	r5, 8007356 <__swsetup_r+0x16>
 800734c:	69ab      	ldr	r3, [r5, #24]
 800734e:	b913      	cbnz	r3, 8007356 <__swsetup_r+0x16>
 8007350:	4628      	mov	r0, r5
 8007352:	f000 f985 	bl	8007660 <__sinit>
 8007356:	4b2e      	ldr	r3, [pc, #184]	; (8007410 <__swsetup_r+0xd0>)
 8007358:	429c      	cmp	r4, r3
 800735a:	d10f      	bne.n	800737c <__swsetup_r+0x3c>
 800735c:	686c      	ldr	r4, [r5, #4]
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007364:	0719      	lsls	r1, r3, #28
 8007366:	d42c      	bmi.n	80073c2 <__swsetup_r+0x82>
 8007368:	06dd      	lsls	r5, r3, #27
 800736a:	d411      	bmi.n	8007390 <__swsetup_r+0x50>
 800736c:	2309      	movs	r3, #9
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	f04f 30ff 	mov.w	r0, #4294967295
 800737a:	e03e      	b.n	80073fa <__swsetup_r+0xba>
 800737c:	4b25      	ldr	r3, [pc, #148]	; (8007414 <__swsetup_r+0xd4>)
 800737e:	429c      	cmp	r4, r3
 8007380:	d101      	bne.n	8007386 <__swsetup_r+0x46>
 8007382:	68ac      	ldr	r4, [r5, #8]
 8007384:	e7eb      	b.n	800735e <__swsetup_r+0x1e>
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <__swsetup_r+0xd8>)
 8007388:	429c      	cmp	r4, r3
 800738a:	bf08      	it	eq
 800738c:	68ec      	ldreq	r4, [r5, #12]
 800738e:	e7e6      	b.n	800735e <__swsetup_r+0x1e>
 8007390:	0758      	lsls	r0, r3, #29
 8007392:	d512      	bpl.n	80073ba <__swsetup_r+0x7a>
 8007394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007396:	b141      	cbz	r1, 80073aa <__swsetup_r+0x6a>
 8007398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <__swsetup_r+0x66>
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff fdcd 	bl	8006f40 <_free_r>
 80073a6:	2300      	movs	r3, #0
 80073a8:	6363      	str	r3, [r4, #52]	; 0x34
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	2300      	movs	r3, #0
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f043 0308 	orr.w	r3, r3, #8
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	b94b      	cbnz	r3, 80073da <__swsetup_r+0x9a>
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d0:	d003      	beq.n	80073da <__swsetup_r+0x9a>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 fa09 	bl	80077ec <__smakebuf_r>
 80073da:	89a0      	ldrh	r0, [r4, #12]
 80073dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e0:	f010 0301 	ands.w	r3, r0, #1
 80073e4:	d00a      	beq.n	80073fc <__swsetup_r+0xbc>
 80073e6:	2300      	movs	r3, #0
 80073e8:	60a3      	str	r3, [r4, #8]
 80073ea:	6963      	ldr	r3, [r4, #20]
 80073ec:	425b      	negs	r3, r3
 80073ee:	61a3      	str	r3, [r4, #24]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	b943      	cbnz	r3, 8007406 <__swsetup_r+0xc6>
 80073f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f8:	d1ba      	bne.n	8007370 <__swsetup_r+0x30>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	0781      	lsls	r1, r0, #30
 80073fe:	bf58      	it	pl
 8007400:	6963      	ldrpl	r3, [r4, #20]
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	e7f4      	b.n	80073f0 <__swsetup_r+0xb0>
 8007406:	2000      	movs	r0, #0
 8007408:	e7f7      	b.n	80073fa <__swsetup_r+0xba>
 800740a:	bf00      	nop
 800740c:	2000002c 	.word	0x2000002c
 8007410:	08007e10 	.word	0x08007e10
 8007414:	08007e30 	.word	0x08007e30
 8007418:	08007df0 	.word	0x08007df0

0800741c <abort>:
 800741c:	b508      	push	{r3, lr}
 800741e:	2006      	movs	r0, #6
 8007420:	f000 fa4c 	bl	80078bc <raise>
 8007424:	2001      	movs	r0, #1
 8007426:	f7fb f8b5 	bl	8002594 <_exit>
	...

0800742c <__sflush_r>:
 800742c:	898a      	ldrh	r2, [r1, #12]
 800742e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	4605      	mov	r5, r0
 8007434:	0710      	lsls	r0, r2, #28
 8007436:	460c      	mov	r4, r1
 8007438:	d458      	bmi.n	80074ec <__sflush_r+0xc0>
 800743a:	684b      	ldr	r3, [r1, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	dc05      	bgt.n	800744c <__sflush_r+0x20>
 8007440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	dc02      	bgt.n	800744c <__sflush_r+0x20>
 8007446:	2000      	movs	r0, #0
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800744e:	2e00      	cmp	r6, #0
 8007450:	d0f9      	beq.n	8007446 <__sflush_r+0x1a>
 8007452:	2300      	movs	r3, #0
 8007454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007458:	682f      	ldr	r7, [r5, #0]
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	d032      	beq.n	80074c4 <__sflush_r+0x98>
 800745e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	075a      	lsls	r2, r3, #29
 8007464:	d505      	bpl.n	8007472 <__sflush_r+0x46>
 8007466:	6863      	ldr	r3, [r4, #4]
 8007468:	1ac0      	subs	r0, r0, r3
 800746a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800746c:	b10b      	cbz	r3, 8007472 <__sflush_r+0x46>
 800746e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007470:	1ac0      	subs	r0, r0, r3
 8007472:	2300      	movs	r3, #0
 8007474:	4602      	mov	r2, r0
 8007476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007478:	6a21      	ldr	r1, [r4, #32]
 800747a:	4628      	mov	r0, r5
 800747c:	47b0      	blx	r6
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	d106      	bne.n	8007492 <__sflush_r+0x66>
 8007484:	6829      	ldr	r1, [r5, #0]
 8007486:	291d      	cmp	r1, #29
 8007488:	d82c      	bhi.n	80074e4 <__sflush_r+0xb8>
 800748a:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <__sflush_r+0x108>)
 800748c:	40ca      	lsrs	r2, r1
 800748e:	07d6      	lsls	r6, r2, #31
 8007490:	d528      	bpl.n	80074e4 <__sflush_r+0xb8>
 8007492:	2200      	movs	r2, #0
 8007494:	6062      	str	r2, [r4, #4]
 8007496:	04d9      	lsls	r1, r3, #19
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	d504      	bpl.n	80074a8 <__sflush_r+0x7c>
 800749e:	1c42      	adds	r2, r0, #1
 80074a0:	d101      	bne.n	80074a6 <__sflush_r+0x7a>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	b903      	cbnz	r3, 80074a8 <__sflush_r+0x7c>
 80074a6:	6560      	str	r0, [r4, #84]	; 0x54
 80074a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074aa:	602f      	str	r7, [r5, #0]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d0ca      	beq.n	8007446 <__sflush_r+0x1a>
 80074b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b4:	4299      	cmp	r1, r3
 80074b6:	d002      	beq.n	80074be <__sflush_r+0x92>
 80074b8:	4628      	mov	r0, r5
 80074ba:	f7ff fd41 	bl	8006f40 <_free_r>
 80074be:	2000      	movs	r0, #0
 80074c0:	6360      	str	r0, [r4, #52]	; 0x34
 80074c2:	e7c1      	b.n	8007448 <__sflush_r+0x1c>
 80074c4:	6a21      	ldr	r1, [r4, #32]
 80074c6:	2301      	movs	r3, #1
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	1c41      	adds	r1, r0, #1
 80074ce:	d1c7      	bne.n	8007460 <__sflush_r+0x34>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c4      	beq.n	8007460 <__sflush_r+0x34>
 80074d6:	2b1d      	cmp	r3, #29
 80074d8:	d001      	beq.n	80074de <__sflush_r+0xb2>
 80074da:	2b16      	cmp	r3, #22
 80074dc:	d101      	bne.n	80074e2 <__sflush_r+0xb6>
 80074de:	602f      	str	r7, [r5, #0]
 80074e0:	e7b1      	b.n	8007446 <__sflush_r+0x1a>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	e7ad      	b.n	8007448 <__sflush_r+0x1c>
 80074ec:	690f      	ldr	r7, [r1, #16]
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d0a9      	beq.n	8007446 <__sflush_r+0x1a>
 80074f2:	0793      	lsls	r3, r2, #30
 80074f4:	680e      	ldr	r6, [r1, #0]
 80074f6:	bf08      	it	eq
 80074f8:	694b      	ldreq	r3, [r1, #20]
 80074fa:	600f      	str	r7, [r1, #0]
 80074fc:	bf18      	it	ne
 80074fe:	2300      	movne	r3, #0
 8007500:	eba6 0807 	sub.w	r8, r6, r7
 8007504:	608b      	str	r3, [r1, #8]
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	dd9c      	ble.n	8007446 <__sflush_r+0x1a>
 800750c:	6a21      	ldr	r1, [r4, #32]
 800750e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007510:	4643      	mov	r3, r8
 8007512:	463a      	mov	r2, r7
 8007514:	4628      	mov	r0, r5
 8007516:	47b0      	blx	r6
 8007518:	2800      	cmp	r0, #0
 800751a:	dc06      	bgt.n	800752a <__sflush_r+0xfe>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	e78e      	b.n	8007448 <__sflush_r+0x1c>
 800752a:	4407      	add	r7, r0
 800752c:	eba8 0800 	sub.w	r8, r8, r0
 8007530:	e7e9      	b.n	8007506 <__sflush_r+0xda>
 8007532:	bf00      	nop
 8007534:	20400001 	.word	0x20400001

08007538 <_fflush_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b913      	cbnz	r3, 8007548 <_fflush_r+0x10>
 8007542:	2500      	movs	r5, #0
 8007544:	4628      	mov	r0, r5
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	b118      	cbz	r0, 8007552 <_fflush_r+0x1a>
 800754a:	6983      	ldr	r3, [r0, #24]
 800754c:	b90b      	cbnz	r3, 8007552 <_fflush_r+0x1a>
 800754e:	f000 f887 	bl	8007660 <__sinit>
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <_fflush_r+0x6c>)
 8007554:	429c      	cmp	r4, r3
 8007556:	d11b      	bne.n	8007590 <_fflush_r+0x58>
 8007558:	686c      	ldr	r4, [r5, #4]
 800755a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ef      	beq.n	8007542 <_fflush_r+0xa>
 8007562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007564:	07d0      	lsls	r0, r2, #31
 8007566:	d404      	bmi.n	8007572 <_fflush_r+0x3a>
 8007568:	0599      	lsls	r1, r3, #22
 800756a:	d402      	bmi.n	8007572 <_fflush_r+0x3a>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f000 f915 	bl	800779c <__retarget_lock_acquire_recursive>
 8007572:	4628      	mov	r0, r5
 8007574:	4621      	mov	r1, r4
 8007576:	f7ff ff59 	bl	800742c <__sflush_r>
 800757a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757c:	07da      	lsls	r2, r3, #31
 800757e:	4605      	mov	r5, r0
 8007580:	d4e0      	bmi.n	8007544 <_fflush_r+0xc>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	059b      	lsls	r3, r3, #22
 8007586:	d4dd      	bmi.n	8007544 <_fflush_r+0xc>
 8007588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758a:	f000 f908 	bl	800779e <__retarget_lock_release_recursive>
 800758e:	e7d9      	b.n	8007544 <_fflush_r+0xc>
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <_fflush_r+0x70>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <_fflush_r+0x62>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e7df      	b.n	800755a <_fflush_r+0x22>
 800759a:	4b04      	ldr	r3, [pc, #16]	; (80075ac <_fflush_r+0x74>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	e7da      	b.n	800755a <_fflush_r+0x22>
 80075a4:	08007e10 	.word	0x08007e10
 80075a8:	08007e30 	.word	0x08007e30
 80075ac:	08007df0 	.word	0x08007df0

080075b0 <std>:
 80075b0:	2300      	movs	r3, #0
 80075b2:	b510      	push	{r4, lr}
 80075b4:	4604      	mov	r4, r0
 80075b6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075be:	6083      	str	r3, [r0, #8]
 80075c0:	8181      	strh	r1, [r0, #12]
 80075c2:	6643      	str	r3, [r0, #100]	; 0x64
 80075c4:	81c2      	strh	r2, [r0, #14]
 80075c6:	6183      	str	r3, [r0, #24]
 80075c8:	4619      	mov	r1, r3
 80075ca:	2208      	movs	r2, #8
 80075cc:	305c      	adds	r0, #92	; 0x5c
 80075ce:	f7fd fcef 	bl	8004fb0 <memset>
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x38>)
 80075d4:	6263      	str	r3, [r4, #36]	; 0x24
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <std+0x3c>)
 80075d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <std+0x40>)
 80075dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x44>)
 80075e0:	6224      	str	r4, [r4, #32]
 80075e2:	6323      	str	r3, [r4, #48]	; 0x30
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	080078f5 	.word	0x080078f5
 80075ec:	08007917 	.word	0x08007917
 80075f0:	0800794f 	.word	0x0800794f
 80075f4:	08007973 	.word	0x08007973

080075f8 <_cleanup_r>:
 80075f8:	4901      	ldr	r1, [pc, #4]	; (8007600 <_cleanup_r+0x8>)
 80075fa:	f000 b8af 	b.w	800775c <_fwalk_reent>
 80075fe:	bf00      	nop
 8007600:	08007539 	.word	0x08007539

08007604 <__sfmoreglue>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	2268      	movs	r2, #104	; 0x68
 8007608:	1e4d      	subs	r5, r1, #1
 800760a:	4355      	muls	r5, r2
 800760c:	460e      	mov	r6, r1
 800760e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007612:	f7fe fa05 	bl	8005a20 <_malloc_r>
 8007616:	4604      	mov	r4, r0
 8007618:	b140      	cbz	r0, 800762c <__sfmoreglue+0x28>
 800761a:	2100      	movs	r1, #0
 800761c:	e9c0 1600 	strd	r1, r6, [r0]
 8007620:	300c      	adds	r0, #12
 8007622:	60a0      	str	r0, [r4, #8]
 8007624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007628:	f7fd fcc2 	bl	8004fb0 <memset>
 800762c:	4620      	mov	r0, r4
 800762e:	bd70      	pop	{r4, r5, r6, pc}

08007630 <__sfp_lock_acquire>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_acquire+0x8>)
 8007632:	f000 b8b3 	b.w	800779c <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	200001cd 	.word	0x200001cd

0800763c <__sfp_lock_release>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_release+0x8>)
 800763e:	f000 b8ae 	b.w	800779e <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	200001cd 	.word	0x200001cd

08007648 <__sinit_lock_acquire>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_acquire+0x8>)
 800764a:	f000 b8a7 	b.w	800779c <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	200001ce 	.word	0x200001ce

08007654 <__sinit_lock_release>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sinit_lock_release+0x8>)
 8007656:	f000 b8a2 	b.w	800779e <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	200001ce 	.word	0x200001ce

08007660 <__sinit>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4604      	mov	r4, r0
 8007664:	f7ff fff0 	bl	8007648 <__sinit_lock_acquire>
 8007668:	69a3      	ldr	r3, [r4, #24]
 800766a:	b11b      	cbz	r3, 8007674 <__sinit+0x14>
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f7ff bff0 	b.w	8007654 <__sinit_lock_release>
 8007674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007678:	6523      	str	r3, [r4, #80]	; 0x50
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <__sinit+0x68>)
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <__sinit+0x6c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	62a2      	str	r2, [r4, #40]	; 0x28
 8007682:	42a3      	cmp	r3, r4
 8007684:	bf04      	itt	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	61a3      	streq	r3, [r4, #24]
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f820 	bl	80076d0 <__sfp>
 8007690:	6060      	str	r0, [r4, #4]
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f81c 	bl	80076d0 <__sfp>
 8007698:	60a0      	str	r0, [r4, #8]
 800769a:	4620      	mov	r0, r4
 800769c:	f000 f818 	bl	80076d0 <__sfp>
 80076a0:	2200      	movs	r2, #0
 80076a2:	60e0      	str	r0, [r4, #12]
 80076a4:	2104      	movs	r1, #4
 80076a6:	6860      	ldr	r0, [r4, #4]
 80076a8:	f7ff ff82 	bl	80075b0 <std>
 80076ac:	68a0      	ldr	r0, [r4, #8]
 80076ae:	2201      	movs	r2, #1
 80076b0:	2109      	movs	r1, #9
 80076b2:	f7ff ff7d 	bl	80075b0 <std>
 80076b6:	68e0      	ldr	r0, [r4, #12]
 80076b8:	2202      	movs	r2, #2
 80076ba:	2112      	movs	r1, #18
 80076bc:	f7ff ff78 	bl	80075b0 <std>
 80076c0:	2301      	movs	r3, #1
 80076c2:	61a3      	str	r3, [r4, #24]
 80076c4:	e7d2      	b.n	800766c <__sinit+0xc>
 80076c6:	bf00      	nop
 80076c8:	08007b8c 	.word	0x08007b8c
 80076cc:	080075f9 	.word	0x080075f9

080076d0 <__sfp>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4607      	mov	r7, r0
 80076d4:	f7ff ffac 	bl	8007630 <__sfp_lock_acquire>
 80076d8:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <__sfp+0x84>)
 80076da:	681e      	ldr	r6, [r3, #0]
 80076dc:	69b3      	ldr	r3, [r6, #24]
 80076de:	b913      	cbnz	r3, 80076e6 <__sfp+0x16>
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff ffbd 	bl	8007660 <__sinit>
 80076e6:	3648      	adds	r6, #72	; 0x48
 80076e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	d503      	bpl.n	80076f8 <__sfp+0x28>
 80076f0:	6833      	ldr	r3, [r6, #0]
 80076f2:	b30b      	cbz	r3, 8007738 <__sfp+0x68>
 80076f4:	6836      	ldr	r6, [r6, #0]
 80076f6:	e7f7      	b.n	80076e8 <__sfp+0x18>
 80076f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076fc:	b9d5      	cbnz	r5, 8007734 <__sfp+0x64>
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <__sfp+0x88>)
 8007700:	60e3      	str	r3, [r4, #12]
 8007702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007706:	6665      	str	r5, [r4, #100]	; 0x64
 8007708:	f000 f847 	bl	800779a <__retarget_lock_init_recursive>
 800770c:	f7ff ff96 	bl	800763c <__sfp_lock_release>
 8007710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007718:	6025      	str	r5, [r4, #0]
 800771a:	61a5      	str	r5, [r4, #24]
 800771c:	2208      	movs	r2, #8
 800771e:	4629      	mov	r1, r5
 8007720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007724:	f7fd fc44 	bl	8004fb0 <memset>
 8007728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800772c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007730:	4620      	mov	r0, r4
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	3468      	adds	r4, #104	; 0x68
 8007736:	e7d9      	b.n	80076ec <__sfp+0x1c>
 8007738:	2104      	movs	r1, #4
 800773a:	4638      	mov	r0, r7
 800773c:	f7ff ff62 	bl	8007604 <__sfmoreglue>
 8007740:	4604      	mov	r4, r0
 8007742:	6030      	str	r0, [r6, #0]
 8007744:	2800      	cmp	r0, #0
 8007746:	d1d5      	bne.n	80076f4 <__sfp+0x24>
 8007748:	f7ff ff78 	bl	800763c <__sfp_lock_release>
 800774c:	230c      	movs	r3, #12
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7ee      	b.n	8007730 <__sfp+0x60>
 8007752:	bf00      	nop
 8007754:	08007b8c 	.word	0x08007b8c
 8007758:	ffff0001 	.word	0xffff0001

0800775c <_fwalk_reent>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4606      	mov	r6, r0
 8007762:	4688      	mov	r8, r1
 8007764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007768:	2700      	movs	r7, #0
 800776a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800776e:	f1b9 0901 	subs.w	r9, r9, #1
 8007772:	d505      	bpl.n	8007780 <_fwalk_reent+0x24>
 8007774:	6824      	ldr	r4, [r4, #0]
 8007776:	2c00      	cmp	r4, #0
 8007778:	d1f7      	bne.n	800776a <_fwalk_reent+0xe>
 800777a:	4638      	mov	r0, r7
 800777c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007780:	89ab      	ldrh	r3, [r5, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d907      	bls.n	8007796 <_fwalk_reent+0x3a>
 8007786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778a:	3301      	adds	r3, #1
 800778c:	d003      	beq.n	8007796 <_fwalk_reent+0x3a>
 800778e:	4629      	mov	r1, r5
 8007790:	4630      	mov	r0, r6
 8007792:	47c0      	blx	r8
 8007794:	4307      	orrs	r7, r0
 8007796:	3568      	adds	r5, #104	; 0x68
 8007798:	e7e9      	b.n	800776e <_fwalk_reent+0x12>

0800779a <__retarget_lock_init_recursive>:
 800779a:	4770      	bx	lr

0800779c <__retarget_lock_acquire_recursive>:
 800779c:	4770      	bx	lr

0800779e <__retarget_lock_release_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__swhatbuf_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	b096      	sub	sp, #88	; 0x58
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	da08      	bge.n	80077c4 <__swhatbuf_r+0x24>
 80077b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	061a      	lsls	r2, r3, #24
 80077bc:	d410      	bmi.n	80077e0 <__swhatbuf_r+0x40>
 80077be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c2:	e00e      	b.n	80077e2 <__swhatbuf_r+0x42>
 80077c4:	466a      	mov	r2, sp
 80077c6:	f000 f8fb 	bl	80079c0 <_fstat_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dbf1      	blt.n	80077b2 <__swhatbuf_r+0x12>
 80077ce:	9a01      	ldr	r2, [sp, #4]
 80077d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077d8:	425a      	negs	r2, r3
 80077da:	415a      	adcs	r2, r3
 80077dc:	602a      	str	r2, [r5, #0]
 80077de:	e7ee      	b.n	80077be <__swhatbuf_r+0x1e>
 80077e0:	2340      	movs	r3, #64	; 0x40
 80077e2:	2000      	movs	r0, #0
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	b016      	add	sp, #88	; 0x58
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b002      	add	sp, #8
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	ab01      	add	r3, sp, #4
 800780a:	466a      	mov	r2, sp
 800780c:	f7ff ffc8 	bl	80077a0 <__swhatbuf_r>
 8007810:	9900      	ldr	r1, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4630      	mov	r0, r6
 8007816:	f7fe f903 	bl	8005a20 <_malloc_r>
 800781a:	b948      	cbnz	r0, 8007830 <__smakebuf_r+0x44>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d4ef      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	e7e3      	b.n	80077f8 <__smakebuf_r+0xc>
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <__smakebuf_r+0x7c>)
 8007832:	62b3      	str	r3, [r6, #40]	; 0x28
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6163      	str	r3, [r4, #20]
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	6120      	str	r0, [r4, #16]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x74>
 8007848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784c:	4630      	mov	r0, r6
 800784e:	f000 f8c9 	bl	80079e4 <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x74>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	4305      	orrs	r5, r0
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cd      	b.n	8007804 <__smakebuf_r+0x18>
 8007868:	080075f9 	.word	0x080075f9

0800786c <_raise_r>:
 800786c:	291f      	cmp	r1, #31
 800786e:	b538      	push	{r3, r4, r5, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	d904      	bls.n	8007880 <_raise_r+0x14>
 8007876:	2316      	movs	r3, #22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007882:	b112      	cbz	r2, 800788a <_raise_r+0x1e>
 8007884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007888:	b94b      	cbnz	r3, 800789e <_raise_r+0x32>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f830 	bl	80078f0 <_getpid_r>
 8007890:	462a      	mov	r2, r5
 8007892:	4601      	mov	r1, r0
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789a:	f000 b817 	b.w	80078cc <_kill_r>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d00a      	beq.n	80078b8 <_raise_r+0x4c>
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	d103      	bne.n	80078ae <_raise_r+0x42>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7e7      	b.n	800787e <_raise_r+0x12>
 80078ae:	2400      	movs	r4, #0
 80078b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b4:	4628      	mov	r0, r5
 80078b6:	4798      	blx	r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7e0      	b.n	800787e <_raise_r+0x12>

080078bc <raise>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <raise+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7ff bfd3 	b.w	800786c <_raise_r>
 80078c6:	bf00      	nop
 80078c8:	2000002c 	.word	0x2000002c

080078cc <_kill_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	; (80078ec <_kill_r+0x20>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f7fa fe4b 	bl	8002574 <_kill>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_kill_r+0x1c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_kill_r+0x1c>
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	200001c8 	.word	0x200001c8

080078f0 <_getpid_r>:
 80078f0:	f7fa be38 	b.w	8002564 <_getpid>

080078f4 <__sread>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f894 	bl	8007a28 <_read_r>
 8007900:	2800      	cmp	r0, #0
 8007902:	bfab      	itete	ge
 8007904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007906:	89a3      	ldrhlt	r3, [r4, #12]
 8007908:	181b      	addge	r3, r3, r0
 800790a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800790e:	bfac      	ite	ge
 8007910:	6563      	strge	r3, [r4, #84]	; 0x54
 8007912:	81a3      	strhlt	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__swrite>:
 8007916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	461f      	mov	r7, r3
 800791c:	898b      	ldrh	r3, [r1, #12]
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	4616      	mov	r6, r2
 8007926:	d505      	bpl.n	8007934 <__swrite+0x1e>
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	2302      	movs	r3, #2
 800792e:	2200      	movs	r2, #0
 8007930:	f000 f868 	bl	8007a04 <_lseek_r>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	4632      	mov	r2, r6
 8007942:	463b      	mov	r3, r7
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	f000 b817 	b.w	800797c <_write_r>

0800794e <__sseek>:
 800794e:	b510      	push	{r4, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 f855 	bl	8007a04 <_lseek_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	bf15      	itete	ne
 8007960:	6560      	strne	r0, [r4, #84]	; 0x54
 8007962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800796a:	81a3      	strheq	r3, [r4, #12]
 800796c:	bf18      	it	ne
 800796e:	81a3      	strhne	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__sclose>:
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 b813 	b.w	80079a0 <_close_r>
	...

0800797c <_write_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_write_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fa fe29 	bl	80025e2 <_write>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_write_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_write_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	200001c8 	.word	0x200001c8

080079a0 <_close_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_close_r+0x1c>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fa fe35 	bl	800261a <_close>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_close_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_close_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	200001c8 	.word	0x200001c8

080079c0 <_fstat_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	; (80079e0 <_fstat_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7fa fe30 	bl	8002632 <_fstat>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_fstat_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_fstat_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	200001c8 	.word	0x200001c8

080079e4 <_isatty_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	; (8007a00 <_isatty_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7fa fe2f 	bl	8002652 <_isatty>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_isatty_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_isatty_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	200001c8 	.word	0x200001c8

08007a04 <_lseek_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_lseek_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7fa fe28 	bl	8002668 <_lseek>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_lseek_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_lseek_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	200001c8 	.word	0x200001c8

08007a28 <_read_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_read_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fa fdb6 	bl	80025a8 <_read>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_read_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_read_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	200001c8 	.word	0x200001c8

08007a4c <_init>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr

08007a58 <_fini>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr
